// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	speakeasy_stringplanmodifier "github.com/epilot-dev/terraform-provider-epilot-workflow/internal/planmodifiers/stringplanmodifier"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-workflow/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-workflow/internal/sdk"
	"github.com/epilot-dev/terraform-provider-epilot-workflow/internal/sdk/models/operations"
	speakeasy_listvalidators "github.com/epilot-dev/terraform-provider-epilot-workflow/internal/validators/listvalidators"
	speakeasy_numbervalidators "github.com/epilot-dev/terraform-provider-epilot-workflow/internal/validators/numbervalidators"
	speakeasy_objectvalidators "github.com/epilot-dev/terraform-provider-epilot-workflow/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/epilot-dev/terraform-provider-epilot-workflow/internal/validators/stringvalidators"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &FlowTemplateResource{}
var _ resource.ResourceWithImportState = &FlowTemplateResource{}

func NewFlowTemplateResource() resource.Resource {
	return &FlowTemplateResource{}
}

// FlowTemplateResource defines the resource implementation.
type FlowTemplateResource struct {
	client *sdk.SDK
}

// FlowTemplateResourceModel describes the resource data model.
type FlowTemplateResourceModel struct {
	AssignedTo             []types.String                   `tfsdk:"assigned_to"`
	AvailableInEcp         types.Bool                       `tfsdk:"available_in_ecp"`
	ClosingReasons         []tfTypes.ClosingReason          `tfsdk:"closing_reasons"`
	CreatedAt              types.String                     `tfsdk:"created_at"`
	Description            types.String                     `tfsdk:"description"`
	DueDate                types.String                     `tfsdk:"due_date"`
	DueDateConfig          *tfTypes.DueDateConfig           `tfsdk:"due_date_config"`
	Edges                  []tfTypes.Edge                   `tfsdk:"edges"`
	Enabled                types.Bool                       `tfsdk:"enabled"`
	ID                     types.String                     `tfsdk:"id"`
	IsFlowMigrated         types.Bool                       `tfsdk:"is_flow_migrated"`
	Name                   types.String                     `tfsdk:"name"`
	OrgID                  types.String                     `tfsdk:"org_id"`
	Phases                 []tfTypes.Phase                  `tfsdk:"phases"`
	Tasks                  []tfTypes.Task                   `tfsdk:"tasks"`
	Taxonomies             []types.String                   `tfsdk:"taxonomies"`
	Trigger                *tfTypes.Trigger                 `tfsdk:"trigger"`
	UpdateEntityAttributes []tfTypes.UpdateEntityAttributes `tfsdk:"update_entity_attributes"`
	UpdatedAt              types.String                     `tfsdk:"updated_at"`
}

func (r *FlowTemplateResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_flow_template"
}

func (r *FlowTemplateResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "FlowTemplate Resource",
		Attributes: map[string]schema.Attribute{
			"assigned_to": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
			},
			"available_in_ecp": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Indicates whether this workflow is available for End Customer Portal or not. By default it's not.`,
			},
			"closing_reasons": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"creation_time": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Not Null; Requires replacement if changed.`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"last_update_time": schema.StringAttribute{
							Computed: true,
						},
						"status": schema.StringAttribute{
							Computed:    true,
							Description: `must be one of ["ACTIVE", "INACTIVE"]`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"ACTIVE",
									"INACTIVE",
								),
							},
						},
						"title": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"created_at": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `ISO String Date & Time`,
			},
			"description": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"due_date": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"due_date_config": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"duration": schema.NumberAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Not Null`,
						Validators: []validator.Number{
							speakeasy_numbervalidators.NotNull(),
						},
					},
					"phase_id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"task_id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"type": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Not Null; must be one of ["WORKFLOW_STARTED", "TASK_FINISHED", "PHASE_FINISHED"]`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.OneOf(
								"WORKFLOW_STARTED",
								"TASK_FINISHED",
								"PHASE_FINISHED",
							),
						},
					},
					"unit": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Not Null; must be one of ["minutes", "hours", "days", "weeks", "months"]`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.OneOf(
								"minutes",
								"hours",
								"days",
								"weeks",
								"months",
							),
						},
					},
				},
				Description: `Set due date for the task based on a dynamic condition`,
			},
			"edges": schema.ListNestedAttribute{
				Required: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"condition_id": schema.StringAttribute{
							Computed: true,
							Optional: true,
						},
						"from_id": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"id": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"none_met": schema.BoolAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Indicates a default case for a decision task. Only decision task edges can have this field and the flow advances using this edge if no conditions are met.`,
						},
						"to_id": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
					},
				},
			},
			"enabled": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Default:     booldefault.StaticBool(true),
				Description: `Whether the workflow is enabled or not. Default: true`,
			},
			"id": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"is_flow_migrated": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Default:     booldefault.StaticBool(false),
				Description: `Whether the workflow is migrated from workflows to flows or not. Default: false`,
			},
			"name": schema.StringAttribute{
				Required: true,
			},
			"org_id": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"phases": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"assigned_to": schema.ListAttribute{
							Computed:    true,
							Optional:    true,
							ElementType: types.StringType,
						},
						"due_date": schema.StringAttribute{
							Computed: true,
							Optional: true,
						},
						"due_date_config": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"duration": schema.NumberAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.Number{
										speakeasy_numbervalidators.NotNull(),
									},
								},
								"phase_id": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"task_id": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null; must be one of ["WORKFLOW_STARTED", "TASK_FINISHED", "PHASE_FINISHED"]`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.OneOf(
											"WORKFLOW_STARTED",
											"TASK_FINISHED",
											"PHASE_FINISHED",
										),
									},
								},
								"unit": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null; must be one of ["minutes", "hours", "days", "weeks", "months"]`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.OneOf(
											"minutes",
											"hours",
											"days",
											"weeks",
											"months",
										),
									},
								},
							},
							Description: `Set due date for the task based on a dynamic condition`,
						},
						"id": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"taxonomies": schema.ListAttribute{
							Computed:    true,
							Optional:    true,
							ElementType: types.StringType,
							Description: `Taxonomy ids that are associated with this workflow and used for filtering`,
						},
					},
				},
			},
			"tasks": schema.ListNestedAttribute{
				Required: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"automation_task": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"assigned_to": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"automation_config": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"flow_id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `Id of the configured automation to run. Not Null`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
											},
										},
									},
									Description: `Configuration for automation execution to run. Not Null`,
									Validators: []validator.Object{
										speakeasy_objectvalidators.NotNull(),
									},
								},
								"description": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"enabled": schema.BoolAttribute{
											Computed: true,
											Optional: true,
										},
										"value": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
									},
									Description: `Longer information regarding Task`,
								},
								"due_date": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"due_date_config": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"duration": schema.NumberAttribute{
											Computed:    true,
											Optional:    true,
											Description: `Not Null`,
											Validators: []validator.Number{
												speakeasy_numbervalidators.NotNull(),
											},
										},
										"phase_id": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"task_id": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"type": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `Not Null; must be one of ["WORKFLOW_STARTED", "TASK_FINISHED", "PHASE_FINISHED"]`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
												stringvalidator.OneOf(
													"WORKFLOW_STARTED",
													"TASK_FINISHED",
													"PHASE_FINISHED",
												),
											},
										},
										"unit": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `Not Null; must be one of ["minutes", "hours", "days", "weeks", "months"]`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
												stringvalidator.OneOf(
													"minutes",
													"hours",
													"days",
													"weeks",
													"months",
												),
											},
										},
									},
									Description: `Set due date for the task based on a dynamic condition`,
								},
								"ecp": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"description": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"enabled": schema.BoolAttribute{
											Computed: true,
											Optional: true,
										},
										"journey": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"id": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
												"journey_id": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
											},
										},
										"label": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
									},
									Description: `Details regarding ECP for the workflow step`,
								},
								"id": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"installer": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"description": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"enabled": schema.BoolAttribute{
											Computed: true,
											Optional: true,
										},
										"journey": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"id": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
												"journey_id": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
											},
										},
										"label": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
									},
									Description: `Details regarding ECP for the workflow step`,
								},
								"journey": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"journey_id": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
									},
								},
								"name": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"phase_id": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"requirements": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"phase_id": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"task_id": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"when": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Not Null; must be one of ["TASK_FINISHED", "PHASE_FINISHED"]`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.OneOf(
														"TASK_FINISHED",
														"PHASE_FINISHED",
													),
												},
											},
										},
									},
									Description: `requirements that need to be fulfilled in order to enable the task while flow instances are running`,
								},
								"schedule": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"delayed_schedule": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"duration": schema.NumberAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Not Null`,
													Validators: []validator.Number{
														speakeasy_numbervalidators.NotNull(),
													},
												},
												"mode": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Not Null; must be "delayed"`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
														stringvalidator.OneOf("delayed"),
													},
												},
												"unit": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Not Null; must be one of ["minutes", "hours", "days", "weeks", "months"]`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
														stringvalidator.OneOf(
															"minutes",
															"hours",
															"days",
															"weeks",
															"months",
														),
													},
												},
											},
											Validators: []validator.Object{
												objectvalidator.ConflictsWith(path.Expressions{
													path.MatchRelative().AtParent().AtName("immediate_schedule"),
													path.MatchRelative().AtParent().AtName("relative_schedule"),
												}...),
											},
										},
										"immediate_schedule": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"mode": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `must be "immediate"`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"immediate",
														),
													},
												},
											},
											Validators: []validator.Object{
												objectvalidator.ConflictsWith(path.Expressions{
													path.MatchRelative().AtParent().AtName("delayed_schedule"),
													path.MatchRelative().AtParent().AtName("relative_schedule"),
												}...),
											},
										},
										"relative_schedule": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"direction": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Not Null; must be one of ["before", "after"]`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
														stringvalidator.OneOf(
															"before",
															"after",
														),
													},
												},
												"duration": schema.NumberAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Not Null`,
													Validators: []validator.Number{
														speakeasy_numbervalidators.NotNull(),
													},
												},
												"mode": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Not Null; must be "relative"`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
														stringvalidator.OneOf("relative"),
													},
												},
												"reference": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"attribute": schema.StringAttribute{
															Computed:    true,
															Optional:    true,
															Description: `An entity attribute that identifies a date / datetime`,
														},
														"id": schema.StringAttribute{
															Computed:    true,
															Optional:    true,
															Description: `The id of the entity / workflow / task, based on the origin of the schedule. Not Null`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
															},
														},
														"origin": schema.StringAttribute{
															Computed:    true,
															Optional:    true,
															Description: `Not Null; must be one of ["flow_started", "task_completed", "trigger_entity_attribute"]`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
																stringvalidator.OneOf(
																	"flow_started",
																	"task_completed",
																	"trigger_entity_attribute",
																),
															},
														},
														"schema": schema.StringAttribute{
															Computed:    true,
															Optional:    true,
															Description: `The schema of the entity`,
														},
													},
													Description: `Not Null`,
													Validators: []validator.Object{
														speakeasy_objectvalidators.NotNull(),
													},
												},
												"unit": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Not Null; must be one of ["minutes", "hours", "days", "weeks", "months"]`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
														stringvalidator.OneOf(
															"minutes",
															"hours",
															"days",
															"weeks",
															"months",
														),
													},
												},
											},
											Validators: []validator.Object{
												objectvalidator.ConflictsWith(path.Expressions{
													path.MatchRelative().AtParent().AtName("delayed_schedule"),
													path.MatchRelative().AtParent().AtName("immediate_schedule"),
												}...),
											},
										},
									},
								},
								"task_type": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null; must be one of ["MANUAL", "AUTOMATION", "DECISION"]`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.OneOf(
											"MANUAL",
											"AUTOMATION",
											"DECISION",
										),
									},
								},
								"taxonomies": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Description: `Taxonomy ids that are associated with this workflow and used for filtering`,
								},
								"trigger_mode": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `must be one of ["manual", "automatic"]`,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"manual",
											"automatic",
										),
									},
								},
							},
							Validators: []validator.Object{
								objectvalidator.ConflictsWith(path.Expressions{
									path.MatchRelative().AtParent().AtName("decision_task"),
									path.MatchRelative().AtParent().AtName("task_base"),
								}...),
							},
						},
						"decision_task": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"assigned_to": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"conditions": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"branch_name": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The name of the branch. Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.UTF8LengthAtMost(255),
												},
											},
											"id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
												},
											},
											"logical_operator": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Not Null; must be one of ["AND", "OR"]`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.OneOf(
														"AND",
														"OR",
													),
												},
											},
											"statements": schema.ListNestedAttribute{
												Computed: true,
												Optional: true,
												NestedObject: schema.NestedAttributeObject{
													Validators: []validator.Object{
														speakeasy_objectvalidators.NotNull(),
													},
													Attributes: map[string]schema.Attribute{
														"id": schema.StringAttribute{
															Computed:    true,
															Optional:    true,
															Description: `Not Null`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
															},
														},
														"operator": schema.StringAttribute{
															Computed:    true,
															Optional:    true,
															Description: `Not Null; must be one of ["equals", "not_equals", "any_of", "none_of", "contains", "not_contains", "starts_with", "ends_with", "greater_than", "less_than", "greater_than_or_equals", "less_than_or_equals", "is_empty", "is_not_empty"]`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
																stringvalidator.OneOf(
																	"equals",
																	"not_equals",
																	"any_of",
																	"none_of",
																	"contains",
																	"not_contains",
																	"starts_with",
																	"ends_with",
																	"greater_than",
																	"less_than",
																	"greater_than_or_equals",
																	"less_than_or_equals",
																	"is_empty",
																	"is_not_empty",
																),
															},
														},
														"source": schema.SingleNestedAttribute{
															Computed: true,
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"attribute": schema.StringAttribute{
																	Computed: true,
																	Optional: true,
																},
																"attribute_operation": schema.StringAttribute{
																	Computed:    true,
																	Optional:    true,
																	Description: `must be one of ["all", "updated", "added", "deleted"]`,
																	Validators: []validator.String{
																		stringvalidator.OneOf(
																			"all",
																			"updated",
																			"added",
																			"deleted",
																		),
																	},
																},
																"attribute_repeatable": schema.BoolAttribute{
																	Computed: true,
																	Optional: true,
																},
																"attribute_type": schema.StringAttribute{
																	Computed:    true,
																	Optional:    true,
																	Description: `must be one of ["string", "text", "number", "boolean", "date", "datetime", "tags", "country", "email", "phone", "product", "price", "status", "relation", "multiselect", "select", "radio", "relation_user", "purpose", "label"]`,
																	Validators: []validator.String{
																		stringvalidator.OneOf(
																			"string",
																			"text",
																			"number",
																			"boolean",
																			"date",
																			"datetime",
																			"tags",
																			"country",
																			"email",
																			"phone",
																			"product",
																			"price",
																			"status",
																			"relation",
																			"multiselect",
																			"select",
																			"radio",
																			"relation_user",
																			"purpose",
																			"label",
																		),
																	},
																},
																"id": schema.StringAttribute{
																	Computed:    true,
																	Optional:    true,
																	Description: `The id of the action or trigger`,
																},
																"origin": schema.StringAttribute{
																	Computed:    true,
																	Optional:    true,
																	Description: `must be one of ["trigger", "action"]`,
																	Validators: []validator.String{
																		stringvalidator.OneOf(
																			"trigger",
																			"action",
																		),
																	},
																},
																"origin_type": schema.StringAttribute{
																	Computed:    true,
																	Optional:    true,
																	Description: `must be one of ["entity", "workflow", "journey_block"]`,
																	Validators: []validator.String{
																		stringvalidator.OneOf(
																			"entity",
																			"workflow",
																			"journey_block",
																		),
																	},
																},
																"schema": schema.StringAttribute{
																	Computed: true,
																	Optional: true,
																},
															},
															Description: `Not Null`,
															Validators: []validator.Object{
																speakeasy_objectvalidators.NotNull(),
															},
														},
														"values": schema.ListAttribute{
															Computed:    true,
															Optional:    true,
															ElementType: types.StringType,
															Description: `Not Null`,
															Validators: []validator.List{
																speakeasy_listvalidators.NotNull(),
															},
														},
													},
												},
												Description: `Not Null`,
												Validators: []validator.List{
													speakeasy_listvalidators.NotNull(),
												},
											},
										},
									},
									Description: `Not Null`,
									Validators: []validator.List{
										speakeasy_listvalidators.NotNull(),
									},
								},
								"description": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"enabled": schema.BoolAttribute{
											Computed: true,
											Optional: true,
										},
										"value": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
									},
									Description: `Longer information regarding Task`,
								},
								"due_date": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"due_date_config": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"duration": schema.NumberAttribute{
											Computed:    true,
											Optional:    true,
											Description: `Not Null`,
											Validators: []validator.Number{
												speakeasy_numbervalidators.NotNull(),
											},
										},
										"phase_id": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"task_id": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"type": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `Not Null; must be one of ["WORKFLOW_STARTED", "TASK_FINISHED", "PHASE_FINISHED"]`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
												stringvalidator.OneOf(
													"WORKFLOW_STARTED",
													"TASK_FINISHED",
													"PHASE_FINISHED",
												),
											},
										},
										"unit": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `Not Null; must be one of ["minutes", "hours", "days", "weeks", "months"]`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
												stringvalidator.OneOf(
													"minutes",
													"hours",
													"days",
													"weeks",
													"months",
												),
											},
										},
									},
									Description: `Set due date for the task based on a dynamic condition`,
								},
								"ecp": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"description": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"enabled": schema.BoolAttribute{
											Computed: true,
											Optional: true,
										},
										"journey": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"id": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
												"journey_id": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
											},
										},
										"label": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
									},
									Description: `Details regarding ECP for the workflow step`,
								},
								"id": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"installer": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"description": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"enabled": schema.BoolAttribute{
											Computed: true,
											Optional: true,
										},
										"journey": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"id": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
												"journey_id": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
											},
										},
										"label": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
									},
									Description: `Details regarding ECP for the workflow step`,
								},
								"journey": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"journey_id": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
									},
								},
								"name": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"phase_id": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"requirements": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"phase_id": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"task_id": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"when": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Not Null; must be one of ["TASK_FINISHED", "PHASE_FINISHED"]`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.OneOf(
														"TASK_FINISHED",
														"PHASE_FINISHED",
													),
												},
											},
										},
									},
									Description: `requirements that need to be fulfilled in order to enable the task while flow instances are running`,
								},
								"schedule": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"delayed_schedule": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"duration": schema.NumberAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Not Null`,
													Validators: []validator.Number{
														speakeasy_numbervalidators.NotNull(),
													},
												},
												"mode": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Not Null; must be "delayed"`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
														stringvalidator.OneOf("delayed"),
													},
												},
												"unit": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Not Null; must be one of ["minutes", "hours", "days", "weeks", "months"]`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
														stringvalidator.OneOf(
															"minutes",
															"hours",
															"days",
															"weeks",
															"months",
														),
													},
												},
											},
											Validators: []validator.Object{
												objectvalidator.ConflictsWith(path.Expressions{
													path.MatchRelative().AtParent().AtName("relative_schedule"),
												}...),
											},
										},
										"relative_schedule": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"direction": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Not Null; must be one of ["before", "after"]`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
														stringvalidator.OneOf(
															"before",
															"after",
														),
													},
												},
												"duration": schema.NumberAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Not Null`,
													Validators: []validator.Number{
														speakeasy_numbervalidators.NotNull(),
													},
												},
												"mode": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Not Null; must be "relative"`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
														stringvalidator.OneOf("relative"),
													},
												},
												"reference": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"attribute": schema.StringAttribute{
															Computed:    true,
															Optional:    true,
															Description: `An entity attribute that identifies a date / datetime`,
														},
														"id": schema.StringAttribute{
															Computed:    true,
															Optional:    true,
															Description: `The id of the entity / workflow / task, based on the origin of the schedule. Not Null`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
															},
														},
														"origin": schema.StringAttribute{
															Computed:    true,
															Optional:    true,
															Description: `Not Null; must be one of ["flow_started", "task_completed", "trigger_entity_attribute"]`,
															Validators: []validator.String{
																speakeasy_stringvalidators.NotNull(),
																stringvalidator.OneOf(
																	"flow_started",
																	"task_completed",
																	"trigger_entity_attribute",
																),
															},
														},
														"schema": schema.StringAttribute{
															Computed:    true,
															Optional:    true,
															Description: `The schema of the entity`,
														},
													},
													Description: `Not Null`,
													Validators: []validator.Object{
														speakeasy_objectvalidators.NotNull(),
													},
												},
												"unit": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `Not Null; must be one of ["minutes", "hours", "days", "weeks", "months"]`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
														stringvalidator.OneOf(
															"minutes",
															"hours",
															"days",
															"weeks",
															"months",
														),
													},
												},
											},
											Validators: []validator.Object{
												objectvalidator.ConflictsWith(path.Expressions{
													path.MatchRelative().AtParent().AtName("delayed_schedule"),
												}...),
											},
										},
									},
								},
								"task_type": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null; must be one of ["MANUAL", "AUTOMATION", "DECISION"]`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.OneOf(
											"MANUAL",
											"AUTOMATION",
											"DECISION",
										),
									},
								},
								"taxonomies": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Description: `Taxonomy ids that are associated with this workflow and used for filtering`,
								},
							},
							Validators: []validator.Object{
								objectvalidator.ConflictsWith(path.Expressions{
									path.MatchRelative().AtParent().AtName("automation_task"),
									path.MatchRelative().AtParent().AtName("task_base"),
								}...),
							},
						},
						"task_base": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"assigned_to": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"description": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"enabled": schema.BoolAttribute{
											Computed: true,
											Optional: true,
										},
										"value": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
									},
									Description: `Longer information regarding Task`,
								},
								"due_date": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"due_date_config": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"duration": schema.NumberAttribute{
											Computed:    true,
											Optional:    true,
											Description: `Not Null`,
											Validators: []validator.Number{
												speakeasy_numbervalidators.NotNull(),
											},
										},
										"phase_id": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"task_id": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"type": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `Not Null; must be one of ["WORKFLOW_STARTED", "TASK_FINISHED", "PHASE_FINISHED"]`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
												stringvalidator.OneOf(
													"WORKFLOW_STARTED",
													"TASK_FINISHED",
													"PHASE_FINISHED",
												),
											},
										},
										"unit": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `Not Null; must be one of ["minutes", "hours", "days", "weeks", "months"]`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
												stringvalidator.OneOf(
													"minutes",
													"hours",
													"days",
													"weeks",
													"months",
												),
											},
										},
									},
									Description: `Set due date for the task based on a dynamic condition`,
								},
								"ecp": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"description": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"enabled": schema.BoolAttribute{
											Computed: true,
											Optional: true,
										},
										"journey": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"id": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
												"journey_id": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
											},
										},
										"label": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
									},
									Description: `Details regarding ECP for the workflow step`,
								},
								"id": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"installer": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"description": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"enabled": schema.BoolAttribute{
											Computed: true,
											Optional: true,
										},
										"journey": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"id": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
												"journey_id": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
											},
										},
										"label": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
									},
									Description: `Details regarding ECP for the workflow step`,
								},
								"journey": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"journey_id": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
									},
								},
								"name": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"phase_id": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"requirements": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"phase_id": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"task_id": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"when": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Not Null; must be one of ["TASK_FINISHED", "PHASE_FINISHED"]`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.OneOf(
														"TASK_FINISHED",
														"PHASE_FINISHED",
													),
												},
											},
										},
									},
									Description: `requirements that need to be fulfilled in order to enable the task while flow instances are running`,
								},
								"task_type": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null; must be one of ["MANUAL", "AUTOMATION", "DECISION"]`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.OneOf(
											"MANUAL",
											"AUTOMATION",
											"DECISION",
										),
									},
								},
								"taxonomies": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Description: `Taxonomy ids that are associated with this workflow and used for filtering`,
								},
							},
							Validators: []validator.Object{
								objectvalidator.ConflictsWith(path.Expressions{
									path.MatchRelative().AtParent().AtName("automation_task"),
									path.MatchRelative().AtParent().AtName("decision_task"),
								}...),
							},
						},
					},
				},
			},
			"taxonomies": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Description: `Taxonomy ids that are associated with this workflow and used for filtering`,
			},
			"trigger": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"automation_trigger": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"automation_id": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Id of the automation config that triggers this workflow. Not Null`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
								},
							},
							"id": schema.StringAttribute{
								Computed: true,
								Optional: true,
							},
							"type": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Not Null; must be "automation"`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
									stringvalidator.OneOf(
										"automation",
									),
								},
							},
						},
						Validators: []validator.Object{
							objectvalidator.ConflictsWith(path.Expressions{
								path.MatchRelative().AtParent().AtName("journey_submission_trigger"),
								path.MatchRelative().AtParent().AtName("manual_trigger"),
							}...),
						},
					},
					"journey_submission_trigger": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"automation_id": schema.StringAttribute{
								Computed: true,
								Optional: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
								Optional: true,
							},
							"journey_id": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `ID of the journey that will trigger this flow. Not Null`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
								},
							},
							"type": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Not Null; must be "journey_submission"`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
									stringvalidator.OneOf(
										"journey_submission",
									),
								},
							},
						},
						Validators: []validator.Object{
							objectvalidator.ConflictsWith(path.Expressions{
								path.MatchRelative().AtParent().AtName("automation_trigger"),
								path.MatchRelative().AtParent().AtName("manual_trigger"),
							}...),
						},
					},
					"manual_trigger": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"entity_schema": schema.StringAttribute{
								Computed: true,
								Optional: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
								Optional: true,
							},
							"type": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Not Null; must be "manual"`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
									stringvalidator.OneOf("manual"),
								},
							},
						},
						Validators: []validator.Object{
							objectvalidator.ConflictsWith(path.Expressions{
								path.MatchRelative().AtParent().AtName("automation_trigger"),
								path.MatchRelative().AtParent().AtName("journey_submission_trigger"),
							}...),
						},
					},
				},
			},
			"update_entity_attributes": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"source": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Not Null; must be one of ["workflow_status", "current_section", "current_step"]`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
								stringvalidator.OneOf(
									"workflow_status",
									"current_section",
									"current_step",
								),
							},
						},
						"target": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"entity_attribute": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"entity_schema": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
							},
							Description: `Not Null`,
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
						},
					},
				},
			},
			"updated_at": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `ISO String Date & Time`,
			},
		},
	}
}

func (r *FlowTemplateResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *FlowTemplateResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *FlowTemplateResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := *data.ToSharedCreateFlowTemplate()
	res, err := r.client.FlowsV2.CreateFlowTemplate(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.FlowTemplate != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedFlowTemplate(res.FlowTemplate)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *FlowTemplateResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *FlowTemplateResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var flowID string
	flowID = data.ID.ValueString()

	request := operations.GetFlowTemplateRequest{
		FlowID: flowID,
	}
	res, err := r.client.FlowsV2.GetFlowTemplate(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.FlowTemplate != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedFlowTemplate(res.FlowTemplate)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *FlowTemplateResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *FlowTemplateResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	flowTemplate := *data.ToSharedFlowTemplateInput()
	var flowID string
	flowID = data.ID.ValueString()

	request := operations.UpdateFlowTemplateRequest{
		FlowTemplate: flowTemplate,
		FlowID:       flowID,
	}
	res, err := r.client.FlowsV2.UpdateFlowTemplate(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.FlowTemplate != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedFlowTemplate(res.FlowTemplate)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *FlowTemplateResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *FlowTemplateResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var flowID string
	flowID = data.ID.ValueString()

	request := operations.DeleteFlowTemplateRequest{
		FlowID: flowID,
	}
	res, err := r.client.FlowsV2.DeleteFlowTemplate(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *FlowTemplateResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), req.ID)...)
}
