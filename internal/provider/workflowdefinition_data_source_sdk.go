// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-workflow/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-workflow/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
)

func (r *WorkflowDefinitionDataSourceModel) RefreshFromSharedWorkflowDefinition(resp *shared.WorkflowDefinition) {
	if resp != nil {
		r.AssignedTo = []types.String{}
		for _, v := range resp.AssignedTo {
			r.AssignedTo = append(r.AssignedTo, types.StringValue(v))
		}
		r.ClosingReasons = []tfTypes.ClosingReasonID{}
		if len(r.ClosingReasons) > len(resp.ClosingReasons) {
			r.ClosingReasons = r.ClosingReasons[:len(resp.ClosingReasons)]
		}
		for closingReasonsCount, closingReasonsItem := range resp.ClosingReasons {
			var closingReasons1 tfTypes.ClosingReasonID
			closingReasons1.ID = types.StringValue(closingReasonsItem.ID)
			if closingReasonsCount+1 > len(r.ClosingReasons) {
				r.ClosingReasons = append(r.ClosingReasons, closingReasons1)
			} else {
				r.ClosingReasons[closingReasonsCount].ID = closingReasons1.ID
			}
		}
		r.CreationTime = types.StringPointerValue(resp.CreationTime)
		r.Description = types.StringPointerValue(resp.Description)
		r.DueDate = types.StringPointerValue(resp.DueDate)
		if resp.DynamicDueDate == nil {
			r.DynamicDueDate = nil
		} else {
			r.DynamicDueDate = &tfTypes.DynamicDueDate{}
			if resp.DynamicDueDate.ActionTypeCondition != nil {
				r.DynamicDueDate.ActionTypeCondition = types.StringValue(string(*resp.DynamicDueDate.ActionTypeCondition))
			} else {
				r.DynamicDueDate.ActionTypeCondition = types.StringNull()
			}
			if resp.DynamicDueDate.NumberOfUnits != nil {
				r.DynamicDueDate.NumberOfUnits = types.NumberValue(big.NewFloat(float64(*resp.DynamicDueDate.NumberOfUnits)))
			} else {
				r.DynamicDueDate.NumberOfUnits = types.NumberNull()
			}
			r.DynamicDueDate.StepID = types.StringPointerValue(resp.DynamicDueDate.StepID)
			if resp.DynamicDueDate.TimePeriod != nil {
				r.DynamicDueDate.TimePeriod = types.StringValue(string(*resp.DynamicDueDate.TimePeriod))
			} else {
				r.DynamicDueDate.TimePeriod = types.StringNull()
			}
		}
		r.EnableECPWorkflow = types.BoolPointerValue(resp.EnableECPWorkflow)
		r.Flow = []tfTypes.Flow{}
		if len(r.Flow) > len(resp.Flow) {
			r.Flow = r.Flow[:len(resp.Flow)]
		}
		for flowCount, flowItem := range resp.Flow {
			var flow1 tfTypes.Flow
			if flowItem.Section != nil {
				flow1.Section = &tfTypes.Section{}
				flow1.Section.ID = types.StringPointerValue(flowItem.Section.ID)
				flow1.Section.Name = types.StringValue(flowItem.Section.Name)
				flow1.Section.Order = types.NumberValue(big.NewFloat(float64(flowItem.Section.Order)))
				flow1.Section.Steps = []tfTypes.Step{}
				for stepsCount, stepsItem := range flowItem.Section.Steps {
					var steps1 tfTypes.Step
					steps1.AssignedTo = []types.String{}
					for _, v := range stepsItem.AssignedTo {
						steps1.AssignedTo = append(steps1.AssignedTo, types.StringValue(v))
					}
					if stepsItem.AutomationConfig == nil {
						steps1.AutomationConfig = nil
					} else {
						steps1.AutomationConfig = &tfTypes.AutomationConfig{}
						steps1.AutomationConfig.FlowID = types.StringValue(stepsItem.AutomationConfig.FlowID)
					}
					if stepsItem.Description == nil {
						steps1.Description = nil
					} else {
						steps1.Description = &tfTypes.StepDescription{}
						steps1.Description.Enabled = types.BoolPointerValue(stepsItem.Description.Enabled)
						steps1.Description.Value = types.StringPointerValue(stepsItem.Description.Value)
					}
					steps1.DueDate = types.StringPointerValue(stepsItem.DueDate)
					if stepsItem.DynamicDueDate == nil {
						steps1.DynamicDueDate = nil
					} else {
						steps1.DynamicDueDate = &tfTypes.DynamicDueDate{}
						if stepsItem.DynamicDueDate.ActionTypeCondition != nil {
							steps1.DynamicDueDate.ActionTypeCondition = types.StringValue(string(*stepsItem.DynamicDueDate.ActionTypeCondition))
						} else {
							steps1.DynamicDueDate.ActionTypeCondition = types.StringNull()
						}
						if stepsItem.DynamicDueDate.NumberOfUnits != nil {
							steps1.DynamicDueDate.NumberOfUnits = types.NumberValue(big.NewFloat(float64(*stepsItem.DynamicDueDate.NumberOfUnits)))
						} else {
							steps1.DynamicDueDate.NumberOfUnits = types.NumberNull()
						}
						steps1.DynamicDueDate.StepID = types.StringPointerValue(stepsItem.DynamicDueDate.StepID)
						if stepsItem.DynamicDueDate.TimePeriod != nil {
							steps1.DynamicDueDate.TimePeriod = types.StringValue(string(*stepsItem.DynamicDueDate.TimePeriod))
						} else {
							steps1.DynamicDueDate.TimePeriod = types.StringNull()
						}
					}
					if stepsItem.Ecp == nil {
						steps1.Ecp = nil
					} else {
						steps1.Ecp = &tfTypes.ECPDetails{}
						steps1.Ecp.Description = types.StringPointerValue(stepsItem.Ecp.Description)
						steps1.Ecp.Enabled = types.BoolPointerValue(stepsItem.Ecp.Enabled)
						if stepsItem.Ecp.Journey == nil {
							steps1.Ecp.Journey = nil
						} else {
							steps1.Ecp.Journey = &tfTypes.StepJourney{}
							steps1.Ecp.Journey.ID = types.StringPointerValue(stepsItem.Ecp.Journey.ID)
							steps1.Ecp.Journey.JourneyID = types.StringPointerValue(stepsItem.Ecp.Journey.JourneyID)
							steps1.Ecp.Journey.Name = types.StringPointerValue(stepsItem.Ecp.Journey.Name)
						}
						steps1.Ecp.Label = types.StringPointerValue(stepsItem.Ecp.Label)
					}
					if stepsItem.ExecutionType != nil {
						steps1.ExecutionType = types.StringValue(string(*stepsItem.ExecutionType))
					} else {
						steps1.ExecutionType = types.StringNull()
					}
					steps1.ID = types.StringPointerValue(stepsItem.ID)
					if stepsItem.Installer == nil {
						steps1.Installer = nil
					} else {
						steps1.Installer = &tfTypes.ECPDetails{}
						steps1.Installer.Description = types.StringPointerValue(stepsItem.Installer.Description)
						steps1.Installer.Enabled = types.BoolPointerValue(stepsItem.Installer.Enabled)
						if stepsItem.Installer.Journey == nil {
							steps1.Installer.Journey = nil
						} else {
							steps1.Installer.Journey = &tfTypes.StepJourney{}
							steps1.Installer.Journey.ID = types.StringPointerValue(stepsItem.Installer.Journey.ID)
							steps1.Installer.Journey.JourneyID = types.StringPointerValue(stepsItem.Installer.Journey.JourneyID)
							steps1.Installer.Journey.Name = types.StringPointerValue(stepsItem.Installer.Journey.Name)
						}
						steps1.Installer.Label = types.StringPointerValue(stepsItem.Installer.Label)
					}
					if stepsItem.Journey == nil {
						steps1.Journey = nil
					} else {
						steps1.Journey = &tfTypes.StepJourney{}
						steps1.Journey.ID = types.StringPointerValue(stepsItem.Journey.ID)
						steps1.Journey.JourneyID = types.StringPointerValue(stepsItem.Journey.JourneyID)
						steps1.Journey.Name = types.StringPointerValue(stepsItem.Journey.Name)
					}
					steps1.Name = types.StringValue(stepsItem.Name)
					steps1.Order = types.NumberValue(big.NewFloat(float64(stepsItem.Order)))
					steps1.Requirements = []tfTypes.StepRequirement{}
					for requirementsCount, requirementsItem := range stepsItem.Requirements {
						var requirements1 tfTypes.StepRequirement
						requirements1.Condition = types.StringValue(string(requirementsItem.Condition))
						requirements1.DefinitionID = types.StringValue(requirementsItem.DefinitionID)
						requirements1.Type = types.StringValue(string(requirementsItem.Type))
						if requirementsCount+1 > len(steps1.Requirements) {
							steps1.Requirements = append(steps1.Requirements, requirements1)
						} else {
							steps1.Requirements[requirementsCount].Condition = requirements1.Condition
							steps1.Requirements[requirementsCount].DefinitionID = requirements1.DefinitionID
							steps1.Requirements[requirementsCount].Type = requirements1.Type
						}
					}
					steps1.Type = types.StringValue(string(stepsItem.Type))
					steps1.UserIds = []types.Number{}
					for _, v := range stepsItem.UserIds {
						steps1.UserIds = append(steps1.UserIds, types.NumberValue(big.NewFloat(float64(v))))
					}
					if stepsCount+1 > len(flow1.Section.Steps) {
						flow1.Section.Steps = append(flow1.Section.Steps, steps1)
					} else {
						flow1.Section.Steps[stepsCount].AssignedTo = steps1.AssignedTo
						flow1.Section.Steps[stepsCount].AutomationConfig = steps1.AutomationConfig
						flow1.Section.Steps[stepsCount].Description = steps1.Description
						flow1.Section.Steps[stepsCount].DueDate = steps1.DueDate
						flow1.Section.Steps[stepsCount].DynamicDueDate = steps1.DynamicDueDate
						flow1.Section.Steps[stepsCount].Ecp = steps1.Ecp
						flow1.Section.Steps[stepsCount].ExecutionType = steps1.ExecutionType
						flow1.Section.Steps[stepsCount].ID = steps1.ID
						flow1.Section.Steps[stepsCount].Installer = steps1.Installer
						flow1.Section.Steps[stepsCount].Journey = steps1.Journey
						flow1.Section.Steps[stepsCount].Name = steps1.Name
						flow1.Section.Steps[stepsCount].Order = steps1.Order
						flow1.Section.Steps[stepsCount].Requirements = steps1.Requirements
						flow1.Section.Steps[stepsCount].Type = steps1.Type
						flow1.Section.Steps[stepsCount].UserIds = steps1.UserIds
					}
				}
				flow1.Section.Type = types.StringValue(string(flowItem.Section.Type))
			}
			if flowItem.Step != nil {
				flow1.Step = &tfTypes.Step{}
				flow1.Step.AssignedTo = []types.String{}
				for _, v := range flowItem.Step.AssignedTo {
					flow1.Step.AssignedTo = append(flow1.Step.AssignedTo, types.StringValue(v))
				}
				if flowItem.Step.AutomationConfig == nil {
					flow1.Step.AutomationConfig = nil
				} else {
					flow1.Step.AutomationConfig = &tfTypes.AutomationConfig{}
					flow1.Step.AutomationConfig.FlowID = types.StringValue(flowItem.Step.AutomationConfig.FlowID)
				}
				if flowItem.Step.Description == nil {
					flow1.Step.Description = nil
				} else {
					flow1.Step.Description = &tfTypes.StepDescription{}
					flow1.Step.Description.Enabled = types.BoolPointerValue(flowItem.Step.Description.Enabled)
					flow1.Step.Description.Value = types.StringPointerValue(flowItem.Step.Description.Value)
				}
				flow1.Step.DueDate = types.StringPointerValue(flowItem.Step.DueDate)
				if flowItem.Step.DynamicDueDate == nil {
					flow1.Step.DynamicDueDate = nil
				} else {
					flow1.Step.DynamicDueDate = &tfTypes.DynamicDueDate{}
					if flowItem.Step.DynamicDueDate.ActionTypeCondition != nil {
						flow1.Step.DynamicDueDate.ActionTypeCondition = types.StringValue(string(*flowItem.Step.DynamicDueDate.ActionTypeCondition))
					} else {
						flow1.Step.DynamicDueDate.ActionTypeCondition = types.StringNull()
					}
					if flowItem.Step.DynamicDueDate.NumberOfUnits != nil {
						flow1.Step.DynamicDueDate.NumberOfUnits = types.NumberValue(big.NewFloat(float64(*flowItem.Step.DynamicDueDate.NumberOfUnits)))
					} else {
						flow1.Step.DynamicDueDate.NumberOfUnits = types.NumberNull()
					}
					flow1.Step.DynamicDueDate.StepID = types.StringPointerValue(flowItem.Step.DynamicDueDate.StepID)
					if flowItem.Step.DynamicDueDate.TimePeriod != nil {
						flow1.Step.DynamicDueDate.TimePeriod = types.StringValue(string(*flowItem.Step.DynamicDueDate.TimePeriod))
					} else {
						flow1.Step.DynamicDueDate.TimePeriod = types.StringNull()
					}
				}
				if flowItem.Step.Ecp == nil {
					flow1.Step.Ecp = nil
				} else {
					flow1.Step.Ecp = &tfTypes.ECPDetails{}
					flow1.Step.Ecp.Description = types.StringPointerValue(flowItem.Step.Ecp.Description)
					flow1.Step.Ecp.Enabled = types.BoolPointerValue(flowItem.Step.Ecp.Enabled)
					if flowItem.Step.Ecp.Journey == nil {
						flow1.Step.Ecp.Journey = nil
					} else {
						flow1.Step.Ecp.Journey = &tfTypes.StepJourney{}
						flow1.Step.Ecp.Journey.ID = types.StringPointerValue(flowItem.Step.Ecp.Journey.ID)
						flow1.Step.Ecp.Journey.JourneyID = types.StringPointerValue(flowItem.Step.Ecp.Journey.JourneyID)
						flow1.Step.Ecp.Journey.Name = types.StringPointerValue(flowItem.Step.Ecp.Journey.Name)
					}
					flow1.Step.Ecp.Label = types.StringPointerValue(flowItem.Step.Ecp.Label)
				}
				if flowItem.Step.ExecutionType != nil {
					flow1.Step.ExecutionType = types.StringValue(string(*flowItem.Step.ExecutionType))
				} else {
					flow1.Step.ExecutionType = types.StringNull()
				}
				flow1.Step.ID = types.StringPointerValue(flowItem.Step.ID)
				if flowItem.Step.Installer == nil {
					flow1.Step.Installer = nil
				} else {
					flow1.Step.Installer = &tfTypes.ECPDetails{}
					flow1.Step.Installer.Description = types.StringPointerValue(flowItem.Step.Installer.Description)
					flow1.Step.Installer.Enabled = types.BoolPointerValue(flowItem.Step.Installer.Enabled)
					if flowItem.Step.Installer.Journey == nil {
						flow1.Step.Installer.Journey = nil
					} else {
						flow1.Step.Installer.Journey = &tfTypes.StepJourney{}
						flow1.Step.Installer.Journey.ID = types.StringPointerValue(flowItem.Step.Installer.Journey.ID)
						flow1.Step.Installer.Journey.JourneyID = types.StringPointerValue(flowItem.Step.Installer.Journey.JourneyID)
						flow1.Step.Installer.Journey.Name = types.StringPointerValue(flowItem.Step.Installer.Journey.Name)
					}
					flow1.Step.Installer.Label = types.StringPointerValue(flowItem.Step.Installer.Label)
				}
				if flowItem.Step.Journey == nil {
					flow1.Step.Journey = nil
				} else {
					flow1.Step.Journey = &tfTypes.StepJourney{}
					flow1.Step.Journey.ID = types.StringPointerValue(flowItem.Step.Journey.ID)
					flow1.Step.Journey.JourneyID = types.StringPointerValue(flowItem.Step.Journey.JourneyID)
					flow1.Step.Journey.Name = types.StringPointerValue(flowItem.Step.Journey.Name)
				}
				flow1.Step.Name = types.StringValue(flowItem.Step.Name)
				flow1.Step.Order = types.NumberValue(big.NewFloat(float64(flowItem.Step.Order)))
				flow1.Step.Requirements = []tfTypes.StepRequirement{}
				for requirementsCount1, requirementsItem1 := range flowItem.Step.Requirements {
					var requirements3 tfTypes.StepRequirement
					requirements3.Condition = types.StringValue(string(requirementsItem1.Condition))
					requirements3.DefinitionID = types.StringValue(requirementsItem1.DefinitionID)
					requirements3.Type = types.StringValue(string(requirementsItem1.Type))
					if requirementsCount1+1 > len(flow1.Step.Requirements) {
						flow1.Step.Requirements = append(flow1.Step.Requirements, requirements3)
					} else {
						flow1.Step.Requirements[requirementsCount1].Condition = requirements3.Condition
						flow1.Step.Requirements[requirementsCount1].DefinitionID = requirements3.DefinitionID
						flow1.Step.Requirements[requirementsCount1].Type = requirements3.Type
					}
				}
				flow1.Step.Type = types.StringValue(string(flowItem.Step.Type))
				flow1.Step.UserIds = []types.Number{}
				for _, v := range flowItem.Step.UserIds {
					flow1.Step.UserIds = append(flow1.Step.UserIds, types.NumberValue(big.NewFloat(float64(v))))
				}
			}
			if flowCount+1 > len(r.Flow) {
				r.Flow = append(r.Flow, flow1)
			} else {
				r.Flow[flowCount].Section = flow1.Section
				r.Flow[flowCount].Step = flow1.Step
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.LastUpdateTime = types.StringPointerValue(resp.LastUpdateTime)
		r.Name = types.StringValue(resp.Name)
		r.UpdateEntityAttributes = []tfTypes.UpdateEntityAttributes{}
		if len(r.UpdateEntityAttributes) > len(resp.UpdateEntityAttributes) {
			r.UpdateEntityAttributes = r.UpdateEntityAttributes[:len(resp.UpdateEntityAttributes)]
		}
		for updateEntityAttributesCount, updateEntityAttributesItem := range resp.UpdateEntityAttributes {
			var updateEntityAttributes1 tfTypes.UpdateEntityAttributes
			updateEntityAttributes1.Source = types.StringValue(string(updateEntityAttributesItem.Source))
			updateEntityAttributes1.Target.EntityAttribute = types.StringValue(updateEntityAttributesItem.Target.EntityAttribute)
			updateEntityAttributes1.Target.EntitySchema = types.StringValue(updateEntityAttributesItem.Target.EntitySchema)
			if updateEntityAttributesCount+1 > len(r.UpdateEntityAttributes) {
				r.UpdateEntityAttributes = append(r.UpdateEntityAttributes, updateEntityAttributes1)
			} else {
				r.UpdateEntityAttributes[updateEntityAttributesCount].Source = updateEntityAttributes1.Source
				r.UpdateEntityAttributes[updateEntityAttributesCount].Target = updateEntityAttributes1.Target
			}
		}
		r.UserIds = []types.Number{}
		for _, v := range resp.UserIds {
			r.UserIds = append(r.UserIds, types.NumberValue(big.NewFloat(float64(v))))
		}
	}
}
