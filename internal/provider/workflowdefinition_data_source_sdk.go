// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-workflow/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-workflow/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
)

func (r *WorkflowDefinitionDataSourceModel) RefreshFromSharedWorkflowDefinition(resp *shared.WorkflowDefinition) {
	if resp != nil {
		r.AssignedTo = []types.String{}
		for _, v := range resp.AssignedTo {
			r.AssignedTo = append(r.AssignedTo, types.StringValue(v))
		}
		r.ClosingReasons = []tfTypes.ClosingReasonID{}
		if len(r.ClosingReasons) > len(resp.ClosingReasons) {
			r.ClosingReasons = r.ClosingReasons[:len(resp.ClosingReasons)]
		}
		for closingReasonsCount, closingReasonsItem := range resp.ClosingReasons {
			var closingReasons1 tfTypes.ClosingReasonID
			closingReasons1.ID = types.StringValue(closingReasonsItem.ID)
			if closingReasonsCount+1 > len(r.ClosingReasons) {
				r.ClosingReasons = append(r.ClosingReasons, closingReasons1)
			} else {
				r.ClosingReasons[closingReasonsCount].ID = closingReasons1.ID
			}
		}
		r.CreationTime = types.StringPointerValue(resp.CreationTime)
		r.Description = types.StringPointerValue(resp.Description)
		r.DueDate = types.StringPointerValue(resp.DueDate)
		if resp.DynamicDueDate == nil {
			r.DynamicDueDate = nil
		} else {
			r.DynamicDueDate = &tfTypes.DynamicDueDate{}
			r.DynamicDueDate.ActionTypeCondition = types.StringValue(string(resp.DynamicDueDate.ActionTypeCondition))
			r.DynamicDueDate.NumberOfUnits = types.NumberValue(big.NewFloat(float64(resp.DynamicDueDate.NumberOfUnits)))
			r.DynamicDueDate.PhaseID = types.StringPointerValue(resp.DynamicDueDate.PhaseID)
			r.DynamicDueDate.StepID = types.StringPointerValue(resp.DynamicDueDate.StepID)
			r.DynamicDueDate.TimePeriod = types.StringValue(string(resp.DynamicDueDate.TimePeriod))
		}
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.EnableECPWorkflow = types.BoolPointerValue(resp.EnableECPWorkflow)
		flowResult, _ := json.Marshal(resp.Flow)
		r.Flow = types.StringValue(string(flowResult))
		r.ID = types.StringPointerValue(resp.ID)
		r.LastUpdateTime = types.StringPointerValue(resp.LastUpdateTime)
		r.Name = types.StringValue(resp.Name)
		r.Taxonomies = []types.String{}
		for _, v := range resp.Taxonomies {
			r.Taxonomies = append(r.Taxonomies, types.StringValue(v))
		}
		r.UpdateEntityAttributes = []tfTypes.UpdateEntityAttributes{}
		if len(r.UpdateEntityAttributes) > len(resp.UpdateEntityAttributes) {
			r.UpdateEntityAttributes = r.UpdateEntityAttributes[:len(resp.UpdateEntityAttributes)]
		}
		for updateEntityAttributesCount, updateEntityAttributesItem := range resp.UpdateEntityAttributes {
			var updateEntityAttributes1 tfTypes.UpdateEntityAttributes
			updateEntityAttributes1.Source = types.StringValue(string(updateEntityAttributesItem.Source))
			updateEntityAttributes1.Target.EntityAttribute = types.StringValue(updateEntityAttributesItem.Target.EntityAttribute)
			updateEntityAttributes1.Target.EntitySchema = types.StringValue(updateEntityAttributesItem.Target.EntitySchema)
			if updateEntityAttributesCount+1 > len(r.UpdateEntityAttributes) {
				r.UpdateEntityAttributes = append(r.UpdateEntityAttributes, updateEntityAttributes1)
			} else {
				r.UpdateEntityAttributes[updateEntityAttributesCount].Source = updateEntityAttributes1.Source
				r.UpdateEntityAttributes[updateEntityAttributesCount].Target = updateEntityAttributes1.Target
			}
		}
		r.UserIds = []types.Number{}
		for _, v := range resp.UserIds {
			r.UserIds = append(r.UserIds, types.NumberValue(big.NewFloat(float64(v))))
		}
	}
}
