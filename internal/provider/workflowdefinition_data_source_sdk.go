// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-workflow/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-workflow/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-workflow/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *WorkflowDefinitionDataSourceModel) RefreshFromSharedWorkflowDefinition(ctx context.Context, resp *shared.WorkflowDefinition) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AssignedTo = make([]types.String, 0, len(resp.AssignedTo))
		for _, v := range resp.AssignedTo {
			r.AssignedTo = append(r.AssignedTo, types.StringValue(v))
		}
		r.ClosingReasons = []tfTypes.ClosingReasonID{}

		for _, closingReasonsItem := range resp.ClosingReasons {
			var closingReasons tfTypes.ClosingReasonID

			closingReasons.ID = types.StringValue(closingReasonsItem.ID)

			r.ClosingReasons = append(r.ClosingReasons, closingReasons)
		}
		r.CreationTime = types.StringPointerValue(resp.CreationTime)
		r.Description = types.StringPointerValue(resp.Description)
		r.DueDate = types.StringPointerValue(resp.DueDate)
		if resp.DynamicDueDate == nil {
			r.DynamicDueDate = nil
		} else {
			r.DynamicDueDate = &tfTypes.DynamicDueDate{}
			r.DynamicDueDate.ActionTypeCondition = types.StringValue(string(resp.DynamicDueDate.ActionTypeCondition))
			r.DynamicDueDate.NumberOfUnits = types.Float64Value(resp.DynamicDueDate.NumberOfUnits)
			r.DynamicDueDate.PhaseID = types.StringPointerValue(resp.DynamicDueDate.PhaseID)
			r.DynamicDueDate.StepID = types.StringPointerValue(resp.DynamicDueDate.StepID)
			r.DynamicDueDate.TimePeriod = types.StringValue(string(resp.DynamicDueDate.TimePeriod))
		}
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.EnableECPWorkflow = types.BoolPointerValue(resp.EnableECPWorkflow)
		flowResult, _ := json.Marshal(resp.Flow)
		r.Flow = jsontypes.NewNormalizedValue(string(flowResult))
		r.ID = types.StringPointerValue(resp.ID)
		r.LastUpdateTime = types.StringPointerValue(resp.LastUpdateTime)
		r.Name = types.StringValue(resp.Name)
		r.Taxonomies = make([]types.String, 0, len(resp.Taxonomies))
		for _, v := range resp.Taxonomies {
			r.Taxonomies = append(r.Taxonomies, types.StringValue(v))
		}
		r.UpdateEntityAttributes = []tfTypes.UpdateEntityAttributes{}

		for _, updateEntityAttributesItem := range resp.UpdateEntityAttributes {
			var updateEntityAttributes tfTypes.UpdateEntityAttributes

			updateEntityAttributes.Source = types.StringValue(string(updateEntityAttributesItem.Source))
			updateEntityAttributes.Target.EntityAttribute = types.StringValue(updateEntityAttributesItem.Target.EntityAttribute)
			updateEntityAttributes.Target.EntitySchema = types.StringValue(updateEntityAttributesItem.Target.EntitySchema)

			r.UpdateEntityAttributes = append(r.UpdateEntityAttributes, updateEntityAttributes)
		}
		r.UserIds = make([]types.Float64, 0, len(resp.UserIds))
		for _, v := range resp.UserIds {
			r.UserIds = append(r.UserIds, types.Float64Value(v))
		}
	}

	return diags
}

func (r *WorkflowDefinitionDataSourceModel) ToOperationsGetDefinitionRequest(ctx context.Context) (*operations.GetDefinitionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var definitionID string
	definitionID = r.ID.ValueString()

	out := operations.GetDefinitionRequest{
		DefinitionID: definitionID,
	}

	return &out, diags
}
