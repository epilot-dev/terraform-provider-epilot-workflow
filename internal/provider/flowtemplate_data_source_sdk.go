// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-workflow/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-workflow/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-workflow/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *FlowTemplateDataSourceModel) RefreshFromSharedFlowTemplate(ctx context.Context, resp *shared.FlowTemplate) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AssignedTo = make([]types.String, 0, len(resp.AssignedTo))
		for _, v := range resp.AssignedTo {
			r.AssignedTo = append(r.AssignedTo, types.StringValue(v))
		}
		r.AvailableInEcp = types.BoolPointerValue(resp.AvailableInEcp)
		r.ClosingReasons = []tfTypes.ClosingReason1{}

		for _, closingReasonsItem := range resp.ClosingReasons {
			var closingReasons tfTypes.ClosingReason1

			closingReasons.CreationTime = types.StringPointerValue(closingReasonsItem.CreationTime)
			closingReasons.ID = types.StringPointerValue(closingReasonsItem.ID)
			closingReasons.LastUpdateTime = types.StringPointerValue(closingReasonsItem.LastUpdateTime)
			closingReasons.Status = types.StringValue(string(closingReasonsItem.Status))
			closingReasons.Title = types.StringValue(closingReasonsItem.Title)

			r.ClosingReasons = append(r.ClosingReasons, closingReasons)
		}
		r.CreatedAt = types.StringPointerValue(resp.CreatedAt)
		r.Description = types.StringPointerValue(resp.Description)
		r.DueDate = types.StringPointerValue(resp.DueDate)
		if resp.DueDateConfig == nil {
			r.DueDateConfig = nil
		} else {
			r.DueDateConfig = &tfTypes.DueDateConfig{}
			r.DueDateConfig.Duration = types.Float64Value(resp.DueDateConfig.Duration)
			r.DueDateConfig.PhaseID = types.StringPointerValue(resp.DueDateConfig.PhaseID)
			r.DueDateConfig.TaskID = types.StringPointerValue(resp.DueDateConfig.TaskID)
			r.DueDateConfig.Type = types.StringValue(string(resp.DueDateConfig.Type))
			r.DueDateConfig.Unit = types.StringValue(string(resp.DueDateConfig.Unit))
		}
		r.Edges = []tfTypes.Edge{}

		for _, edgesItem := range resp.Edges {
			var edges tfTypes.Edge

			edges.ConditionID = types.StringPointerValue(edgesItem.ConditionID)
			edges.FromID = types.StringValue(edgesItem.FromID)
			edges.ID = types.StringValue(edgesItem.ID)
			edges.NoneMet = types.BoolPointerValue(edgesItem.NoneMet)
			edges.ToID = types.StringValue(edgesItem.ToID)

			r.Edges = append(r.Edges, edges)
		}
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.IsFlowMigrated = types.BoolPointerValue(resp.IsFlowMigrated)
		r.Name = types.StringValue(resp.Name)
		r.OrgID = types.StringPointerValue(resp.OrgID)
		r.Phases = []tfTypes.Phase{}

		for _, phasesItem := range resp.Phases {
			var phases tfTypes.Phase

			phases.AssignedTo = make([]types.String, 0, len(phasesItem.AssignedTo))
			for _, v := range phasesItem.AssignedTo {
				phases.AssignedTo = append(phases.AssignedTo, types.StringValue(v))
			}
			phases.DueDate = types.StringPointerValue(phasesItem.DueDate)
			if phasesItem.DueDateConfig == nil {
				phases.DueDateConfig = nil
			} else {
				phases.DueDateConfig = &tfTypes.DueDateConfig{}
				phases.DueDateConfig.Duration = types.Float64Value(phasesItem.DueDateConfig.Duration)
				phases.DueDateConfig.PhaseID = types.StringPointerValue(phasesItem.DueDateConfig.PhaseID)
				phases.DueDateConfig.TaskID = types.StringPointerValue(phasesItem.DueDateConfig.TaskID)
				phases.DueDateConfig.Type = types.StringValue(string(phasesItem.DueDateConfig.Type))
				phases.DueDateConfig.Unit = types.StringValue(string(phasesItem.DueDateConfig.Unit))
			}
			phases.ID = types.StringValue(phasesItem.ID)
			phases.Name = types.StringValue(phasesItem.Name)
			phases.Taxonomies = make([]types.String, 0, len(phasesItem.Taxonomies))
			for _, v := range phasesItem.Taxonomies {
				phases.Taxonomies = append(phases.Taxonomies, types.StringValue(v))
			}

			r.Phases = append(r.Phases, phases)
		}
		r.Tasks = []tfTypes.Task{}

		for _, tasksItem := range resp.Tasks {
			var tasks tfTypes.Task

			if tasksItem.AutomationTask != nil {
				tasks.AutomationTask = &tfTypes.AutomationTask{}
				tasks.AutomationTask.AssignedTo = make([]types.String, 0, len(tasksItem.AutomationTask.AssignedTo))
				for _, v := range tasksItem.AutomationTask.AssignedTo {
					tasks.AutomationTask.AssignedTo = append(tasks.AutomationTask.AssignedTo, types.StringValue(v))
				}
				tasks.AutomationTask.AutomationConfig.FlowID = types.StringValue(tasksItem.AutomationTask.AutomationConfig.FlowID)
				if tasksItem.AutomationTask.Description == nil {
					tasks.AutomationTask.Description = nil
				} else {
					tasks.AutomationTask.Description = &tfTypes.StepDescription{}
					tasks.AutomationTask.Description.Enabled = types.BoolPointerValue(tasksItem.AutomationTask.Description.Enabled)
					tasks.AutomationTask.Description.Value = types.StringPointerValue(tasksItem.AutomationTask.Description.Value)
				}
				tasks.AutomationTask.DueDate = types.StringPointerValue(tasksItem.AutomationTask.DueDate)
				if tasksItem.AutomationTask.DueDateConfig == nil {
					tasks.AutomationTask.DueDateConfig = nil
				} else {
					tasks.AutomationTask.DueDateConfig = &tfTypes.DueDateConfig{}
					tasks.AutomationTask.DueDateConfig.Duration = types.Float64Value(tasksItem.AutomationTask.DueDateConfig.Duration)
					tasks.AutomationTask.DueDateConfig.PhaseID = types.StringPointerValue(tasksItem.AutomationTask.DueDateConfig.PhaseID)
					tasks.AutomationTask.DueDateConfig.TaskID = types.StringPointerValue(tasksItem.AutomationTask.DueDateConfig.TaskID)
					tasks.AutomationTask.DueDateConfig.Type = types.StringValue(string(tasksItem.AutomationTask.DueDateConfig.Type))
					tasks.AutomationTask.DueDateConfig.Unit = types.StringValue(string(tasksItem.AutomationTask.DueDateConfig.Unit))
				}
				if tasksItem.AutomationTask.Ecp == nil {
					tasks.AutomationTask.Ecp = nil
				} else {
					tasks.AutomationTask.Ecp = &tfTypes.ECPDetails{}
					tasks.AutomationTask.Ecp.Description = types.StringPointerValue(tasksItem.AutomationTask.Ecp.Description)
					tasks.AutomationTask.Ecp.Enabled = types.BoolPointerValue(tasksItem.AutomationTask.Ecp.Enabled)
					if tasksItem.AutomationTask.Ecp.Journey == nil {
						tasks.AutomationTask.Ecp.Journey = nil
					} else {
						tasks.AutomationTask.Ecp.Journey = &tfTypes.StepJourney{}
						tasks.AutomationTask.Ecp.Journey.ID = types.StringPointerValue(tasksItem.AutomationTask.Ecp.Journey.ID)
						tasks.AutomationTask.Ecp.Journey.JourneyID = types.StringPointerValue(tasksItem.AutomationTask.Ecp.Journey.JourneyID)
						tasks.AutomationTask.Ecp.Journey.Name = types.StringPointerValue(tasksItem.AutomationTask.Ecp.Journey.Name)
					}
					tasks.AutomationTask.Ecp.Label = types.StringPointerValue(tasksItem.AutomationTask.Ecp.Label)
				}
				tasks.AutomationTask.ID = types.StringValue(tasksItem.AutomationTask.ID)
				if tasksItem.AutomationTask.Installer == nil {
					tasks.AutomationTask.Installer = nil
				} else {
					tasks.AutomationTask.Installer = &tfTypes.ECPDetails{}
					tasks.AutomationTask.Installer.Description = types.StringPointerValue(tasksItem.AutomationTask.Installer.Description)
					tasks.AutomationTask.Installer.Enabled = types.BoolPointerValue(tasksItem.AutomationTask.Installer.Enabled)
					if tasksItem.AutomationTask.Installer.Journey == nil {
						tasks.AutomationTask.Installer.Journey = nil
					} else {
						tasks.AutomationTask.Installer.Journey = &tfTypes.StepJourney{}
						tasks.AutomationTask.Installer.Journey.ID = types.StringPointerValue(tasksItem.AutomationTask.Installer.Journey.ID)
						tasks.AutomationTask.Installer.Journey.JourneyID = types.StringPointerValue(tasksItem.AutomationTask.Installer.Journey.JourneyID)
						tasks.AutomationTask.Installer.Journey.Name = types.StringPointerValue(tasksItem.AutomationTask.Installer.Journey.Name)
					}
					tasks.AutomationTask.Installer.Label = types.StringPointerValue(tasksItem.AutomationTask.Installer.Label)
				}
				if tasksItem.AutomationTask.Journey == nil {
					tasks.AutomationTask.Journey = nil
				} else {
					tasks.AutomationTask.Journey = &tfTypes.StepJourney{}
					tasks.AutomationTask.Journey.ID = types.StringPointerValue(tasksItem.AutomationTask.Journey.ID)
					tasks.AutomationTask.Journey.JourneyID = types.StringPointerValue(tasksItem.AutomationTask.Journey.JourneyID)
					tasks.AutomationTask.Journey.Name = types.StringPointerValue(tasksItem.AutomationTask.Journey.Name)
				}
				tasks.AutomationTask.Name = types.StringValue(tasksItem.AutomationTask.Name)
				tasks.AutomationTask.PhaseID = types.StringPointerValue(tasksItem.AutomationTask.PhaseID)
				tasks.AutomationTask.Requirements = []tfTypes.EnableRequirement{}

				for _, requirementsItem := range tasksItem.AutomationTask.Requirements {
					var requirements tfTypes.EnableRequirement

					requirements.PhaseID = types.StringPointerValue(requirementsItem.PhaseID)
					requirements.TaskID = types.StringPointerValue(requirementsItem.TaskID)
					requirements.When = types.StringValue(string(requirementsItem.When))

					tasks.AutomationTask.Requirements = append(tasks.AutomationTask.Requirements, requirements)
				}
				if tasksItem.AutomationTask.Schedule != nil {
					tasks.AutomationTask.Schedule = &tfTypes.ActionSchedule{}
					if tasksItem.AutomationTask.Schedule.DelayedSchedule != nil {
						tasks.AutomationTask.Schedule.DelayedSchedule = &tfTypes.DelayedSchedule{}
						tasks.AutomationTask.Schedule.DelayedSchedule.Duration = types.Float64Value(tasksItem.AutomationTask.Schedule.DelayedSchedule.Duration)
						tasks.AutomationTask.Schedule.DelayedSchedule.Mode = types.StringValue(string(tasksItem.AutomationTask.Schedule.DelayedSchedule.Mode))
						tasks.AutomationTask.Schedule.DelayedSchedule.Unit = types.StringValue(string(tasksItem.AutomationTask.Schedule.DelayedSchedule.Unit))
					}
					if tasksItem.AutomationTask.Schedule.ImmediateSchedule != nil {
						tasks.AutomationTask.Schedule.ImmediateSchedule = &tfTypes.ImmediateSchedule{}
						if tasksItem.AutomationTask.Schedule.ImmediateSchedule.Mode != nil {
							tasks.AutomationTask.Schedule.ImmediateSchedule.Mode = types.StringValue(string(*tasksItem.AutomationTask.Schedule.ImmediateSchedule.Mode))
						} else {
							tasks.AutomationTask.Schedule.ImmediateSchedule.Mode = types.StringNull()
						}
					}
					if tasksItem.AutomationTask.Schedule.RelativeSchedule != nil {
						tasks.AutomationTask.Schedule.RelativeSchedule = &tfTypes.RelativeSchedule{}
						tasks.AutomationTask.Schedule.RelativeSchedule.Direction = types.StringValue(string(tasksItem.AutomationTask.Schedule.RelativeSchedule.Direction))
						tasks.AutomationTask.Schedule.RelativeSchedule.Duration = types.Float64Value(tasksItem.AutomationTask.Schedule.RelativeSchedule.Duration)
						tasks.AutomationTask.Schedule.RelativeSchedule.Mode = types.StringValue(string(tasksItem.AutomationTask.Schedule.RelativeSchedule.Mode))
						tasks.AutomationTask.Schedule.RelativeSchedule.Reference.Attribute = types.StringPointerValue(tasksItem.AutomationTask.Schedule.RelativeSchedule.Reference.Attribute)
						tasks.AutomationTask.Schedule.RelativeSchedule.Reference.ID = types.StringValue(tasksItem.AutomationTask.Schedule.RelativeSchedule.Reference.ID)
						tasks.AutomationTask.Schedule.RelativeSchedule.Reference.Origin = types.StringValue(string(tasksItem.AutomationTask.Schedule.RelativeSchedule.Reference.Origin))
						tasks.AutomationTask.Schedule.RelativeSchedule.Reference.Schema = types.StringPointerValue(tasksItem.AutomationTask.Schedule.RelativeSchedule.Reference.Schema)
						tasks.AutomationTask.Schedule.RelativeSchedule.Unit = types.StringValue(string(tasksItem.AutomationTask.Schedule.RelativeSchedule.Unit))
					}
				}
				tasks.AutomationTask.TaskType = types.StringValue(string(tasksItem.AutomationTask.TaskType))
				tasks.AutomationTask.Taxonomies = make([]types.String, 0, len(tasksItem.AutomationTask.Taxonomies))
				for _, v := range tasksItem.AutomationTask.Taxonomies {
					tasks.AutomationTask.Taxonomies = append(tasks.AutomationTask.Taxonomies, types.StringValue(v))
				}
				if tasksItem.AutomationTask.TriggerMode != nil {
					tasks.AutomationTask.TriggerMode = types.StringValue(string(*tasksItem.AutomationTask.TriggerMode))
				} else {
					tasks.AutomationTask.TriggerMode = types.StringNull()
				}
			}
			if tasksItem.DecisionTask != nil {
				tasks.DecisionTask = &tfTypes.DecisionTask{}
				tasks.DecisionTask.AssignedTo = make([]types.String, 0, len(tasksItem.DecisionTask.AssignedTo))
				for _, v := range tasksItem.DecisionTask.AssignedTo {
					tasks.DecisionTask.AssignedTo = append(tasks.DecisionTask.AssignedTo, types.StringValue(v))
				}
				tasks.DecisionTask.Conditions = []tfTypes.Condition{}

				for _, conditionsItem := range tasksItem.DecisionTask.Conditions {
					var conditions tfTypes.Condition

					conditions.BranchName = types.StringValue(conditionsItem.BranchName)
					conditions.ID = types.StringValue(conditionsItem.ID)
					conditions.LogicalOperator = types.StringValue(string(conditionsItem.LogicalOperator))
					conditions.Statements = []tfTypes.Statement{}

					for _, statementsItem := range conditionsItem.Statements {
						var statements tfTypes.Statement

						statements.ID = types.StringValue(statementsItem.ID)
						statements.Operator = types.StringValue(string(statementsItem.Operator))
						statements.Source.Attribute = types.StringPointerValue(statementsItem.Source.Attribute)
						if statementsItem.Source.AttributeOperation != nil {
							statements.Source.AttributeOperation = types.StringValue(string(*statementsItem.Source.AttributeOperation))
						} else {
							statements.Source.AttributeOperation = types.StringNull()
						}
						statements.Source.AttributeRepeatable = types.BoolPointerValue(statementsItem.Source.AttributeRepeatable)
						if statementsItem.Source.AttributeType != nil {
							statements.Source.AttributeType = types.StringValue(string(*statementsItem.Source.AttributeType))
						} else {
							statements.Source.AttributeType = types.StringNull()
						}
						statements.Source.ID = types.StringPointerValue(statementsItem.Source.ID)
						if statementsItem.Source.Origin != nil {
							statements.Source.Origin = types.StringValue(string(*statementsItem.Source.Origin))
						} else {
							statements.Source.Origin = types.StringNull()
						}
						if statementsItem.Source.OriginType != nil {
							statements.Source.OriginType = types.StringValue(string(*statementsItem.Source.OriginType))
						} else {
							statements.Source.OriginType = types.StringNull()
						}
						statements.Source.Schema = types.StringPointerValue(statementsItem.Source.Schema)
						statements.Values = make([]types.String, 0, len(statementsItem.Values))
						for _, v := range statementsItem.Values {
							statements.Values = append(statements.Values, types.StringValue(v))
						}

						conditions.Statements = append(conditions.Statements, statements)
					}

					tasks.DecisionTask.Conditions = append(tasks.DecisionTask.Conditions, conditions)
				}
				if tasksItem.DecisionTask.Description == nil {
					tasks.DecisionTask.Description = nil
				} else {
					tasks.DecisionTask.Description = &tfTypes.StepDescription{}
					tasks.DecisionTask.Description.Enabled = types.BoolPointerValue(tasksItem.DecisionTask.Description.Enabled)
					tasks.DecisionTask.Description.Value = types.StringPointerValue(tasksItem.DecisionTask.Description.Value)
				}
				tasks.DecisionTask.DueDate = types.StringPointerValue(tasksItem.DecisionTask.DueDate)
				if tasksItem.DecisionTask.DueDateConfig == nil {
					tasks.DecisionTask.DueDateConfig = nil
				} else {
					tasks.DecisionTask.DueDateConfig = &tfTypes.DueDateConfig{}
					tasks.DecisionTask.DueDateConfig.Duration = types.Float64Value(tasksItem.DecisionTask.DueDateConfig.Duration)
					tasks.DecisionTask.DueDateConfig.PhaseID = types.StringPointerValue(tasksItem.DecisionTask.DueDateConfig.PhaseID)
					tasks.DecisionTask.DueDateConfig.TaskID = types.StringPointerValue(tasksItem.DecisionTask.DueDateConfig.TaskID)
					tasks.DecisionTask.DueDateConfig.Type = types.StringValue(string(tasksItem.DecisionTask.DueDateConfig.Type))
					tasks.DecisionTask.DueDateConfig.Unit = types.StringValue(string(tasksItem.DecisionTask.DueDateConfig.Unit))
				}
				if tasksItem.DecisionTask.Ecp == nil {
					tasks.DecisionTask.Ecp = nil
				} else {
					tasks.DecisionTask.Ecp = &tfTypes.ECPDetails{}
					tasks.DecisionTask.Ecp.Description = types.StringPointerValue(tasksItem.DecisionTask.Ecp.Description)
					tasks.DecisionTask.Ecp.Enabled = types.BoolPointerValue(tasksItem.DecisionTask.Ecp.Enabled)
					if tasksItem.DecisionTask.Ecp.Journey == nil {
						tasks.DecisionTask.Ecp.Journey = nil
					} else {
						tasks.DecisionTask.Ecp.Journey = &tfTypes.StepJourney{}
						tasks.DecisionTask.Ecp.Journey.ID = types.StringPointerValue(tasksItem.DecisionTask.Ecp.Journey.ID)
						tasks.DecisionTask.Ecp.Journey.JourneyID = types.StringPointerValue(tasksItem.DecisionTask.Ecp.Journey.JourneyID)
						tasks.DecisionTask.Ecp.Journey.Name = types.StringPointerValue(tasksItem.DecisionTask.Ecp.Journey.Name)
					}
					tasks.DecisionTask.Ecp.Label = types.StringPointerValue(tasksItem.DecisionTask.Ecp.Label)
				}
				tasks.DecisionTask.ID = types.StringValue(tasksItem.DecisionTask.ID)
				if tasksItem.DecisionTask.Installer == nil {
					tasks.DecisionTask.Installer = nil
				} else {
					tasks.DecisionTask.Installer = &tfTypes.ECPDetails{}
					tasks.DecisionTask.Installer.Description = types.StringPointerValue(tasksItem.DecisionTask.Installer.Description)
					tasks.DecisionTask.Installer.Enabled = types.BoolPointerValue(tasksItem.DecisionTask.Installer.Enabled)
					if tasksItem.DecisionTask.Installer.Journey == nil {
						tasks.DecisionTask.Installer.Journey = nil
					} else {
						tasks.DecisionTask.Installer.Journey = &tfTypes.StepJourney{}
						tasks.DecisionTask.Installer.Journey.ID = types.StringPointerValue(tasksItem.DecisionTask.Installer.Journey.ID)
						tasks.DecisionTask.Installer.Journey.JourneyID = types.StringPointerValue(tasksItem.DecisionTask.Installer.Journey.JourneyID)
						tasks.DecisionTask.Installer.Journey.Name = types.StringPointerValue(tasksItem.DecisionTask.Installer.Journey.Name)
					}
					tasks.DecisionTask.Installer.Label = types.StringPointerValue(tasksItem.DecisionTask.Installer.Label)
				}
				if tasksItem.DecisionTask.Journey == nil {
					tasks.DecisionTask.Journey = nil
				} else {
					tasks.DecisionTask.Journey = &tfTypes.StepJourney{}
					tasks.DecisionTask.Journey.ID = types.StringPointerValue(tasksItem.DecisionTask.Journey.ID)
					tasks.DecisionTask.Journey.JourneyID = types.StringPointerValue(tasksItem.DecisionTask.Journey.JourneyID)
					tasks.DecisionTask.Journey.Name = types.StringPointerValue(tasksItem.DecisionTask.Journey.Name)
				}
				tasks.DecisionTask.Name = types.StringValue(tasksItem.DecisionTask.Name)
				tasks.DecisionTask.PhaseID = types.StringPointerValue(tasksItem.DecisionTask.PhaseID)
				tasks.DecisionTask.Requirements = []tfTypes.EnableRequirement{}

				for _, requirementsItem1 := range tasksItem.DecisionTask.Requirements {
					var requirements1 tfTypes.EnableRequirement

					requirements1.PhaseID = types.StringPointerValue(requirementsItem1.PhaseID)
					requirements1.TaskID = types.StringPointerValue(requirementsItem1.TaskID)
					requirements1.When = types.StringValue(string(requirementsItem1.When))

					tasks.DecisionTask.Requirements = append(tasks.DecisionTask.Requirements, requirements1)
				}
				if tasksItem.DecisionTask.Schedule != nil {
					tasks.DecisionTask.Schedule = &tfTypes.Schedule{}
					if tasksItem.DecisionTask.Schedule.DelayedSchedule != nil {
						tasks.DecisionTask.Schedule.DelayedSchedule = &tfTypes.DelayedSchedule{}
						tasks.DecisionTask.Schedule.DelayedSchedule.Duration = types.Float64Value(tasksItem.DecisionTask.Schedule.DelayedSchedule.Duration)
						tasks.DecisionTask.Schedule.DelayedSchedule.Mode = types.StringValue(string(tasksItem.DecisionTask.Schedule.DelayedSchedule.Mode))
						tasks.DecisionTask.Schedule.DelayedSchedule.Unit = types.StringValue(string(tasksItem.DecisionTask.Schedule.DelayedSchedule.Unit))
					}
					if tasksItem.DecisionTask.Schedule.RelativeSchedule != nil {
						tasks.DecisionTask.Schedule.RelativeSchedule = &tfTypes.RelativeSchedule{}
						tasks.DecisionTask.Schedule.RelativeSchedule.Direction = types.StringValue(string(tasksItem.DecisionTask.Schedule.RelativeSchedule.Direction))
						tasks.DecisionTask.Schedule.RelativeSchedule.Duration = types.Float64Value(tasksItem.DecisionTask.Schedule.RelativeSchedule.Duration)
						tasks.DecisionTask.Schedule.RelativeSchedule.Mode = types.StringValue(string(tasksItem.DecisionTask.Schedule.RelativeSchedule.Mode))
						tasks.DecisionTask.Schedule.RelativeSchedule.Reference.Attribute = types.StringPointerValue(tasksItem.DecisionTask.Schedule.RelativeSchedule.Reference.Attribute)
						tasks.DecisionTask.Schedule.RelativeSchedule.Reference.ID = types.StringValue(tasksItem.DecisionTask.Schedule.RelativeSchedule.Reference.ID)
						tasks.DecisionTask.Schedule.RelativeSchedule.Reference.Origin = types.StringValue(string(tasksItem.DecisionTask.Schedule.RelativeSchedule.Reference.Origin))
						tasks.DecisionTask.Schedule.RelativeSchedule.Reference.Schema = types.StringPointerValue(tasksItem.DecisionTask.Schedule.RelativeSchedule.Reference.Schema)
						tasks.DecisionTask.Schedule.RelativeSchedule.Unit = types.StringValue(string(tasksItem.DecisionTask.Schedule.RelativeSchedule.Unit))
					}
				}
				tasks.DecisionTask.TaskType = types.StringValue(string(tasksItem.DecisionTask.TaskType))
				tasks.DecisionTask.Taxonomies = make([]types.String, 0, len(tasksItem.DecisionTask.Taxonomies))
				for _, v := range tasksItem.DecisionTask.Taxonomies {
					tasks.DecisionTask.Taxonomies = append(tasks.DecisionTask.Taxonomies, types.StringValue(v))
				}
			}
			if tasksItem.TaskBase != nil {
				tasks.TaskBase = &tfTypes.TaskBase{}
				tasks.TaskBase.AssignedTo = make([]types.String, 0, len(tasksItem.TaskBase.AssignedTo))
				for _, v := range tasksItem.TaskBase.AssignedTo {
					tasks.TaskBase.AssignedTo = append(tasks.TaskBase.AssignedTo, types.StringValue(v))
				}
				if tasksItem.TaskBase.Description == nil {
					tasks.TaskBase.Description = nil
				} else {
					tasks.TaskBase.Description = &tfTypes.StepDescription{}
					tasks.TaskBase.Description.Enabled = types.BoolPointerValue(tasksItem.TaskBase.Description.Enabled)
					tasks.TaskBase.Description.Value = types.StringPointerValue(tasksItem.TaskBase.Description.Value)
				}
				tasks.TaskBase.DueDate = types.StringPointerValue(tasksItem.TaskBase.DueDate)
				if tasksItem.TaskBase.DueDateConfig == nil {
					tasks.TaskBase.DueDateConfig = nil
				} else {
					tasks.TaskBase.DueDateConfig = &tfTypes.DueDateConfig{}
					tasks.TaskBase.DueDateConfig.Duration = types.Float64Value(tasksItem.TaskBase.DueDateConfig.Duration)
					tasks.TaskBase.DueDateConfig.PhaseID = types.StringPointerValue(tasksItem.TaskBase.DueDateConfig.PhaseID)
					tasks.TaskBase.DueDateConfig.TaskID = types.StringPointerValue(tasksItem.TaskBase.DueDateConfig.TaskID)
					tasks.TaskBase.DueDateConfig.Type = types.StringValue(string(tasksItem.TaskBase.DueDateConfig.Type))
					tasks.TaskBase.DueDateConfig.Unit = types.StringValue(string(tasksItem.TaskBase.DueDateConfig.Unit))
				}
				if tasksItem.TaskBase.Ecp == nil {
					tasks.TaskBase.Ecp = nil
				} else {
					tasks.TaskBase.Ecp = &tfTypes.ECPDetails{}
					tasks.TaskBase.Ecp.Description = types.StringPointerValue(tasksItem.TaskBase.Ecp.Description)
					tasks.TaskBase.Ecp.Enabled = types.BoolPointerValue(tasksItem.TaskBase.Ecp.Enabled)
					if tasksItem.TaskBase.Ecp.Journey == nil {
						tasks.TaskBase.Ecp.Journey = nil
					} else {
						tasks.TaskBase.Ecp.Journey = &tfTypes.StepJourney{}
						tasks.TaskBase.Ecp.Journey.ID = types.StringPointerValue(tasksItem.TaskBase.Ecp.Journey.ID)
						tasks.TaskBase.Ecp.Journey.JourneyID = types.StringPointerValue(tasksItem.TaskBase.Ecp.Journey.JourneyID)
						tasks.TaskBase.Ecp.Journey.Name = types.StringPointerValue(tasksItem.TaskBase.Ecp.Journey.Name)
					}
					tasks.TaskBase.Ecp.Label = types.StringPointerValue(tasksItem.TaskBase.Ecp.Label)
				}
				tasks.TaskBase.ID = types.StringValue(tasksItem.TaskBase.ID)
				if tasksItem.TaskBase.Installer == nil {
					tasks.TaskBase.Installer = nil
				} else {
					tasks.TaskBase.Installer = &tfTypes.ECPDetails{}
					tasks.TaskBase.Installer.Description = types.StringPointerValue(tasksItem.TaskBase.Installer.Description)
					tasks.TaskBase.Installer.Enabled = types.BoolPointerValue(tasksItem.TaskBase.Installer.Enabled)
					if tasksItem.TaskBase.Installer.Journey == nil {
						tasks.TaskBase.Installer.Journey = nil
					} else {
						tasks.TaskBase.Installer.Journey = &tfTypes.StepJourney{}
						tasks.TaskBase.Installer.Journey.ID = types.StringPointerValue(tasksItem.TaskBase.Installer.Journey.ID)
						tasks.TaskBase.Installer.Journey.JourneyID = types.StringPointerValue(tasksItem.TaskBase.Installer.Journey.JourneyID)
						tasks.TaskBase.Installer.Journey.Name = types.StringPointerValue(tasksItem.TaskBase.Installer.Journey.Name)
					}
					tasks.TaskBase.Installer.Label = types.StringPointerValue(tasksItem.TaskBase.Installer.Label)
				}
				if tasksItem.TaskBase.Journey == nil {
					tasks.TaskBase.Journey = nil
				} else {
					tasks.TaskBase.Journey = &tfTypes.StepJourney{}
					tasks.TaskBase.Journey.ID = types.StringPointerValue(tasksItem.TaskBase.Journey.ID)
					tasks.TaskBase.Journey.JourneyID = types.StringPointerValue(tasksItem.TaskBase.Journey.JourneyID)
					tasks.TaskBase.Journey.Name = types.StringPointerValue(tasksItem.TaskBase.Journey.Name)
				}
				tasks.TaskBase.Name = types.StringValue(tasksItem.TaskBase.Name)
				tasks.TaskBase.PhaseID = types.StringPointerValue(tasksItem.TaskBase.PhaseID)
				tasks.TaskBase.Requirements = []tfTypes.EnableRequirement{}

				for _, requirementsItem2 := range tasksItem.TaskBase.Requirements {
					var requirements2 tfTypes.EnableRequirement

					requirements2.PhaseID = types.StringPointerValue(requirementsItem2.PhaseID)
					requirements2.TaskID = types.StringPointerValue(requirementsItem2.TaskID)
					requirements2.When = types.StringValue(string(requirementsItem2.When))

					tasks.TaskBase.Requirements = append(tasks.TaskBase.Requirements, requirements2)
				}
				tasks.TaskBase.TaskType = types.StringValue(string(tasksItem.TaskBase.TaskType))
				tasks.TaskBase.Taxonomies = make([]types.String, 0, len(tasksItem.TaskBase.Taxonomies))
				for _, v := range tasksItem.TaskBase.Taxonomies {
					tasks.TaskBase.Taxonomies = append(tasks.TaskBase.Taxonomies, types.StringValue(v))
				}
			}

			r.Tasks = append(r.Tasks, tasks)
		}
		r.Taxonomies = make([]types.String, 0, len(resp.Taxonomies))
		for _, v := range resp.Taxonomies {
			r.Taxonomies = append(r.Taxonomies, types.StringValue(v))
		}
		if resp.Trigger != nil {
			r.Trigger = &tfTypes.Trigger{}
			if resp.Trigger.AutomationTrigger != nil {
				r.Trigger.AutomationTrigger = &tfTypes.AutomationTrigger{}
				r.Trigger.AutomationTrigger.AutomationID = types.StringValue(resp.Trigger.AutomationTrigger.AutomationID)
				r.Trigger.AutomationTrigger.ID = types.StringPointerValue(resp.Trigger.AutomationTrigger.ID)
				r.Trigger.AutomationTrigger.Type = types.StringValue(string(resp.Trigger.AutomationTrigger.Type))
			}
			if resp.Trigger.JourneySubmissionTrigger != nil {
				r.Trigger.JourneySubmissionTrigger = &tfTypes.JourneySubmissionTrigger{}
				r.Trigger.JourneySubmissionTrigger.AutomationID = types.StringPointerValue(resp.Trigger.JourneySubmissionTrigger.AutomationID)
				r.Trigger.JourneySubmissionTrigger.ID = types.StringPointerValue(resp.Trigger.JourneySubmissionTrigger.ID)
				r.Trigger.JourneySubmissionTrigger.JourneyID = types.StringValue(resp.Trigger.JourneySubmissionTrigger.JourneyID)
				r.Trigger.JourneySubmissionTrigger.Type = types.StringValue(string(resp.Trigger.JourneySubmissionTrigger.Type))
			}
			if resp.Trigger.ManualTrigger != nil {
				r.Trigger.ManualTrigger = &tfTypes.ManualTrigger{}
				r.Trigger.ManualTrigger.EntitySchema = types.StringPointerValue(resp.Trigger.ManualTrigger.EntitySchema)
				r.Trigger.ManualTrigger.ID = types.StringPointerValue(resp.Trigger.ManualTrigger.ID)
				r.Trigger.ManualTrigger.Type = types.StringValue(string(resp.Trigger.ManualTrigger.Type))
			}
		}
		r.UpdateEntityAttributes = []tfTypes.UpdateEntityAttributes{}

		for _, updateEntityAttributesItem := range resp.UpdateEntityAttributes {
			var updateEntityAttributes tfTypes.UpdateEntityAttributes

			updateEntityAttributes.Source = types.StringValue(string(updateEntityAttributesItem.Source))
			updateEntityAttributes.Target.EntityAttribute = types.StringValue(updateEntityAttributesItem.Target.EntityAttribute)
			updateEntityAttributes.Target.EntitySchema = types.StringValue(updateEntityAttributesItem.Target.EntitySchema)

			r.UpdateEntityAttributes = append(r.UpdateEntityAttributes, updateEntityAttributes)
		}
		r.UpdatedAt = types.StringPointerValue(resp.UpdatedAt)
	}

	return diags
}

func (r *FlowTemplateDataSourceModel) ToOperationsGetFlowTemplateRequest(ctx context.Context) (*operations.GetFlowTemplateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var flowID string
	flowID = r.ID.ValueString()

	out := operations.GetFlowTemplateRequest{
		FlowID: flowID,
	}

	return &out, diags
}
