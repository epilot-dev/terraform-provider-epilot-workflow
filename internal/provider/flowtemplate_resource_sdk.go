// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-workflow/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-workflow/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-workflow/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *FlowTemplateResourceModel) RefreshFromSharedFlowTemplate(ctx context.Context, resp *shared.FlowTemplate) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AssignedTo = make([]types.String, 0, len(resp.AssignedTo))
		for _, v := range resp.AssignedTo {
			r.AssignedTo = append(r.AssignedTo, types.StringValue(v))
		}
		r.AvailableInEcp = types.BoolPointerValue(resp.AvailableInEcp)
		r.ClosingReasons = []tfTypes.ClosingReason{}

		for _, closingReasonsItem := range resp.ClosingReasons {
			var closingReasons tfTypes.ClosingReason

			closingReasons.CreationTime = types.StringPointerValue(closingReasonsItem.CreationTime)
			closingReasons.ID = types.StringPointerValue(closingReasonsItem.ID)
			closingReasons.LastUpdateTime = types.StringPointerValue(closingReasonsItem.LastUpdateTime)
			closingReasons.Status = types.StringValue(string(closingReasonsItem.Status))
			closingReasons.Title = types.StringValue(closingReasonsItem.Title)

			r.ClosingReasons = append(r.ClosingReasons, closingReasons)
		}
		r.CreatedAt = types.StringPointerValue(resp.CreatedAt)
		r.Description = types.StringPointerValue(resp.Description)
		r.DueDate = types.StringPointerValue(resp.DueDate)
		if resp.DueDateConfig == nil {
			r.DueDateConfig = nil
		} else {
			r.DueDateConfig = &tfTypes.DueDateConfig{}
			r.DueDateConfig.Duration = types.Float64Value(resp.DueDateConfig.Duration)
			r.DueDateConfig.PhaseID = types.StringPointerValue(resp.DueDateConfig.PhaseID)
			r.DueDateConfig.TaskID = types.StringPointerValue(resp.DueDateConfig.TaskID)
			r.DueDateConfig.Type = types.StringValue(string(resp.DueDateConfig.Type))
			r.DueDateConfig.Unit = types.StringValue(string(resp.DueDateConfig.Unit))
		}
		r.Edges = []tfTypes.Edge{}

		for _, edgesItem := range resp.Edges {
			var edges tfTypes.Edge

			edges.ConditionID = types.StringPointerValue(edgesItem.ConditionID)
			edges.FromID = types.StringValue(edgesItem.FromID)
			edges.ID = types.StringValue(edgesItem.ID)
			edges.NoneMet = types.BoolPointerValue(edgesItem.NoneMet)
			edges.ToID = types.StringValue(edgesItem.ToID)

			r.Edges = append(r.Edges, edges)
		}
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.IsFlowMigrated = types.BoolPointerValue(resp.IsFlowMigrated)
		r.Name = types.StringValue(resp.Name)
		r.OrgID = types.StringPointerValue(resp.OrgID)
		r.Phases = []tfTypes.Phase{}

		for _, phasesItem := range resp.Phases {
			var phases tfTypes.Phase

			phases.AssignedTo = make([]types.String, 0, len(phasesItem.AssignedTo))
			for _, v := range phasesItem.AssignedTo {
				phases.AssignedTo = append(phases.AssignedTo, types.StringValue(v))
			}
			phases.DueDate = types.StringPointerValue(phasesItem.DueDate)
			if phasesItem.DueDateConfig == nil {
				phases.DueDateConfig = nil
			} else {
				phases.DueDateConfig = &tfTypes.DueDateConfig{}
				phases.DueDateConfig.Duration = types.Float64Value(phasesItem.DueDateConfig.Duration)
				phases.DueDateConfig.PhaseID = types.StringPointerValue(phasesItem.DueDateConfig.PhaseID)
				phases.DueDateConfig.TaskID = types.StringPointerValue(phasesItem.DueDateConfig.TaskID)
				phases.DueDateConfig.Type = types.StringValue(string(phasesItem.DueDateConfig.Type))
				phases.DueDateConfig.Unit = types.StringValue(string(phasesItem.DueDateConfig.Unit))
			}
			phases.ID = types.StringValue(phasesItem.ID)
			phases.Name = types.StringValue(phasesItem.Name)
			phases.Taxonomies = make([]types.String, 0, len(phasesItem.Taxonomies))
			for _, v := range phasesItem.Taxonomies {
				phases.Taxonomies = append(phases.Taxonomies, types.StringValue(v))
			}

			r.Phases = append(r.Phases, phases)
		}
		r.Tasks = []tfTypes.Task{}

		for _, tasksItem := range resp.Tasks {
			var tasks tfTypes.Task

			if tasksItem.AutomationTask != nil {
				tasks.AutomationTask = &tfTypes.AutomationTask{}
				tasks.AutomationTask.AssignedTo = make([]types.String, 0, len(tasksItem.AutomationTask.AssignedTo))
				for _, v := range tasksItem.AutomationTask.AssignedTo {
					tasks.AutomationTask.AssignedTo = append(tasks.AutomationTask.AssignedTo, types.StringValue(v))
				}
				tasks.AutomationTask.AutomationConfig.FlowID = types.StringValue(tasksItem.AutomationTask.AutomationConfig.FlowID)
				if tasksItem.AutomationTask.Description == nil {
					tasks.AutomationTask.Description = nil
				} else {
					tasks.AutomationTask.Description = &tfTypes.StepDescription{}
					tasks.AutomationTask.Description.Enabled = types.BoolPointerValue(tasksItem.AutomationTask.Description.Enabled)
					tasks.AutomationTask.Description.Value = types.StringPointerValue(tasksItem.AutomationTask.Description.Value)
				}
				tasks.AutomationTask.DueDate = types.StringPointerValue(tasksItem.AutomationTask.DueDate)
				if tasksItem.AutomationTask.DueDateConfig == nil {
					tasks.AutomationTask.DueDateConfig = nil
				} else {
					tasks.AutomationTask.DueDateConfig = &tfTypes.DueDateConfig{}
					tasks.AutomationTask.DueDateConfig.Duration = types.Float64Value(tasksItem.AutomationTask.DueDateConfig.Duration)
					tasks.AutomationTask.DueDateConfig.PhaseID = types.StringPointerValue(tasksItem.AutomationTask.DueDateConfig.PhaseID)
					tasks.AutomationTask.DueDateConfig.TaskID = types.StringPointerValue(tasksItem.AutomationTask.DueDateConfig.TaskID)
					tasks.AutomationTask.DueDateConfig.Type = types.StringValue(string(tasksItem.AutomationTask.DueDateConfig.Type))
					tasks.AutomationTask.DueDateConfig.Unit = types.StringValue(string(tasksItem.AutomationTask.DueDateConfig.Unit))
				}
				if tasksItem.AutomationTask.Ecp == nil {
					tasks.AutomationTask.Ecp = nil
				} else {
					tasks.AutomationTask.Ecp = &tfTypes.ECPDetails{}
					tasks.AutomationTask.Ecp.Description = types.StringPointerValue(tasksItem.AutomationTask.Ecp.Description)
					tasks.AutomationTask.Ecp.Enabled = types.BoolPointerValue(tasksItem.AutomationTask.Ecp.Enabled)
					if tasksItem.AutomationTask.Ecp.Journey == nil {
						tasks.AutomationTask.Ecp.Journey = nil
					} else {
						tasks.AutomationTask.Ecp.Journey = &tfTypes.StepJourney{}
						tasks.AutomationTask.Ecp.Journey.ID = types.StringPointerValue(tasksItem.AutomationTask.Ecp.Journey.ID)
						tasks.AutomationTask.Ecp.Journey.JourneyID = types.StringPointerValue(tasksItem.AutomationTask.Ecp.Journey.JourneyID)
						tasks.AutomationTask.Ecp.Journey.Name = types.StringPointerValue(tasksItem.AutomationTask.Ecp.Journey.Name)
					}
					tasks.AutomationTask.Ecp.Label = types.StringPointerValue(tasksItem.AutomationTask.Ecp.Label)
				}
				tasks.AutomationTask.ID = types.StringValue(tasksItem.AutomationTask.ID)
				if tasksItem.AutomationTask.Installer == nil {
					tasks.AutomationTask.Installer = nil
				} else {
					tasks.AutomationTask.Installer = &tfTypes.ECPDetails{}
					tasks.AutomationTask.Installer.Description = types.StringPointerValue(tasksItem.AutomationTask.Installer.Description)
					tasks.AutomationTask.Installer.Enabled = types.BoolPointerValue(tasksItem.AutomationTask.Installer.Enabled)
					if tasksItem.AutomationTask.Installer.Journey == nil {
						tasks.AutomationTask.Installer.Journey = nil
					} else {
						tasks.AutomationTask.Installer.Journey = &tfTypes.StepJourney{}
						tasks.AutomationTask.Installer.Journey.ID = types.StringPointerValue(tasksItem.AutomationTask.Installer.Journey.ID)
						tasks.AutomationTask.Installer.Journey.JourneyID = types.StringPointerValue(tasksItem.AutomationTask.Installer.Journey.JourneyID)
						tasks.AutomationTask.Installer.Journey.Name = types.StringPointerValue(tasksItem.AutomationTask.Installer.Journey.Name)
					}
					tasks.AutomationTask.Installer.Label = types.StringPointerValue(tasksItem.AutomationTask.Installer.Label)
				}
				if tasksItem.AutomationTask.Journey == nil {
					tasks.AutomationTask.Journey = nil
				} else {
					tasks.AutomationTask.Journey = &tfTypes.StepJourney{}
					tasks.AutomationTask.Journey.ID = types.StringPointerValue(tasksItem.AutomationTask.Journey.ID)
					tasks.AutomationTask.Journey.JourneyID = types.StringPointerValue(tasksItem.AutomationTask.Journey.JourneyID)
					tasks.AutomationTask.Journey.Name = types.StringPointerValue(tasksItem.AutomationTask.Journey.Name)
				}
				tasks.AutomationTask.Name = types.StringValue(tasksItem.AutomationTask.Name)
				tasks.AutomationTask.PhaseID = types.StringPointerValue(tasksItem.AutomationTask.PhaseID)
				tasks.AutomationTask.Requirements = []tfTypes.EnableRequirement{}

				for _, requirementsItem := range tasksItem.AutomationTask.Requirements {
					var requirements tfTypes.EnableRequirement

					requirements.PhaseID = types.StringPointerValue(requirementsItem.PhaseID)
					requirements.TaskID = types.StringPointerValue(requirementsItem.TaskID)
					requirements.When = types.StringValue(string(requirementsItem.When))

					tasks.AutomationTask.Requirements = append(tasks.AutomationTask.Requirements, requirements)
				}
				if tasksItem.AutomationTask.Schedule != nil {
					tasks.AutomationTask.Schedule = &tfTypes.ActionSchedule{}
					if tasksItem.AutomationTask.Schedule.DelayedSchedule != nil {
						tasks.AutomationTask.Schedule.DelayedSchedule = &tfTypes.DelayedSchedule{}
						tasks.AutomationTask.Schedule.DelayedSchedule.Duration = types.Float64Value(tasksItem.AutomationTask.Schedule.DelayedSchedule.Duration)
						tasks.AutomationTask.Schedule.DelayedSchedule.Mode = types.StringValue(string(tasksItem.AutomationTask.Schedule.DelayedSchedule.Mode))
						tasks.AutomationTask.Schedule.DelayedSchedule.Unit = types.StringValue(string(tasksItem.AutomationTask.Schedule.DelayedSchedule.Unit))
					}
					if tasksItem.AutomationTask.Schedule.ImmediateSchedule != nil {
						tasks.AutomationTask.Schedule.ImmediateSchedule = &tfTypes.ImmediateSchedule{}
						if tasksItem.AutomationTask.Schedule.ImmediateSchedule.Mode != nil {
							tasks.AutomationTask.Schedule.ImmediateSchedule.Mode = types.StringValue(string(*tasksItem.AutomationTask.Schedule.ImmediateSchedule.Mode))
						} else {
							tasks.AutomationTask.Schedule.ImmediateSchedule.Mode = types.StringNull()
						}
					}
					if tasksItem.AutomationTask.Schedule.RelativeSchedule != nil {
						tasks.AutomationTask.Schedule.RelativeSchedule = &tfTypes.RelativeSchedule{}
						tasks.AutomationTask.Schedule.RelativeSchedule.Direction = types.StringValue(string(tasksItem.AutomationTask.Schedule.RelativeSchedule.Direction))
						tasks.AutomationTask.Schedule.RelativeSchedule.Duration = types.Float64Value(tasksItem.AutomationTask.Schedule.RelativeSchedule.Duration)
						tasks.AutomationTask.Schedule.RelativeSchedule.Mode = types.StringValue(string(tasksItem.AutomationTask.Schedule.RelativeSchedule.Mode))
						tasks.AutomationTask.Schedule.RelativeSchedule.Reference.Attribute = types.StringPointerValue(tasksItem.AutomationTask.Schedule.RelativeSchedule.Reference.Attribute)
						tasks.AutomationTask.Schedule.RelativeSchedule.Reference.ID = types.StringValue(tasksItem.AutomationTask.Schedule.RelativeSchedule.Reference.ID)
						tasks.AutomationTask.Schedule.RelativeSchedule.Reference.Origin = types.StringValue(string(tasksItem.AutomationTask.Schedule.RelativeSchedule.Reference.Origin))
						tasks.AutomationTask.Schedule.RelativeSchedule.Reference.Schema = types.StringPointerValue(tasksItem.AutomationTask.Schedule.RelativeSchedule.Reference.Schema)
						tasks.AutomationTask.Schedule.RelativeSchedule.Unit = types.StringValue(string(tasksItem.AutomationTask.Schedule.RelativeSchedule.Unit))
					}
				}
				tasks.AutomationTask.TaskType = types.StringValue(string(tasksItem.AutomationTask.TaskType))
				tasks.AutomationTask.Taxonomies = make([]types.String, 0, len(tasksItem.AutomationTask.Taxonomies))
				for _, v := range tasksItem.AutomationTask.Taxonomies {
					tasks.AutomationTask.Taxonomies = append(tasks.AutomationTask.Taxonomies, types.StringValue(v))
				}
				if tasksItem.AutomationTask.TriggerMode != nil {
					tasks.AutomationTask.TriggerMode = types.StringValue(string(*tasksItem.AutomationTask.TriggerMode))
				} else {
					tasks.AutomationTask.TriggerMode = types.StringNull()
				}
			}
			if tasksItem.DecisionTask != nil {
				tasks.DecisionTask = &tfTypes.DecisionTask{}
				tasks.DecisionTask.AssignedTo = make([]types.String, 0, len(tasksItem.DecisionTask.AssignedTo))
				for _, v := range tasksItem.DecisionTask.AssignedTo {
					tasks.DecisionTask.AssignedTo = append(tasks.DecisionTask.AssignedTo, types.StringValue(v))
				}
				tasks.DecisionTask.Conditions = []tfTypes.Condition{}

				for _, conditionsItem := range tasksItem.DecisionTask.Conditions {
					var conditions tfTypes.Condition

					conditions.BranchName = types.StringValue(conditionsItem.BranchName)
					conditions.ID = types.StringValue(conditionsItem.ID)
					conditions.LogicalOperator = types.StringValue(string(conditionsItem.LogicalOperator))
					conditions.Statements = []tfTypes.Statement{}

					for _, statementsItem := range conditionsItem.Statements {
						var statements tfTypes.Statement

						statements.ID = types.StringValue(statementsItem.ID)
						statements.Operator = types.StringValue(string(statementsItem.Operator))
						statements.Source.Attribute = types.StringPointerValue(statementsItem.Source.Attribute)
						if statementsItem.Source.AttributeOperation != nil {
							statements.Source.AttributeOperation = types.StringValue(string(*statementsItem.Source.AttributeOperation))
						} else {
							statements.Source.AttributeOperation = types.StringNull()
						}
						statements.Source.AttributeRepeatable = types.BoolPointerValue(statementsItem.Source.AttributeRepeatable)
						if statementsItem.Source.AttributeType != nil {
							statements.Source.AttributeType = types.StringValue(string(*statementsItem.Source.AttributeType))
						} else {
							statements.Source.AttributeType = types.StringNull()
						}
						statements.Source.ID = types.StringPointerValue(statementsItem.Source.ID)
						if statementsItem.Source.Origin != nil {
							statements.Source.Origin = types.StringValue(string(*statementsItem.Source.Origin))
						} else {
							statements.Source.Origin = types.StringNull()
						}
						if statementsItem.Source.OriginType != nil {
							statements.Source.OriginType = types.StringValue(string(*statementsItem.Source.OriginType))
						} else {
							statements.Source.OriginType = types.StringNull()
						}
						statements.Source.Schema = types.StringPointerValue(statementsItem.Source.Schema)
						statements.Values = make([]types.String, 0, len(statementsItem.Values))
						for _, v := range statementsItem.Values {
							statements.Values = append(statements.Values, types.StringValue(v))
						}

						conditions.Statements = append(conditions.Statements, statements)
					}

					tasks.DecisionTask.Conditions = append(tasks.DecisionTask.Conditions, conditions)
				}
				if tasksItem.DecisionTask.Description == nil {
					tasks.DecisionTask.Description = nil
				} else {
					tasks.DecisionTask.Description = &tfTypes.StepDescription{}
					tasks.DecisionTask.Description.Enabled = types.BoolPointerValue(tasksItem.DecisionTask.Description.Enabled)
					tasks.DecisionTask.Description.Value = types.StringPointerValue(tasksItem.DecisionTask.Description.Value)
				}
				tasks.DecisionTask.DueDate = types.StringPointerValue(tasksItem.DecisionTask.DueDate)
				if tasksItem.DecisionTask.DueDateConfig == nil {
					tasks.DecisionTask.DueDateConfig = nil
				} else {
					tasks.DecisionTask.DueDateConfig = &tfTypes.DueDateConfig{}
					tasks.DecisionTask.DueDateConfig.Duration = types.Float64Value(tasksItem.DecisionTask.DueDateConfig.Duration)
					tasks.DecisionTask.DueDateConfig.PhaseID = types.StringPointerValue(tasksItem.DecisionTask.DueDateConfig.PhaseID)
					tasks.DecisionTask.DueDateConfig.TaskID = types.StringPointerValue(tasksItem.DecisionTask.DueDateConfig.TaskID)
					tasks.DecisionTask.DueDateConfig.Type = types.StringValue(string(tasksItem.DecisionTask.DueDateConfig.Type))
					tasks.DecisionTask.DueDateConfig.Unit = types.StringValue(string(tasksItem.DecisionTask.DueDateConfig.Unit))
				}
				if tasksItem.DecisionTask.Ecp == nil {
					tasks.DecisionTask.Ecp = nil
				} else {
					tasks.DecisionTask.Ecp = &tfTypes.ECPDetails{}
					tasks.DecisionTask.Ecp.Description = types.StringPointerValue(tasksItem.DecisionTask.Ecp.Description)
					tasks.DecisionTask.Ecp.Enabled = types.BoolPointerValue(tasksItem.DecisionTask.Ecp.Enabled)
					if tasksItem.DecisionTask.Ecp.Journey == nil {
						tasks.DecisionTask.Ecp.Journey = nil
					} else {
						tasks.DecisionTask.Ecp.Journey = &tfTypes.StepJourney{}
						tasks.DecisionTask.Ecp.Journey.ID = types.StringPointerValue(tasksItem.DecisionTask.Ecp.Journey.ID)
						tasks.DecisionTask.Ecp.Journey.JourneyID = types.StringPointerValue(tasksItem.DecisionTask.Ecp.Journey.JourneyID)
						tasks.DecisionTask.Ecp.Journey.Name = types.StringPointerValue(tasksItem.DecisionTask.Ecp.Journey.Name)
					}
					tasks.DecisionTask.Ecp.Label = types.StringPointerValue(tasksItem.DecisionTask.Ecp.Label)
				}
				tasks.DecisionTask.ID = types.StringValue(tasksItem.DecisionTask.ID)
				if tasksItem.DecisionTask.Installer == nil {
					tasks.DecisionTask.Installer = nil
				} else {
					tasks.DecisionTask.Installer = &tfTypes.ECPDetails{}
					tasks.DecisionTask.Installer.Description = types.StringPointerValue(tasksItem.DecisionTask.Installer.Description)
					tasks.DecisionTask.Installer.Enabled = types.BoolPointerValue(tasksItem.DecisionTask.Installer.Enabled)
					if tasksItem.DecisionTask.Installer.Journey == nil {
						tasks.DecisionTask.Installer.Journey = nil
					} else {
						tasks.DecisionTask.Installer.Journey = &tfTypes.StepJourney{}
						tasks.DecisionTask.Installer.Journey.ID = types.StringPointerValue(tasksItem.DecisionTask.Installer.Journey.ID)
						tasks.DecisionTask.Installer.Journey.JourneyID = types.StringPointerValue(tasksItem.DecisionTask.Installer.Journey.JourneyID)
						tasks.DecisionTask.Installer.Journey.Name = types.StringPointerValue(tasksItem.DecisionTask.Installer.Journey.Name)
					}
					tasks.DecisionTask.Installer.Label = types.StringPointerValue(tasksItem.DecisionTask.Installer.Label)
				}
				if tasksItem.DecisionTask.Journey == nil {
					tasks.DecisionTask.Journey = nil
				} else {
					tasks.DecisionTask.Journey = &tfTypes.StepJourney{}
					tasks.DecisionTask.Journey.ID = types.StringPointerValue(tasksItem.DecisionTask.Journey.ID)
					tasks.DecisionTask.Journey.JourneyID = types.StringPointerValue(tasksItem.DecisionTask.Journey.JourneyID)
					tasks.DecisionTask.Journey.Name = types.StringPointerValue(tasksItem.DecisionTask.Journey.Name)
				}
				tasks.DecisionTask.Name = types.StringValue(tasksItem.DecisionTask.Name)
				tasks.DecisionTask.PhaseID = types.StringPointerValue(tasksItem.DecisionTask.PhaseID)
				tasks.DecisionTask.Requirements = []tfTypes.EnableRequirement{}

				for _, requirementsItem1 := range tasksItem.DecisionTask.Requirements {
					var requirements1 tfTypes.EnableRequirement

					requirements1.PhaseID = types.StringPointerValue(requirementsItem1.PhaseID)
					requirements1.TaskID = types.StringPointerValue(requirementsItem1.TaskID)
					requirements1.When = types.StringValue(string(requirementsItem1.When))

					tasks.DecisionTask.Requirements = append(tasks.DecisionTask.Requirements, requirements1)
				}
				if tasksItem.DecisionTask.Schedule != nil {
					tasks.DecisionTask.Schedule = &tfTypes.Schedule{}
					if tasksItem.DecisionTask.Schedule.DelayedSchedule != nil {
						tasks.DecisionTask.Schedule.DelayedSchedule = &tfTypes.DelayedSchedule{}
						tasks.DecisionTask.Schedule.DelayedSchedule.Duration = types.Float64Value(tasksItem.DecisionTask.Schedule.DelayedSchedule.Duration)
						tasks.DecisionTask.Schedule.DelayedSchedule.Mode = types.StringValue(string(tasksItem.DecisionTask.Schedule.DelayedSchedule.Mode))
						tasks.DecisionTask.Schedule.DelayedSchedule.Unit = types.StringValue(string(tasksItem.DecisionTask.Schedule.DelayedSchedule.Unit))
					}
					if tasksItem.DecisionTask.Schedule.RelativeSchedule != nil {
						tasks.DecisionTask.Schedule.RelativeSchedule = &tfTypes.RelativeSchedule{}
						tasks.DecisionTask.Schedule.RelativeSchedule.Direction = types.StringValue(string(tasksItem.DecisionTask.Schedule.RelativeSchedule.Direction))
						tasks.DecisionTask.Schedule.RelativeSchedule.Duration = types.Float64Value(tasksItem.DecisionTask.Schedule.RelativeSchedule.Duration)
						tasks.DecisionTask.Schedule.RelativeSchedule.Mode = types.StringValue(string(tasksItem.DecisionTask.Schedule.RelativeSchedule.Mode))
						tasks.DecisionTask.Schedule.RelativeSchedule.Reference.Attribute = types.StringPointerValue(tasksItem.DecisionTask.Schedule.RelativeSchedule.Reference.Attribute)
						tasks.DecisionTask.Schedule.RelativeSchedule.Reference.ID = types.StringValue(tasksItem.DecisionTask.Schedule.RelativeSchedule.Reference.ID)
						tasks.DecisionTask.Schedule.RelativeSchedule.Reference.Origin = types.StringValue(string(tasksItem.DecisionTask.Schedule.RelativeSchedule.Reference.Origin))
						tasks.DecisionTask.Schedule.RelativeSchedule.Reference.Schema = types.StringPointerValue(tasksItem.DecisionTask.Schedule.RelativeSchedule.Reference.Schema)
						tasks.DecisionTask.Schedule.RelativeSchedule.Unit = types.StringValue(string(tasksItem.DecisionTask.Schedule.RelativeSchedule.Unit))
					}
				}
				tasks.DecisionTask.TaskType = types.StringValue(string(tasksItem.DecisionTask.TaskType))
				tasks.DecisionTask.Taxonomies = make([]types.String, 0, len(tasksItem.DecisionTask.Taxonomies))
				for _, v := range tasksItem.DecisionTask.Taxonomies {
					tasks.DecisionTask.Taxonomies = append(tasks.DecisionTask.Taxonomies, types.StringValue(v))
				}
			}
			if tasksItem.TaskBase != nil {
				tasks.TaskBase = &tfTypes.TaskBase{}
				tasks.TaskBase.AssignedTo = make([]types.String, 0, len(tasksItem.TaskBase.AssignedTo))
				for _, v := range tasksItem.TaskBase.AssignedTo {
					tasks.TaskBase.AssignedTo = append(tasks.TaskBase.AssignedTo, types.StringValue(v))
				}
				if tasksItem.TaskBase.Description == nil {
					tasks.TaskBase.Description = nil
				} else {
					tasks.TaskBase.Description = &tfTypes.StepDescription{}
					tasks.TaskBase.Description.Enabled = types.BoolPointerValue(tasksItem.TaskBase.Description.Enabled)
					tasks.TaskBase.Description.Value = types.StringPointerValue(tasksItem.TaskBase.Description.Value)
				}
				tasks.TaskBase.DueDate = types.StringPointerValue(tasksItem.TaskBase.DueDate)
				if tasksItem.TaskBase.DueDateConfig == nil {
					tasks.TaskBase.DueDateConfig = nil
				} else {
					tasks.TaskBase.DueDateConfig = &tfTypes.DueDateConfig{}
					tasks.TaskBase.DueDateConfig.Duration = types.Float64Value(tasksItem.TaskBase.DueDateConfig.Duration)
					tasks.TaskBase.DueDateConfig.PhaseID = types.StringPointerValue(tasksItem.TaskBase.DueDateConfig.PhaseID)
					tasks.TaskBase.DueDateConfig.TaskID = types.StringPointerValue(tasksItem.TaskBase.DueDateConfig.TaskID)
					tasks.TaskBase.DueDateConfig.Type = types.StringValue(string(tasksItem.TaskBase.DueDateConfig.Type))
					tasks.TaskBase.DueDateConfig.Unit = types.StringValue(string(tasksItem.TaskBase.DueDateConfig.Unit))
				}
				if tasksItem.TaskBase.Ecp == nil {
					tasks.TaskBase.Ecp = nil
				} else {
					tasks.TaskBase.Ecp = &tfTypes.ECPDetails{}
					tasks.TaskBase.Ecp.Description = types.StringPointerValue(tasksItem.TaskBase.Ecp.Description)
					tasks.TaskBase.Ecp.Enabled = types.BoolPointerValue(tasksItem.TaskBase.Ecp.Enabled)
					if tasksItem.TaskBase.Ecp.Journey == nil {
						tasks.TaskBase.Ecp.Journey = nil
					} else {
						tasks.TaskBase.Ecp.Journey = &tfTypes.StepJourney{}
						tasks.TaskBase.Ecp.Journey.ID = types.StringPointerValue(tasksItem.TaskBase.Ecp.Journey.ID)
						tasks.TaskBase.Ecp.Journey.JourneyID = types.StringPointerValue(tasksItem.TaskBase.Ecp.Journey.JourneyID)
						tasks.TaskBase.Ecp.Journey.Name = types.StringPointerValue(tasksItem.TaskBase.Ecp.Journey.Name)
					}
					tasks.TaskBase.Ecp.Label = types.StringPointerValue(tasksItem.TaskBase.Ecp.Label)
				}
				tasks.TaskBase.ID = types.StringValue(tasksItem.TaskBase.ID)
				if tasksItem.TaskBase.Installer == nil {
					tasks.TaskBase.Installer = nil
				} else {
					tasks.TaskBase.Installer = &tfTypes.ECPDetails{}
					tasks.TaskBase.Installer.Description = types.StringPointerValue(tasksItem.TaskBase.Installer.Description)
					tasks.TaskBase.Installer.Enabled = types.BoolPointerValue(tasksItem.TaskBase.Installer.Enabled)
					if tasksItem.TaskBase.Installer.Journey == nil {
						tasks.TaskBase.Installer.Journey = nil
					} else {
						tasks.TaskBase.Installer.Journey = &tfTypes.StepJourney{}
						tasks.TaskBase.Installer.Journey.ID = types.StringPointerValue(tasksItem.TaskBase.Installer.Journey.ID)
						tasks.TaskBase.Installer.Journey.JourneyID = types.StringPointerValue(tasksItem.TaskBase.Installer.Journey.JourneyID)
						tasks.TaskBase.Installer.Journey.Name = types.StringPointerValue(tasksItem.TaskBase.Installer.Journey.Name)
					}
					tasks.TaskBase.Installer.Label = types.StringPointerValue(tasksItem.TaskBase.Installer.Label)
				}
				if tasksItem.TaskBase.Journey == nil {
					tasks.TaskBase.Journey = nil
				} else {
					tasks.TaskBase.Journey = &tfTypes.StepJourney{}
					tasks.TaskBase.Journey.ID = types.StringPointerValue(tasksItem.TaskBase.Journey.ID)
					tasks.TaskBase.Journey.JourneyID = types.StringPointerValue(tasksItem.TaskBase.Journey.JourneyID)
					tasks.TaskBase.Journey.Name = types.StringPointerValue(tasksItem.TaskBase.Journey.Name)
				}
				tasks.TaskBase.Name = types.StringValue(tasksItem.TaskBase.Name)
				tasks.TaskBase.PhaseID = types.StringPointerValue(tasksItem.TaskBase.PhaseID)
				tasks.TaskBase.Requirements = []tfTypes.EnableRequirement{}

				for _, requirementsItem2 := range tasksItem.TaskBase.Requirements {
					var requirements2 tfTypes.EnableRequirement

					requirements2.PhaseID = types.StringPointerValue(requirementsItem2.PhaseID)
					requirements2.TaskID = types.StringPointerValue(requirementsItem2.TaskID)
					requirements2.When = types.StringValue(string(requirementsItem2.When))

					tasks.TaskBase.Requirements = append(tasks.TaskBase.Requirements, requirements2)
				}
				tasks.TaskBase.TaskType = types.StringValue(string(tasksItem.TaskBase.TaskType))
				tasks.TaskBase.Taxonomies = make([]types.String, 0, len(tasksItem.TaskBase.Taxonomies))
				for _, v := range tasksItem.TaskBase.Taxonomies {
					tasks.TaskBase.Taxonomies = append(tasks.TaskBase.Taxonomies, types.StringValue(v))
				}
			}

			r.Tasks = append(r.Tasks, tasks)
		}
		r.Taxonomies = make([]types.String, 0, len(resp.Taxonomies))
		for _, v := range resp.Taxonomies {
			r.Taxonomies = append(r.Taxonomies, types.StringValue(v))
		}
		if resp.Trigger != nil {
			r.Trigger = &tfTypes.Trigger{}
			if resp.Trigger.AutomationTrigger != nil {
				r.Trigger.AutomationTrigger = &tfTypes.AutomationTrigger{}
				r.Trigger.AutomationTrigger.AutomationID = types.StringValue(resp.Trigger.AutomationTrigger.AutomationID)
				r.Trigger.AutomationTrigger.ID = types.StringPointerValue(resp.Trigger.AutomationTrigger.ID)
				r.Trigger.AutomationTrigger.Type = types.StringValue(string(resp.Trigger.AutomationTrigger.Type))
			}
			if resp.Trigger.JourneySubmissionTrigger != nil {
				r.Trigger.JourneySubmissionTrigger = &tfTypes.JourneySubmissionTrigger{}
				r.Trigger.JourneySubmissionTrigger.AutomationID = types.StringPointerValue(resp.Trigger.JourneySubmissionTrigger.AutomationID)
				r.Trigger.JourneySubmissionTrigger.ID = types.StringPointerValue(resp.Trigger.JourneySubmissionTrigger.ID)
				r.Trigger.JourneySubmissionTrigger.JourneyID = types.StringValue(resp.Trigger.JourneySubmissionTrigger.JourneyID)
				r.Trigger.JourneySubmissionTrigger.Type = types.StringValue(string(resp.Trigger.JourneySubmissionTrigger.Type))
			}
			if resp.Trigger.ManualTrigger != nil {
				r.Trigger.ManualTrigger = &tfTypes.ManualTrigger{}
				r.Trigger.ManualTrigger.EntitySchema = types.StringPointerValue(resp.Trigger.ManualTrigger.EntitySchema)
				r.Trigger.ManualTrigger.ID = types.StringPointerValue(resp.Trigger.ManualTrigger.ID)
				r.Trigger.ManualTrigger.Type = types.StringValue(string(resp.Trigger.ManualTrigger.Type))
			}
		}
		r.UpdateEntityAttributes = []tfTypes.UpdateEntityAttributes{}

		for _, updateEntityAttributesItem := range resp.UpdateEntityAttributes {
			var updateEntityAttributes tfTypes.UpdateEntityAttributes

			updateEntityAttributes.Source = types.StringValue(string(updateEntityAttributesItem.Source))
			updateEntityAttributes.Target.EntityAttribute = types.StringValue(updateEntityAttributesItem.Target.EntityAttribute)
			updateEntityAttributes.Target.EntitySchema = types.StringValue(updateEntityAttributesItem.Target.EntitySchema)

			r.UpdateEntityAttributes = append(r.UpdateEntityAttributes, updateEntityAttributes)
		}
		r.UpdatedAt = types.StringPointerValue(resp.UpdatedAt)
	}

	return diags
}

func (r *FlowTemplateResourceModel) ToOperationsDeleteFlowTemplateRequest(ctx context.Context) (*operations.DeleteFlowTemplateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var flowID string
	flowID = r.ID.ValueString()

	out := operations.DeleteFlowTemplateRequest{
		FlowID: flowID,
	}

	return &out, diags
}

func (r *FlowTemplateResourceModel) ToOperationsGetFlowTemplateRequest(ctx context.Context) (*operations.GetFlowTemplateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var flowID string
	flowID = r.ID.ValueString()

	out := operations.GetFlowTemplateRequest{
		FlowID: flowID,
	}

	return &out, diags
}

func (r *FlowTemplateResourceModel) ToOperationsUpdateFlowTemplateRequest(ctx context.Context) (*operations.UpdateFlowTemplateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	flowTemplate, flowTemplateDiags := r.ToSharedFlowTemplateInput(ctx)
	diags.Append(flowTemplateDiags...)

	if diags.HasError() {
		return nil, diags
	}

	var flowID string
	flowID = r.ID.ValueString()

	out := operations.UpdateFlowTemplateRequest{
		FlowTemplate: *flowTemplate,
		FlowID:       flowID,
	}

	return &out, diags
}

func (r *FlowTemplateResourceModel) ToSharedCreateFlowTemplate(ctx context.Context) (*shared.CreateFlowTemplate, diag.Diagnostics) {
	var diags diag.Diagnostics

	assignedTo := make([]string, 0, len(r.AssignedTo))
	for _, assignedToItem := range r.AssignedTo {
		assignedTo = append(assignedTo, assignedToItem.ValueString())
	}
	availableInEcp := new(bool)
	if !r.AvailableInEcp.IsUnknown() && !r.AvailableInEcp.IsNull() {
		*availableInEcp = r.AvailableInEcp.ValueBool()
	} else {
		availableInEcp = nil
	}
	closingReasons := make([]shared.ClosingReasonID, 0, len(r.ClosingReasons))
	for _, closingReasonsItem := range r.ClosingReasons {
		var id string
		id = closingReasonsItem.ID.ValueString()

		closingReasons = append(closingReasons, shared.ClosingReasonID{
			ID: id,
		})
	}
	createdAt := new(string)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueString()
	} else {
		createdAt = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	dueDate := new(string)
	if !r.DueDate.IsUnknown() && !r.DueDate.IsNull() {
		*dueDate = r.DueDate.ValueString()
	} else {
		dueDate = nil
	}
	var dueDateConfig *shared.DueDateConfig
	if r.DueDateConfig != nil {
		var duration float64
		duration = r.DueDateConfig.Duration.ValueFloat64()

		phaseID := new(string)
		if !r.DueDateConfig.PhaseID.IsUnknown() && !r.DueDateConfig.PhaseID.IsNull() {
			*phaseID = r.DueDateConfig.PhaseID.ValueString()
		} else {
			phaseID = nil
		}
		taskID := new(string)
		if !r.DueDateConfig.TaskID.IsUnknown() && !r.DueDateConfig.TaskID.IsNull() {
			*taskID = r.DueDateConfig.TaskID.ValueString()
		} else {
			taskID = nil
		}
		typeVar := shared.DueDateConfigType(r.DueDateConfig.Type.ValueString())
		unit := shared.TimeUnit(r.DueDateConfig.Unit.ValueString())
		dueDateConfig = &shared.DueDateConfig{
			Duration: duration,
			PhaseID:  phaseID,
			TaskID:   taskID,
			Type:     typeVar,
			Unit:     unit,
		}
	}
	edges := make([]shared.Edge, 0, len(r.Edges))
	for _, edgesItem := range r.Edges {
		conditionID := new(string)
		if !edgesItem.ConditionID.IsUnknown() && !edgesItem.ConditionID.IsNull() {
			*conditionID = edgesItem.ConditionID.ValueString()
		} else {
			conditionID = nil
		}
		var fromID string
		fromID = edgesItem.FromID.ValueString()

		var id1 string
		id1 = edgesItem.ID.ValueString()

		noneMet := new(bool)
		if !edgesItem.NoneMet.IsUnknown() && !edgesItem.NoneMet.IsNull() {
			*noneMet = edgesItem.NoneMet.ValueBool()
		} else {
			noneMet = nil
		}
		var toID string
		toID = edgesItem.ToID.ValueString()

		edges = append(edges, shared.Edge{
			ConditionID: conditionID,
			FromID:      fromID,
			ID:          id1,
			NoneMet:     noneMet,
			ToID:        toID,
		})
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id2 := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id2 = r.ID.ValueString()
	} else {
		id2 = nil
	}
	isFlowMigrated := new(bool)
	if !r.IsFlowMigrated.IsUnknown() && !r.IsFlowMigrated.IsNull() {
		*isFlowMigrated = r.IsFlowMigrated.ValueBool()
	} else {
		isFlowMigrated = nil
	}
	var name string
	name = r.Name.ValueString()

	orgID := new(string)
	if !r.OrgID.IsUnknown() && !r.OrgID.IsNull() {
		*orgID = r.OrgID.ValueString()
	} else {
		orgID = nil
	}
	phases := make([]shared.Phase, 0, len(r.Phases))
	for _, phasesItem := range r.Phases {
		assignedTo1 := make([]string, 0, len(phasesItem.AssignedTo))
		for _, assignedToItem1 := range phasesItem.AssignedTo {
			assignedTo1 = append(assignedTo1, assignedToItem1.ValueString())
		}
		dueDate1 := new(string)
		if !phasesItem.DueDate.IsUnknown() && !phasesItem.DueDate.IsNull() {
			*dueDate1 = phasesItem.DueDate.ValueString()
		} else {
			dueDate1 = nil
		}
		var dueDateConfig1 *shared.DueDateConfig
		if phasesItem.DueDateConfig != nil {
			var duration1 float64
			duration1 = phasesItem.DueDateConfig.Duration.ValueFloat64()

			phaseId1 := new(string)
			if !phasesItem.DueDateConfig.PhaseID.IsUnknown() && !phasesItem.DueDateConfig.PhaseID.IsNull() {
				*phaseId1 = phasesItem.DueDateConfig.PhaseID.ValueString()
			} else {
				phaseId1 = nil
			}
			taskId1 := new(string)
			if !phasesItem.DueDateConfig.TaskID.IsUnknown() && !phasesItem.DueDateConfig.TaskID.IsNull() {
				*taskId1 = phasesItem.DueDateConfig.TaskID.ValueString()
			} else {
				taskId1 = nil
			}
			typeVar1 := shared.DueDateConfigType(phasesItem.DueDateConfig.Type.ValueString())
			unit1 := shared.TimeUnit(phasesItem.DueDateConfig.Unit.ValueString())
			dueDateConfig1 = &shared.DueDateConfig{
				Duration: duration1,
				PhaseID:  phaseId1,
				TaskID:   taskId1,
				Type:     typeVar1,
				Unit:     unit1,
			}
		}
		var id3 string
		id3 = phasesItem.ID.ValueString()

		var name1 string
		name1 = phasesItem.Name.ValueString()

		taxonomies := make([]string, 0, len(phasesItem.Taxonomies))
		for _, taxonomiesItem := range phasesItem.Taxonomies {
			taxonomies = append(taxonomies, taxonomiesItem.ValueString())
		}
		phases = append(phases, shared.Phase{
			AssignedTo:    assignedTo1,
			DueDate:       dueDate1,
			DueDateConfig: dueDateConfig1,
			ID:            id3,
			Name:          name1,
			Taxonomies:    taxonomies,
		})
	}
	tasks := make([]shared.Task, 0, len(r.Tasks))
	for _, tasksItem := range r.Tasks {
		if tasksItem.TaskBase != nil {
			assignedTo2 := make([]string, 0, len(tasksItem.TaskBase.AssignedTo))
			for _, assignedToItem2 := range tasksItem.TaskBase.AssignedTo {
				assignedTo2 = append(assignedTo2, assignedToItem2.ValueString())
			}
			var description1 *shared.StepDescription
			if tasksItem.TaskBase.Description != nil {
				enabled1 := new(bool)
				if !tasksItem.TaskBase.Description.Enabled.IsUnknown() && !tasksItem.TaskBase.Description.Enabled.IsNull() {
					*enabled1 = tasksItem.TaskBase.Description.Enabled.ValueBool()
				} else {
					enabled1 = nil
				}
				value := new(string)
				if !tasksItem.TaskBase.Description.Value.IsUnknown() && !tasksItem.TaskBase.Description.Value.IsNull() {
					*value = tasksItem.TaskBase.Description.Value.ValueString()
				} else {
					value = nil
				}
				description1 = &shared.StepDescription{
					Enabled: enabled1,
					Value:   value,
				}
			}
			dueDate2 := new(string)
			if !tasksItem.TaskBase.DueDate.IsUnknown() && !tasksItem.TaskBase.DueDate.IsNull() {
				*dueDate2 = tasksItem.TaskBase.DueDate.ValueString()
			} else {
				dueDate2 = nil
			}
			var dueDateConfig2 *shared.DueDateConfig
			if tasksItem.TaskBase.DueDateConfig != nil {
				var duration2 float64
				duration2 = tasksItem.TaskBase.DueDateConfig.Duration.ValueFloat64()

				phaseId2 := new(string)
				if !tasksItem.TaskBase.DueDateConfig.PhaseID.IsUnknown() && !tasksItem.TaskBase.DueDateConfig.PhaseID.IsNull() {
					*phaseId2 = tasksItem.TaskBase.DueDateConfig.PhaseID.ValueString()
				} else {
					phaseId2 = nil
				}
				taskId2 := new(string)
				if !tasksItem.TaskBase.DueDateConfig.TaskID.IsUnknown() && !tasksItem.TaskBase.DueDateConfig.TaskID.IsNull() {
					*taskId2 = tasksItem.TaskBase.DueDateConfig.TaskID.ValueString()
				} else {
					taskId2 = nil
				}
				typeVar2 := shared.DueDateConfigType(tasksItem.TaskBase.DueDateConfig.Type.ValueString())
				unit2 := shared.TimeUnit(tasksItem.TaskBase.DueDateConfig.Unit.ValueString())
				dueDateConfig2 = &shared.DueDateConfig{
					Duration: duration2,
					PhaseID:  phaseId2,
					TaskID:   taskId2,
					Type:     typeVar2,
					Unit:     unit2,
				}
			}
			var ecp *shared.ECPDetails
			if tasksItem.TaskBase.Ecp != nil {
				description2 := new(string)
				if !tasksItem.TaskBase.Ecp.Description.IsUnknown() && !tasksItem.TaskBase.Ecp.Description.IsNull() {
					*description2 = tasksItem.TaskBase.Ecp.Description.ValueString()
				} else {
					description2 = nil
				}
				enabled2 := new(bool)
				if !tasksItem.TaskBase.Ecp.Enabled.IsUnknown() && !tasksItem.TaskBase.Ecp.Enabled.IsNull() {
					*enabled2 = tasksItem.TaskBase.Ecp.Enabled.ValueBool()
				} else {
					enabled2 = nil
				}
				var journey *shared.StepJourney
				if tasksItem.TaskBase.Ecp.Journey != nil {
					id4 := new(string)
					if !tasksItem.TaskBase.Ecp.Journey.ID.IsUnknown() && !tasksItem.TaskBase.Ecp.Journey.ID.IsNull() {
						*id4 = tasksItem.TaskBase.Ecp.Journey.ID.ValueString()
					} else {
						id4 = nil
					}
					journeyID := new(string)
					if !tasksItem.TaskBase.Ecp.Journey.JourneyID.IsUnknown() && !tasksItem.TaskBase.Ecp.Journey.JourneyID.IsNull() {
						*journeyID = tasksItem.TaskBase.Ecp.Journey.JourneyID.ValueString()
					} else {
						journeyID = nil
					}
					name2 := new(string)
					if !tasksItem.TaskBase.Ecp.Journey.Name.IsUnknown() && !tasksItem.TaskBase.Ecp.Journey.Name.IsNull() {
						*name2 = tasksItem.TaskBase.Ecp.Journey.Name.ValueString()
					} else {
						name2 = nil
					}
					journey = &shared.StepJourney{
						ID:        id4,
						JourneyID: journeyID,
						Name:      name2,
					}
				}
				label := new(string)
				if !tasksItem.TaskBase.Ecp.Label.IsUnknown() && !tasksItem.TaskBase.Ecp.Label.IsNull() {
					*label = tasksItem.TaskBase.Ecp.Label.ValueString()
				} else {
					label = nil
				}
				ecp = &shared.ECPDetails{
					Description: description2,
					Enabled:     enabled2,
					Journey:     journey,
					Label:       label,
				}
			}
			var id5 string
			id5 = tasksItem.TaskBase.ID.ValueString()

			var installer *shared.ECPDetails
			if tasksItem.TaskBase.Installer != nil {
				description3 := new(string)
				if !tasksItem.TaskBase.Installer.Description.IsUnknown() && !tasksItem.TaskBase.Installer.Description.IsNull() {
					*description3 = tasksItem.TaskBase.Installer.Description.ValueString()
				} else {
					description3 = nil
				}
				enabled3 := new(bool)
				if !tasksItem.TaskBase.Installer.Enabled.IsUnknown() && !tasksItem.TaskBase.Installer.Enabled.IsNull() {
					*enabled3 = tasksItem.TaskBase.Installer.Enabled.ValueBool()
				} else {
					enabled3 = nil
				}
				var journey1 *shared.StepJourney
				if tasksItem.TaskBase.Installer.Journey != nil {
					id6 := new(string)
					if !tasksItem.TaskBase.Installer.Journey.ID.IsUnknown() && !tasksItem.TaskBase.Installer.Journey.ID.IsNull() {
						*id6 = tasksItem.TaskBase.Installer.Journey.ID.ValueString()
					} else {
						id6 = nil
					}
					journeyId1 := new(string)
					if !tasksItem.TaskBase.Installer.Journey.JourneyID.IsUnknown() && !tasksItem.TaskBase.Installer.Journey.JourneyID.IsNull() {
						*journeyId1 = tasksItem.TaskBase.Installer.Journey.JourneyID.ValueString()
					} else {
						journeyId1 = nil
					}
					name3 := new(string)
					if !tasksItem.TaskBase.Installer.Journey.Name.IsUnknown() && !tasksItem.TaskBase.Installer.Journey.Name.IsNull() {
						*name3 = tasksItem.TaskBase.Installer.Journey.Name.ValueString()
					} else {
						name3 = nil
					}
					journey1 = &shared.StepJourney{
						ID:        id6,
						JourneyID: journeyId1,
						Name:      name3,
					}
				}
				label1 := new(string)
				if !tasksItem.TaskBase.Installer.Label.IsUnknown() && !tasksItem.TaskBase.Installer.Label.IsNull() {
					*label1 = tasksItem.TaskBase.Installer.Label.ValueString()
				} else {
					label1 = nil
				}
				installer = &shared.ECPDetails{
					Description: description3,
					Enabled:     enabled3,
					Journey:     journey1,
					Label:       label1,
				}
			}
			var journey2 *shared.StepJourney
			if tasksItem.TaskBase.Journey != nil {
				id7 := new(string)
				if !tasksItem.TaskBase.Journey.ID.IsUnknown() && !tasksItem.TaskBase.Journey.ID.IsNull() {
					*id7 = tasksItem.TaskBase.Journey.ID.ValueString()
				} else {
					id7 = nil
				}
				journeyId2 := new(string)
				if !tasksItem.TaskBase.Journey.JourneyID.IsUnknown() && !tasksItem.TaskBase.Journey.JourneyID.IsNull() {
					*journeyId2 = tasksItem.TaskBase.Journey.JourneyID.ValueString()
				} else {
					journeyId2 = nil
				}
				name4 := new(string)
				if !tasksItem.TaskBase.Journey.Name.IsUnknown() && !tasksItem.TaskBase.Journey.Name.IsNull() {
					*name4 = tasksItem.TaskBase.Journey.Name.ValueString()
				} else {
					name4 = nil
				}
				journey2 = &shared.StepJourney{
					ID:        id7,
					JourneyID: journeyId2,
					Name:      name4,
				}
			}
			var name5 string
			name5 = tasksItem.TaskBase.Name.ValueString()

			phaseId3 := new(string)
			if !tasksItem.TaskBase.PhaseID.IsUnknown() && !tasksItem.TaskBase.PhaseID.IsNull() {
				*phaseId3 = tasksItem.TaskBase.PhaseID.ValueString()
			} else {
				phaseId3 = nil
			}
			requirements := make([]shared.EnableRequirement, 0, len(tasksItem.TaskBase.Requirements))
			for _, requirementsItem := range tasksItem.TaskBase.Requirements {
				phaseId4 := new(string)
				if !requirementsItem.PhaseID.IsUnknown() && !requirementsItem.PhaseID.IsNull() {
					*phaseId4 = requirementsItem.PhaseID.ValueString()
				} else {
					phaseId4 = nil
				}
				taskId3 := new(string)
				if !requirementsItem.TaskID.IsUnknown() && !requirementsItem.TaskID.IsNull() {
					*taskId3 = requirementsItem.TaskID.ValueString()
				} else {
					taskId3 = nil
				}
				when := shared.When(requirementsItem.When.ValueString())
				requirements = append(requirements, shared.EnableRequirement{
					PhaseID: phaseId4,
					TaskID:  taskId3,
					When:    when,
				})
			}
			taskType := shared.TaskType(tasksItem.TaskBase.TaskType.ValueString())
			taxonomies1 := make([]string, 0, len(tasksItem.TaskBase.Taxonomies))
			for _, taxonomiesItem1 := range tasksItem.TaskBase.Taxonomies {
				taxonomies1 = append(taxonomies1, taxonomiesItem1.ValueString())
			}
			taskBase := shared.TaskBase{
				AssignedTo:    assignedTo2,
				Description:   description1,
				DueDate:       dueDate2,
				DueDateConfig: dueDateConfig2,
				Ecp:           ecp,
				ID:            id5,
				Installer:     installer,
				Journey:       journey2,
				Name:          name5,
				PhaseID:       phaseId3,
				Requirements:  requirements,
				TaskType:      taskType,
				Taxonomies:    taxonomies1,
			}
			tasks = append(tasks, shared.Task{
				TaskBase: &taskBase,
			})
		}
		if tasksItem.AutomationTask != nil {
			assignedTo3 := make([]string, 0, len(tasksItem.AutomationTask.AssignedTo))
			for _, assignedToItem3 := range tasksItem.AutomationTask.AssignedTo {
				assignedTo3 = append(assignedTo3, assignedToItem3.ValueString())
			}
			var flowID string
			flowID = tasksItem.AutomationTask.AutomationConfig.FlowID.ValueString()

			automationConfig := shared.AutomationConfig{
				FlowID: flowID,
			}
			var description4 *shared.StepDescription
			if tasksItem.AutomationTask.Description != nil {
				enabled4 := new(bool)
				if !tasksItem.AutomationTask.Description.Enabled.IsUnknown() && !tasksItem.AutomationTask.Description.Enabled.IsNull() {
					*enabled4 = tasksItem.AutomationTask.Description.Enabled.ValueBool()
				} else {
					enabled4 = nil
				}
				value1 := new(string)
				if !tasksItem.AutomationTask.Description.Value.IsUnknown() && !tasksItem.AutomationTask.Description.Value.IsNull() {
					*value1 = tasksItem.AutomationTask.Description.Value.ValueString()
				} else {
					value1 = nil
				}
				description4 = &shared.StepDescription{
					Enabled: enabled4,
					Value:   value1,
				}
			}
			dueDate3 := new(string)
			if !tasksItem.AutomationTask.DueDate.IsUnknown() && !tasksItem.AutomationTask.DueDate.IsNull() {
				*dueDate3 = tasksItem.AutomationTask.DueDate.ValueString()
			} else {
				dueDate3 = nil
			}
			var dueDateConfig3 *shared.DueDateConfig
			if tasksItem.AutomationTask.DueDateConfig != nil {
				var duration3 float64
				duration3 = tasksItem.AutomationTask.DueDateConfig.Duration.ValueFloat64()

				phaseId5 := new(string)
				if !tasksItem.AutomationTask.DueDateConfig.PhaseID.IsUnknown() && !tasksItem.AutomationTask.DueDateConfig.PhaseID.IsNull() {
					*phaseId5 = tasksItem.AutomationTask.DueDateConfig.PhaseID.ValueString()
				} else {
					phaseId5 = nil
				}
				taskId4 := new(string)
				if !tasksItem.AutomationTask.DueDateConfig.TaskID.IsUnknown() && !tasksItem.AutomationTask.DueDateConfig.TaskID.IsNull() {
					*taskId4 = tasksItem.AutomationTask.DueDateConfig.TaskID.ValueString()
				} else {
					taskId4 = nil
				}
				typeVar3 := shared.DueDateConfigType(tasksItem.AutomationTask.DueDateConfig.Type.ValueString())
				unit3 := shared.TimeUnit(tasksItem.AutomationTask.DueDateConfig.Unit.ValueString())
				dueDateConfig3 = &shared.DueDateConfig{
					Duration: duration3,
					PhaseID:  phaseId5,
					TaskID:   taskId4,
					Type:     typeVar3,
					Unit:     unit3,
				}
			}
			var ecp1 *shared.ECPDetails
			if tasksItem.AutomationTask.Ecp != nil {
				description5 := new(string)
				if !tasksItem.AutomationTask.Ecp.Description.IsUnknown() && !tasksItem.AutomationTask.Ecp.Description.IsNull() {
					*description5 = tasksItem.AutomationTask.Ecp.Description.ValueString()
				} else {
					description5 = nil
				}
				enabled5 := new(bool)
				if !tasksItem.AutomationTask.Ecp.Enabled.IsUnknown() && !tasksItem.AutomationTask.Ecp.Enabled.IsNull() {
					*enabled5 = tasksItem.AutomationTask.Ecp.Enabled.ValueBool()
				} else {
					enabled5 = nil
				}
				var journey3 *shared.StepJourney
				if tasksItem.AutomationTask.Ecp.Journey != nil {
					id8 := new(string)
					if !tasksItem.AutomationTask.Ecp.Journey.ID.IsUnknown() && !tasksItem.AutomationTask.Ecp.Journey.ID.IsNull() {
						*id8 = tasksItem.AutomationTask.Ecp.Journey.ID.ValueString()
					} else {
						id8 = nil
					}
					journeyId3 := new(string)
					if !tasksItem.AutomationTask.Ecp.Journey.JourneyID.IsUnknown() && !tasksItem.AutomationTask.Ecp.Journey.JourneyID.IsNull() {
						*journeyId3 = tasksItem.AutomationTask.Ecp.Journey.JourneyID.ValueString()
					} else {
						journeyId3 = nil
					}
					name6 := new(string)
					if !tasksItem.AutomationTask.Ecp.Journey.Name.IsUnknown() && !tasksItem.AutomationTask.Ecp.Journey.Name.IsNull() {
						*name6 = tasksItem.AutomationTask.Ecp.Journey.Name.ValueString()
					} else {
						name6 = nil
					}
					journey3 = &shared.StepJourney{
						ID:        id8,
						JourneyID: journeyId3,
						Name:      name6,
					}
				}
				label2 := new(string)
				if !tasksItem.AutomationTask.Ecp.Label.IsUnknown() && !tasksItem.AutomationTask.Ecp.Label.IsNull() {
					*label2 = tasksItem.AutomationTask.Ecp.Label.ValueString()
				} else {
					label2 = nil
				}
				ecp1 = &shared.ECPDetails{
					Description: description5,
					Enabled:     enabled5,
					Journey:     journey3,
					Label:       label2,
				}
			}
			var id9 string
			id9 = tasksItem.AutomationTask.ID.ValueString()

			var installer1 *shared.ECPDetails
			if tasksItem.AutomationTask.Installer != nil {
				description6 := new(string)
				if !tasksItem.AutomationTask.Installer.Description.IsUnknown() && !tasksItem.AutomationTask.Installer.Description.IsNull() {
					*description6 = tasksItem.AutomationTask.Installer.Description.ValueString()
				} else {
					description6 = nil
				}
				enabled6 := new(bool)
				if !tasksItem.AutomationTask.Installer.Enabled.IsUnknown() && !tasksItem.AutomationTask.Installer.Enabled.IsNull() {
					*enabled6 = tasksItem.AutomationTask.Installer.Enabled.ValueBool()
				} else {
					enabled6 = nil
				}
				var journey4 *shared.StepJourney
				if tasksItem.AutomationTask.Installer.Journey != nil {
					id10 := new(string)
					if !tasksItem.AutomationTask.Installer.Journey.ID.IsUnknown() && !tasksItem.AutomationTask.Installer.Journey.ID.IsNull() {
						*id10 = tasksItem.AutomationTask.Installer.Journey.ID.ValueString()
					} else {
						id10 = nil
					}
					journeyId4 := new(string)
					if !tasksItem.AutomationTask.Installer.Journey.JourneyID.IsUnknown() && !tasksItem.AutomationTask.Installer.Journey.JourneyID.IsNull() {
						*journeyId4 = tasksItem.AutomationTask.Installer.Journey.JourneyID.ValueString()
					} else {
						journeyId4 = nil
					}
					name7 := new(string)
					if !tasksItem.AutomationTask.Installer.Journey.Name.IsUnknown() && !tasksItem.AutomationTask.Installer.Journey.Name.IsNull() {
						*name7 = tasksItem.AutomationTask.Installer.Journey.Name.ValueString()
					} else {
						name7 = nil
					}
					journey4 = &shared.StepJourney{
						ID:        id10,
						JourneyID: journeyId4,
						Name:      name7,
					}
				}
				label3 := new(string)
				if !tasksItem.AutomationTask.Installer.Label.IsUnknown() && !tasksItem.AutomationTask.Installer.Label.IsNull() {
					*label3 = tasksItem.AutomationTask.Installer.Label.ValueString()
				} else {
					label3 = nil
				}
				installer1 = &shared.ECPDetails{
					Description: description6,
					Enabled:     enabled6,
					Journey:     journey4,
					Label:       label3,
				}
			}
			var journey5 *shared.StepJourney
			if tasksItem.AutomationTask.Journey != nil {
				id11 := new(string)
				if !tasksItem.AutomationTask.Journey.ID.IsUnknown() && !tasksItem.AutomationTask.Journey.ID.IsNull() {
					*id11 = tasksItem.AutomationTask.Journey.ID.ValueString()
				} else {
					id11 = nil
				}
				journeyId5 := new(string)
				if !tasksItem.AutomationTask.Journey.JourneyID.IsUnknown() && !tasksItem.AutomationTask.Journey.JourneyID.IsNull() {
					*journeyId5 = tasksItem.AutomationTask.Journey.JourneyID.ValueString()
				} else {
					journeyId5 = nil
				}
				name8 := new(string)
				if !tasksItem.AutomationTask.Journey.Name.IsUnknown() && !tasksItem.AutomationTask.Journey.Name.IsNull() {
					*name8 = tasksItem.AutomationTask.Journey.Name.ValueString()
				} else {
					name8 = nil
				}
				journey5 = &shared.StepJourney{
					ID:        id11,
					JourneyID: journeyId5,
					Name:      name8,
				}
			}
			var name9 string
			name9 = tasksItem.AutomationTask.Name.ValueString()

			phaseId6 := new(string)
			if !tasksItem.AutomationTask.PhaseID.IsUnknown() && !tasksItem.AutomationTask.PhaseID.IsNull() {
				*phaseId6 = tasksItem.AutomationTask.PhaseID.ValueString()
			} else {
				phaseId6 = nil
			}
			requirements1 := make([]shared.EnableRequirement, 0, len(tasksItem.AutomationTask.Requirements))
			for _, requirementsItem1 := range tasksItem.AutomationTask.Requirements {
				phaseId7 := new(string)
				if !requirementsItem1.PhaseID.IsUnknown() && !requirementsItem1.PhaseID.IsNull() {
					*phaseId7 = requirementsItem1.PhaseID.ValueString()
				} else {
					phaseId7 = nil
				}
				taskId5 := new(string)
				if !requirementsItem1.TaskID.IsUnknown() && !requirementsItem1.TaskID.IsNull() {
					*taskId5 = requirementsItem1.TaskID.ValueString()
				} else {
					taskId5 = nil
				}
				when1 := shared.When(requirementsItem1.When.ValueString())
				requirements1 = append(requirements1, shared.EnableRequirement{
					PhaseID: phaseId7,
					TaskID:  taskId5,
					When:    when1,
				})
			}
			var schedule *shared.ActionSchedule
			if tasksItem.AutomationTask.Schedule != nil {
				var immediateSchedule *shared.ImmediateSchedule
				if tasksItem.AutomationTask.Schedule.ImmediateSchedule != nil {
					mode := new(shared.ImmediateScheduleMode)
					if !tasksItem.AutomationTask.Schedule.ImmediateSchedule.Mode.IsUnknown() && !tasksItem.AutomationTask.Schedule.ImmediateSchedule.Mode.IsNull() {
						*mode = shared.ImmediateScheduleMode(tasksItem.AutomationTask.Schedule.ImmediateSchedule.Mode.ValueString())
					} else {
						mode = nil
					}
					immediateSchedule = &shared.ImmediateSchedule{
						Mode: mode,
					}
				}
				if immediateSchedule != nil {
					schedule = &shared.ActionSchedule{
						ImmediateSchedule: immediateSchedule,
					}
				}
				var delayedSchedule *shared.DelayedSchedule
				if tasksItem.AutomationTask.Schedule.DelayedSchedule != nil {
					var duration4 float64
					duration4 = tasksItem.AutomationTask.Schedule.DelayedSchedule.Duration.ValueFloat64()

					mode1 := shared.Mode(tasksItem.AutomationTask.Schedule.DelayedSchedule.Mode.ValueString())
					unit4 := shared.TimeUnit(tasksItem.AutomationTask.Schedule.DelayedSchedule.Unit.ValueString())
					delayedSchedule = &shared.DelayedSchedule{
						Duration: duration4,
						Mode:     mode1,
						Unit:     unit4,
					}
				}
				if delayedSchedule != nil {
					schedule = &shared.ActionSchedule{
						DelayedSchedule: delayedSchedule,
					}
				}
				var relativeSchedule *shared.RelativeSchedule
				if tasksItem.AutomationTask.Schedule.RelativeSchedule != nil {
					direction := shared.Direction(tasksItem.AutomationTask.Schedule.RelativeSchedule.Direction.ValueString())
					var duration5 float64
					duration5 = tasksItem.AutomationTask.Schedule.RelativeSchedule.Duration.ValueFloat64()

					mode2 := shared.RelativeScheduleMode(tasksItem.AutomationTask.Schedule.RelativeSchedule.Mode.ValueString())
					attribute := new(string)
					if !tasksItem.AutomationTask.Schedule.RelativeSchedule.Reference.Attribute.IsUnknown() && !tasksItem.AutomationTask.Schedule.RelativeSchedule.Reference.Attribute.IsNull() {
						*attribute = tasksItem.AutomationTask.Schedule.RelativeSchedule.Reference.Attribute.ValueString()
					} else {
						attribute = nil
					}
					var id12 string
					id12 = tasksItem.AutomationTask.Schedule.RelativeSchedule.Reference.ID.ValueString()

					origin := shared.RelativeScheduleOrigin(tasksItem.AutomationTask.Schedule.RelativeSchedule.Reference.Origin.ValueString())
					schema := new(string)
					if !tasksItem.AutomationTask.Schedule.RelativeSchedule.Reference.Schema.IsUnknown() && !tasksItem.AutomationTask.Schedule.RelativeSchedule.Reference.Schema.IsNull() {
						*schema = tasksItem.AutomationTask.Schedule.RelativeSchedule.Reference.Schema.ValueString()
					} else {
						schema = nil
					}
					reference := shared.Reference{
						Attribute: attribute,
						ID:        id12,
						Origin:    origin,
						Schema:    schema,
					}
					unit5 := shared.TimeUnit(tasksItem.AutomationTask.Schedule.RelativeSchedule.Unit.ValueString())
					relativeSchedule = &shared.RelativeSchedule{
						Direction: direction,
						Duration:  duration5,
						Mode:      mode2,
						Reference: reference,
						Unit:      unit5,
					}
				}
				if relativeSchedule != nil {
					schedule = &shared.ActionSchedule{
						RelativeSchedule: relativeSchedule,
					}
				}
			}
			taskType1 := shared.TaskType(tasksItem.AutomationTask.TaskType.ValueString())
			taxonomies2 := make([]string, 0, len(tasksItem.AutomationTask.Taxonomies))
			for _, taxonomiesItem2 := range tasksItem.AutomationTask.Taxonomies {
				taxonomies2 = append(taxonomies2, taxonomiesItem2.ValueString())
			}
			triggerMode := new(shared.TriggerMode)
			if !tasksItem.AutomationTask.TriggerMode.IsUnknown() && !tasksItem.AutomationTask.TriggerMode.IsNull() {
				*triggerMode = shared.TriggerMode(tasksItem.AutomationTask.TriggerMode.ValueString())
			} else {
				triggerMode = nil
			}
			automationTask := shared.AutomationTask{
				AssignedTo:       assignedTo3,
				AutomationConfig: automationConfig,
				Description:      description4,
				DueDate:          dueDate3,
				DueDateConfig:    dueDateConfig3,
				Ecp:              ecp1,
				ID:               id9,
				Installer:        installer1,
				Journey:          journey5,
				Name:             name9,
				PhaseID:          phaseId6,
				Requirements:     requirements1,
				Schedule:         schedule,
				TaskType:         taskType1,
				Taxonomies:       taxonomies2,
				TriggerMode:      triggerMode,
			}
			tasks = append(tasks, shared.Task{
				AutomationTask: &automationTask,
			})
		}
		if tasksItem.DecisionTask != nil {
			assignedTo4 := make([]string, 0, len(tasksItem.DecisionTask.AssignedTo))
			for _, assignedToItem4 := range tasksItem.DecisionTask.AssignedTo {
				assignedTo4 = append(assignedTo4, assignedToItem4.ValueString())
			}
			conditions := make([]shared.Condition, 0, len(tasksItem.DecisionTask.Conditions))
			for _, conditionsItem := range tasksItem.DecisionTask.Conditions {
				var branchName string
				branchName = conditionsItem.BranchName.ValueString()

				var id13 string
				id13 = conditionsItem.ID.ValueString()

				logicalOperator := shared.LogicalOperator(conditionsItem.LogicalOperator.ValueString())
				statements := make([]shared.Statement, 0, len(conditionsItem.Statements))
				for _, statementsItem := range conditionsItem.Statements {
					var id14 string
					id14 = statementsItem.ID.ValueString()

					operator := shared.Operator(statementsItem.Operator.ValueString())
					attribute1 := new(string)
					if !statementsItem.Source.Attribute.IsUnknown() && !statementsItem.Source.Attribute.IsNull() {
						*attribute1 = statementsItem.Source.Attribute.ValueString()
					} else {
						attribute1 = nil
					}
					attributeOperation := new(shared.AttributeOperation)
					if !statementsItem.Source.AttributeOperation.IsUnknown() && !statementsItem.Source.AttributeOperation.IsNull() {
						*attributeOperation = shared.AttributeOperation(statementsItem.Source.AttributeOperation.ValueString())
					} else {
						attributeOperation = nil
					}
					attributeRepeatable := new(bool)
					if !statementsItem.Source.AttributeRepeatable.IsUnknown() && !statementsItem.Source.AttributeRepeatable.IsNull() {
						*attributeRepeatable = statementsItem.Source.AttributeRepeatable.ValueBool()
					} else {
						attributeRepeatable = nil
					}
					attributeType := new(shared.AttributeType)
					if !statementsItem.Source.AttributeType.IsUnknown() && !statementsItem.Source.AttributeType.IsNull() {
						*attributeType = shared.AttributeType(statementsItem.Source.AttributeType.ValueString())
					} else {
						attributeType = nil
					}
					id15 := new(string)
					if !statementsItem.Source.ID.IsUnknown() && !statementsItem.Source.ID.IsNull() {
						*id15 = statementsItem.Source.ID.ValueString()
					} else {
						id15 = nil
					}
					origin1 := new(shared.Origin)
					if !statementsItem.Source.Origin.IsUnknown() && !statementsItem.Source.Origin.IsNull() {
						*origin1 = shared.Origin(statementsItem.Source.Origin.ValueString())
					} else {
						origin1 = nil
					}
					originType := new(shared.OriginType)
					if !statementsItem.Source.OriginType.IsUnknown() && !statementsItem.Source.OriginType.IsNull() {
						*originType = shared.OriginType(statementsItem.Source.OriginType.ValueString())
					} else {
						originType = nil
					}
					schema1 := new(string)
					if !statementsItem.Source.Schema.IsUnknown() && !statementsItem.Source.Schema.IsNull() {
						*schema1 = statementsItem.Source.Schema.ValueString()
					} else {
						schema1 = nil
					}
					source := shared.EvaluationSource{
						Attribute:           attribute1,
						AttributeOperation:  attributeOperation,
						AttributeRepeatable: attributeRepeatable,
						AttributeType:       attributeType,
						ID:                  id15,
						Origin:              origin1,
						OriginType:          originType,
						Schema:              schema1,
					}
					values := make([]string, 0, len(statementsItem.Values))
					for _, valuesItem := range statementsItem.Values {
						values = append(values, valuesItem.ValueString())
					}
					statements = append(statements, shared.Statement{
						ID:       id14,
						Operator: operator,
						Source:   source,
						Values:   values,
					})
				}
				conditions = append(conditions, shared.Condition{
					BranchName:      branchName,
					ID:              id13,
					LogicalOperator: logicalOperator,
					Statements:      statements,
				})
			}
			var description7 *shared.StepDescription
			if tasksItem.DecisionTask.Description != nil {
				enabled7 := new(bool)
				if !tasksItem.DecisionTask.Description.Enabled.IsUnknown() && !tasksItem.DecisionTask.Description.Enabled.IsNull() {
					*enabled7 = tasksItem.DecisionTask.Description.Enabled.ValueBool()
				} else {
					enabled7 = nil
				}
				value2 := new(string)
				if !tasksItem.DecisionTask.Description.Value.IsUnknown() && !tasksItem.DecisionTask.Description.Value.IsNull() {
					*value2 = tasksItem.DecisionTask.Description.Value.ValueString()
				} else {
					value2 = nil
				}
				description7 = &shared.StepDescription{
					Enabled: enabled7,
					Value:   value2,
				}
			}
			dueDate4 := new(string)
			if !tasksItem.DecisionTask.DueDate.IsUnknown() && !tasksItem.DecisionTask.DueDate.IsNull() {
				*dueDate4 = tasksItem.DecisionTask.DueDate.ValueString()
			} else {
				dueDate4 = nil
			}
			var dueDateConfig4 *shared.DueDateConfig
			if tasksItem.DecisionTask.DueDateConfig != nil {
				var duration6 float64
				duration6 = tasksItem.DecisionTask.DueDateConfig.Duration.ValueFloat64()

				phaseId8 := new(string)
				if !tasksItem.DecisionTask.DueDateConfig.PhaseID.IsUnknown() && !tasksItem.DecisionTask.DueDateConfig.PhaseID.IsNull() {
					*phaseId8 = tasksItem.DecisionTask.DueDateConfig.PhaseID.ValueString()
				} else {
					phaseId8 = nil
				}
				taskId6 := new(string)
				if !tasksItem.DecisionTask.DueDateConfig.TaskID.IsUnknown() && !tasksItem.DecisionTask.DueDateConfig.TaskID.IsNull() {
					*taskId6 = tasksItem.DecisionTask.DueDateConfig.TaskID.ValueString()
				} else {
					taskId6 = nil
				}
				typeVar4 := shared.DueDateConfigType(tasksItem.DecisionTask.DueDateConfig.Type.ValueString())
				unit6 := shared.TimeUnit(tasksItem.DecisionTask.DueDateConfig.Unit.ValueString())
				dueDateConfig4 = &shared.DueDateConfig{
					Duration: duration6,
					PhaseID:  phaseId8,
					TaskID:   taskId6,
					Type:     typeVar4,
					Unit:     unit6,
				}
			}
			var ecp2 *shared.ECPDetails
			if tasksItem.DecisionTask.Ecp != nil {
				description8 := new(string)
				if !tasksItem.DecisionTask.Ecp.Description.IsUnknown() && !tasksItem.DecisionTask.Ecp.Description.IsNull() {
					*description8 = tasksItem.DecisionTask.Ecp.Description.ValueString()
				} else {
					description8 = nil
				}
				enabled8 := new(bool)
				if !tasksItem.DecisionTask.Ecp.Enabled.IsUnknown() && !tasksItem.DecisionTask.Ecp.Enabled.IsNull() {
					*enabled8 = tasksItem.DecisionTask.Ecp.Enabled.ValueBool()
				} else {
					enabled8 = nil
				}
				var journey6 *shared.StepJourney
				if tasksItem.DecisionTask.Ecp.Journey != nil {
					id16 := new(string)
					if !tasksItem.DecisionTask.Ecp.Journey.ID.IsUnknown() && !tasksItem.DecisionTask.Ecp.Journey.ID.IsNull() {
						*id16 = tasksItem.DecisionTask.Ecp.Journey.ID.ValueString()
					} else {
						id16 = nil
					}
					journeyId6 := new(string)
					if !tasksItem.DecisionTask.Ecp.Journey.JourneyID.IsUnknown() && !tasksItem.DecisionTask.Ecp.Journey.JourneyID.IsNull() {
						*journeyId6 = tasksItem.DecisionTask.Ecp.Journey.JourneyID.ValueString()
					} else {
						journeyId6 = nil
					}
					name10 := new(string)
					if !tasksItem.DecisionTask.Ecp.Journey.Name.IsUnknown() && !tasksItem.DecisionTask.Ecp.Journey.Name.IsNull() {
						*name10 = tasksItem.DecisionTask.Ecp.Journey.Name.ValueString()
					} else {
						name10 = nil
					}
					journey6 = &shared.StepJourney{
						ID:        id16,
						JourneyID: journeyId6,
						Name:      name10,
					}
				}
				label4 := new(string)
				if !tasksItem.DecisionTask.Ecp.Label.IsUnknown() && !tasksItem.DecisionTask.Ecp.Label.IsNull() {
					*label4 = tasksItem.DecisionTask.Ecp.Label.ValueString()
				} else {
					label4 = nil
				}
				ecp2 = &shared.ECPDetails{
					Description: description8,
					Enabled:     enabled8,
					Journey:     journey6,
					Label:       label4,
				}
			}
			var id17 string
			id17 = tasksItem.DecisionTask.ID.ValueString()

			var installer2 *shared.ECPDetails
			if tasksItem.DecisionTask.Installer != nil {
				description9 := new(string)
				if !tasksItem.DecisionTask.Installer.Description.IsUnknown() && !tasksItem.DecisionTask.Installer.Description.IsNull() {
					*description9 = tasksItem.DecisionTask.Installer.Description.ValueString()
				} else {
					description9 = nil
				}
				enabled9 := new(bool)
				if !tasksItem.DecisionTask.Installer.Enabled.IsUnknown() && !tasksItem.DecisionTask.Installer.Enabled.IsNull() {
					*enabled9 = tasksItem.DecisionTask.Installer.Enabled.ValueBool()
				} else {
					enabled9 = nil
				}
				var journey7 *shared.StepJourney
				if tasksItem.DecisionTask.Installer.Journey != nil {
					id18 := new(string)
					if !tasksItem.DecisionTask.Installer.Journey.ID.IsUnknown() && !tasksItem.DecisionTask.Installer.Journey.ID.IsNull() {
						*id18 = tasksItem.DecisionTask.Installer.Journey.ID.ValueString()
					} else {
						id18 = nil
					}
					journeyId7 := new(string)
					if !tasksItem.DecisionTask.Installer.Journey.JourneyID.IsUnknown() && !tasksItem.DecisionTask.Installer.Journey.JourneyID.IsNull() {
						*journeyId7 = tasksItem.DecisionTask.Installer.Journey.JourneyID.ValueString()
					} else {
						journeyId7 = nil
					}
					name11 := new(string)
					if !tasksItem.DecisionTask.Installer.Journey.Name.IsUnknown() && !tasksItem.DecisionTask.Installer.Journey.Name.IsNull() {
						*name11 = tasksItem.DecisionTask.Installer.Journey.Name.ValueString()
					} else {
						name11 = nil
					}
					journey7 = &shared.StepJourney{
						ID:        id18,
						JourneyID: journeyId7,
						Name:      name11,
					}
				}
				label5 := new(string)
				if !tasksItem.DecisionTask.Installer.Label.IsUnknown() && !tasksItem.DecisionTask.Installer.Label.IsNull() {
					*label5 = tasksItem.DecisionTask.Installer.Label.ValueString()
				} else {
					label5 = nil
				}
				installer2 = &shared.ECPDetails{
					Description: description9,
					Enabled:     enabled9,
					Journey:     journey7,
					Label:       label5,
				}
			}
			var journey8 *shared.StepJourney
			if tasksItem.DecisionTask.Journey != nil {
				id19 := new(string)
				if !tasksItem.DecisionTask.Journey.ID.IsUnknown() && !tasksItem.DecisionTask.Journey.ID.IsNull() {
					*id19 = tasksItem.DecisionTask.Journey.ID.ValueString()
				} else {
					id19 = nil
				}
				journeyId8 := new(string)
				if !tasksItem.DecisionTask.Journey.JourneyID.IsUnknown() && !tasksItem.DecisionTask.Journey.JourneyID.IsNull() {
					*journeyId8 = tasksItem.DecisionTask.Journey.JourneyID.ValueString()
				} else {
					journeyId8 = nil
				}
				name12 := new(string)
				if !tasksItem.DecisionTask.Journey.Name.IsUnknown() && !tasksItem.DecisionTask.Journey.Name.IsNull() {
					*name12 = tasksItem.DecisionTask.Journey.Name.ValueString()
				} else {
					name12 = nil
				}
				journey8 = &shared.StepJourney{
					ID:        id19,
					JourneyID: journeyId8,
					Name:      name12,
				}
			}
			var name13 string
			name13 = tasksItem.DecisionTask.Name.ValueString()

			phaseId9 := new(string)
			if !tasksItem.DecisionTask.PhaseID.IsUnknown() && !tasksItem.DecisionTask.PhaseID.IsNull() {
				*phaseId9 = tasksItem.DecisionTask.PhaseID.ValueString()
			} else {
				phaseId9 = nil
			}
			requirements2 := make([]shared.EnableRequirement, 0, len(tasksItem.DecisionTask.Requirements))
			for _, requirementsItem2 := range tasksItem.DecisionTask.Requirements {
				phaseId10 := new(string)
				if !requirementsItem2.PhaseID.IsUnknown() && !requirementsItem2.PhaseID.IsNull() {
					*phaseId10 = requirementsItem2.PhaseID.ValueString()
				} else {
					phaseId10 = nil
				}
				taskId7 := new(string)
				if !requirementsItem2.TaskID.IsUnknown() && !requirementsItem2.TaskID.IsNull() {
					*taskId7 = requirementsItem2.TaskID.ValueString()
				} else {
					taskId7 = nil
				}
				when2 := shared.When(requirementsItem2.When.ValueString())
				requirements2 = append(requirements2, shared.EnableRequirement{
					PhaseID: phaseId10,
					TaskID:  taskId7,
					When:    when2,
				})
			}
			var schedule1 *shared.Schedule
			if tasksItem.DecisionTask.Schedule != nil {
				var delayedSchedule1 *shared.DelayedSchedule
				if tasksItem.DecisionTask.Schedule.DelayedSchedule != nil {
					var duration7 float64
					duration7 = tasksItem.DecisionTask.Schedule.DelayedSchedule.Duration.ValueFloat64()

					mode3 := shared.Mode(tasksItem.DecisionTask.Schedule.DelayedSchedule.Mode.ValueString())
					unit7 := shared.TimeUnit(tasksItem.DecisionTask.Schedule.DelayedSchedule.Unit.ValueString())
					delayedSchedule1 = &shared.DelayedSchedule{
						Duration: duration7,
						Mode:     mode3,
						Unit:     unit7,
					}
				}
				if delayedSchedule1 != nil {
					schedule1 = &shared.Schedule{
						DelayedSchedule: delayedSchedule1,
					}
				}
				var relativeSchedule1 *shared.RelativeSchedule
				if tasksItem.DecisionTask.Schedule.RelativeSchedule != nil {
					direction1 := shared.Direction(tasksItem.DecisionTask.Schedule.RelativeSchedule.Direction.ValueString())
					var duration8 float64
					duration8 = tasksItem.DecisionTask.Schedule.RelativeSchedule.Duration.ValueFloat64()

					mode4 := shared.RelativeScheduleMode(tasksItem.DecisionTask.Schedule.RelativeSchedule.Mode.ValueString())
					attribute2 := new(string)
					if !tasksItem.DecisionTask.Schedule.RelativeSchedule.Reference.Attribute.IsUnknown() && !tasksItem.DecisionTask.Schedule.RelativeSchedule.Reference.Attribute.IsNull() {
						*attribute2 = tasksItem.DecisionTask.Schedule.RelativeSchedule.Reference.Attribute.ValueString()
					} else {
						attribute2 = nil
					}
					var id20 string
					id20 = tasksItem.DecisionTask.Schedule.RelativeSchedule.Reference.ID.ValueString()

					origin2 := shared.RelativeScheduleOrigin(tasksItem.DecisionTask.Schedule.RelativeSchedule.Reference.Origin.ValueString())
					schema2 := new(string)
					if !tasksItem.DecisionTask.Schedule.RelativeSchedule.Reference.Schema.IsUnknown() && !tasksItem.DecisionTask.Schedule.RelativeSchedule.Reference.Schema.IsNull() {
						*schema2 = tasksItem.DecisionTask.Schedule.RelativeSchedule.Reference.Schema.ValueString()
					} else {
						schema2 = nil
					}
					reference1 := shared.Reference{
						Attribute: attribute2,
						ID:        id20,
						Origin:    origin2,
						Schema:    schema2,
					}
					unit8 := shared.TimeUnit(tasksItem.DecisionTask.Schedule.RelativeSchedule.Unit.ValueString())
					relativeSchedule1 = &shared.RelativeSchedule{
						Direction: direction1,
						Duration:  duration8,
						Mode:      mode4,
						Reference: reference1,
						Unit:      unit8,
					}
				}
				if relativeSchedule1 != nil {
					schedule1 = &shared.Schedule{
						RelativeSchedule: relativeSchedule1,
					}
				}
			}
			taskType2 := shared.TaskType(tasksItem.DecisionTask.TaskType.ValueString())
			taxonomies3 := make([]string, 0, len(tasksItem.DecisionTask.Taxonomies))
			for _, taxonomiesItem3 := range tasksItem.DecisionTask.Taxonomies {
				taxonomies3 = append(taxonomies3, taxonomiesItem3.ValueString())
			}
			decisionTask := shared.DecisionTask{
				AssignedTo:    assignedTo4,
				Conditions:    conditions,
				Description:   description7,
				DueDate:       dueDate4,
				DueDateConfig: dueDateConfig4,
				Ecp:           ecp2,
				ID:            id17,
				Installer:     installer2,
				Journey:       journey8,
				Name:          name13,
				PhaseID:       phaseId9,
				Requirements:  requirements2,
				Schedule:      schedule1,
				TaskType:      taskType2,
				Taxonomies:    taxonomies3,
			}
			tasks = append(tasks, shared.Task{
				DecisionTask: &decisionTask,
			})
		}
	}
	taxonomies4 := make([]string, 0, len(r.Taxonomies))
	for _, taxonomiesItem4 := range r.Taxonomies {
		taxonomies4 = append(taxonomies4, taxonomiesItem4.ValueString())
	}
	var trigger *shared.Trigger
	if r.Trigger != nil {
		var manualTrigger *shared.ManualTrigger
		if r.Trigger.ManualTrigger != nil {
			entitySchema := new(string)
			if !r.Trigger.ManualTrigger.EntitySchema.IsUnknown() && !r.Trigger.ManualTrigger.EntitySchema.IsNull() {
				*entitySchema = r.Trigger.ManualTrigger.EntitySchema.ValueString()
			} else {
				entitySchema = nil
			}
			id21 := new(string)
			if !r.Trigger.ManualTrigger.ID.IsUnknown() && !r.Trigger.ManualTrigger.ID.IsNull() {
				*id21 = r.Trigger.ManualTrigger.ID.ValueString()
			} else {
				id21 = nil
			}
			typeVar5 := shared.ManualTriggerType(r.Trigger.ManualTrigger.Type.ValueString())
			manualTrigger = &shared.ManualTrigger{
				EntitySchema: entitySchema,
				ID:           id21,
				Type:         typeVar5,
			}
		}
		if manualTrigger != nil {
			trigger = &shared.Trigger{
				ManualTrigger: manualTrigger,
			}
		}
		var automationTrigger *shared.AutomationTrigger
		if r.Trigger.AutomationTrigger != nil {
			var automationID string
			automationID = r.Trigger.AutomationTrigger.AutomationID.ValueString()

			id22 := new(string)
			if !r.Trigger.AutomationTrigger.ID.IsUnknown() && !r.Trigger.AutomationTrigger.ID.IsNull() {
				*id22 = r.Trigger.AutomationTrigger.ID.ValueString()
			} else {
				id22 = nil
			}
			typeVar6 := shared.Type(r.Trigger.AutomationTrigger.Type.ValueString())
			automationTrigger = &shared.AutomationTrigger{
				AutomationID: automationID,
				ID:           id22,
				Type:         typeVar6,
			}
		}
		if automationTrigger != nil {
			trigger = &shared.Trigger{
				AutomationTrigger: automationTrigger,
			}
		}
		var journeySubmissionTrigger *shared.JourneySubmissionTrigger
		if r.Trigger.JourneySubmissionTrigger != nil {
			automationId1 := new(string)
			if !r.Trigger.JourneySubmissionTrigger.AutomationID.IsUnknown() && !r.Trigger.JourneySubmissionTrigger.AutomationID.IsNull() {
				*automationId1 = r.Trigger.JourneySubmissionTrigger.AutomationID.ValueString()
			} else {
				automationId1 = nil
			}
			id23 := new(string)
			if !r.Trigger.JourneySubmissionTrigger.ID.IsUnknown() && !r.Trigger.JourneySubmissionTrigger.ID.IsNull() {
				*id23 = r.Trigger.JourneySubmissionTrigger.ID.ValueString()
			} else {
				id23 = nil
			}
			var journeyId9 string
			journeyId9 = r.Trigger.JourneySubmissionTrigger.JourneyID.ValueString()

			typeVar7 := shared.JourneySubmissionTriggerType(r.Trigger.JourneySubmissionTrigger.Type.ValueString())
			journeySubmissionTrigger = &shared.JourneySubmissionTrigger{
				AutomationID: automationId1,
				ID:           id23,
				JourneyID:    journeyId9,
				Type:         typeVar7,
			}
		}
		if journeySubmissionTrigger != nil {
			trigger = &shared.Trigger{
				JourneySubmissionTrigger: journeySubmissionTrigger,
			}
		}
	}
	updateEntityAttributes := make([]shared.UpdateEntityAttributes, 0, len(r.UpdateEntityAttributes))
	for _, updateEntityAttributesItem := range r.UpdateEntityAttributes {
		source1 := shared.Source(updateEntityAttributesItem.Source.ValueString())
		var entityAttribute string
		entityAttribute = updateEntityAttributesItem.Target.EntityAttribute.ValueString()

		var entitySchema1 string
		entitySchema1 = updateEntityAttributesItem.Target.EntitySchema.ValueString()

		target := shared.Target{
			EntityAttribute: entityAttribute,
			EntitySchema:    entitySchema1,
		}
		updateEntityAttributes = append(updateEntityAttributes, shared.UpdateEntityAttributes{
			Source: source1,
			Target: target,
		})
	}
	updatedAt := new(string)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueString()
	} else {
		updatedAt = nil
	}
	out := shared.CreateFlowTemplate{
		AssignedTo:             assignedTo,
		AvailableInEcp:         availableInEcp,
		ClosingReasons:         closingReasons,
		CreatedAt:              createdAt,
		Description:            description,
		DueDate:                dueDate,
		DueDateConfig:          dueDateConfig,
		Edges:                  edges,
		Enabled:                enabled,
		ID:                     id2,
		IsFlowMigrated:         isFlowMigrated,
		Name:                   name,
		OrgID:                  orgID,
		Phases:                 phases,
		Tasks:                  tasks,
		Taxonomies:             taxonomies4,
		Trigger:                trigger,
		UpdateEntityAttributes: updateEntityAttributes,
		UpdatedAt:              updatedAt,
	}

	return &out, diags
}

func (r *FlowTemplateResourceModel) ToSharedFlowTemplateInput(ctx context.Context) (*shared.FlowTemplateInput, diag.Diagnostics) {
	var diags diag.Diagnostics

	assignedTo := make([]string, 0, len(r.AssignedTo))
	for _, assignedToItem := range r.AssignedTo {
		assignedTo = append(assignedTo, assignedToItem.ValueString())
	}
	availableInEcp := new(bool)
	if !r.AvailableInEcp.IsUnknown() && !r.AvailableInEcp.IsNull() {
		*availableInEcp = r.AvailableInEcp.ValueBool()
	} else {
		availableInEcp = nil
	}
	closingReasons := make([]shared.ClosingReasonInput, 0, len(r.ClosingReasons))
	for _, closingReasonsItem := range r.ClosingReasons {
		status := shared.ClosingReasonsStatus(closingReasonsItem.Status.ValueString())
		var title string
		title = closingReasonsItem.Title.ValueString()

		closingReasons = append(closingReasons, shared.ClosingReasonInput{
			Status: status,
			Title:  title,
		})
	}
	createdAt := new(string)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueString()
	} else {
		createdAt = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	dueDate := new(string)
	if !r.DueDate.IsUnknown() && !r.DueDate.IsNull() {
		*dueDate = r.DueDate.ValueString()
	} else {
		dueDate = nil
	}
	var dueDateConfig *shared.DueDateConfig
	if r.DueDateConfig != nil {
		var duration float64
		duration = r.DueDateConfig.Duration.ValueFloat64()

		phaseID := new(string)
		if !r.DueDateConfig.PhaseID.IsUnknown() && !r.DueDateConfig.PhaseID.IsNull() {
			*phaseID = r.DueDateConfig.PhaseID.ValueString()
		} else {
			phaseID = nil
		}
		taskID := new(string)
		if !r.DueDateConfig.TaskID.IsUnknown() && !r.DueDateConfig.TaskID.IsNull() {
			*taskID = r.DueDateConfig.TaskID.ValueString()
		} else {
			taskID = nil
		}
		typeVar := shared.DueDateConfigType(r.DueDateConfig.Type.ValueString())
		unit := shared.TimeUnit(r.DueDateConfig.Unit.ValueString())
		dueDateConfig = &shared.DueDateConfig{
			Duration: duration,
			PhaseID:  phaseID,
			TaskID:   taskID,
			Type:     typeVar,
			Unit:     unit,
		}
	}
	edges := make([]shared.Edge, 0, len(r.Edges))
	for _, edgesItem := range r.Edges {
		conditionID := new(string)
		if !edgesItem.ConditionID.IsUnknown() && !edgesItem.ConditionID.IsNull() {
			*conditionID = edgesItem.ConditionID.ValueString()
		} else {
			conditionID = nil
		}
		var fromID string
		fromID = edgesItem.FromID.ValueString()

		var id string
		id = edgesItem.ID.ValueString()

		noneMet := new(bool)
		if !edgesItem.NoneMet.IsUnknown() && !edgesItem.NoneMet.IsNull() {
			*noneMet = edgesItem.NoneMet.ValueBool()
		} else {
			noneMet = nil
		}
		var toID string
		toID = edgesItem.ToID.ValueString()

		edges = append(edges, shared.Edge{
			ConditionID: conditionID,
			FromID:      fromID,
			ID:          id,
			NoneMet:     noneMet,
			ToID:        toID,
		})
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id1 := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id1 = r.ID.ValueString()
	} else {
		id1 = nil
	}
	isFlowMigrated := new(bool)
	if !r.IsFlowMigrated.IsUnknown() && !r.IsFlowMigrated.IsNull() {
		*isFlowMigrated = r.IsFlowMigrated.ValueBool()
	} else {
		isFlowMigrated = nil
	}
	var name string
	name = r.Name.ValueString()

	orgID := new(string)
	if !r.OrgID.IsUnknown() && !r.OrgID.IsNull() {
		*orgID = r.OrgID.ValueString()
	} else {
		orgID = nil
	}
	phases := make([]shared.Phase, 0, len(r.Phases))
	for _, phasesItem := range r.Phases {
		assignedTo1 := make([]string, 0, len(phasesItem.AssignedTo))
		for _, assignedToItem1 := range phasesItem.AssignedTo {
			assignedTo1 = append(assignedTo1, assignedToItem1.ValueString())
		}
		dueDate1 := new(string)
		if !phasesItem.DueDate.IsUnknown() && !phasesItem.DueDate.IsNull() {
			*dueDate1 = phasesItem.DueDate.ValueString()
		} else {
			dueDate1 = nil
		}
		var dueDateConfig1 *shared.DueDateConfig
		if phasesItem.DueDateConfig != nil {
			var duration1 float64
			duration1 = phasesItem.DueDateConfig.Duration.ValueFloat64()

			phaseId1 := new(string)
			if !phasesItem.DueDateConfig.PhaseID.IsUnknown() && !phasesItem.DueDateConfig.PhaseID.IsNull() {
				*phaseId1 = phasesItem.DueDateConfig.PhaseID.ValueString()
			} else {
				phaseId1 = nil
			}
			taskId1 := new(string)
			if !phasesItem.DueDateConfig.TaskID.IsUnknown() && !phasesItem.DueDateConfig.TaskID.IsNull() {
				*taskId1 = phasesItem.DueDateConfig.TaskID.ValueString()
			} else {
				taskId1 = nil
			}
			typeVar1 := shared.DueDateConfigType(phasesItem.DueDateConfig.Type.ValueString())
			unit1 := shared.TimeUnit(phasesItem.DueDateConfig.Unit.ValueString())
			dueDateConfig1 = &shared.DueDateConfig{
				Duration: duration1,
				PhaseID:  phaseId1,
				TaskID:   taskId1,
				Type:     typeVar1,
				Unit:     unit1,
			}
		}
		var id2 string
		id2 = phasesItem.ID.ValueString()

		var name1 string
		name1 = phasesItem.Name.ValueString()

		taxonomies := make([]string, 0, len(phasesItem.Taxonomies))
		for _, taxonomiesItem := range phasesItem.Taxonomies {
			taxonomies = append(taxonomies, taxonomiesItem.ValueString())
		}
		phases = append(phases, shared.Phase{
			AssignedTo:    assignedTo1,
			DueDate:       dueDate1,
			DueDateConfig: dueDateConfig1,
			ID:            id2,
			Name:          name1,
			Taxonomies:    taxonomies,
		})
	}
	tasks := make([]shared.Task, 0, len(r.Tasks))
	for _, tasksItem := range r.Tasks {
		if tasksItem.TaskBase != nil {
			assignedTo2 := make([]string, 0, len(tasksItem.TaskBase.AssignedTo))
			for _, assignedToItem2 := range tasksItem.TaskBase.AssignedTo {
				assignedTo2 = append(assignedTo2, assignedToItem2.ValueString())
			}
			var description1 *shared.StepDescription
			if tasksItem.TaskBase.Description != nil {
				enabled1 := new(bool)
				if !tasksItem.TaskBase.Description.Enabled.IsUnknown() && !tasksItem.TaskBase.Description.Enabled.IsNull() {
					*enabled1 = tasksItem.TaskBase.Description.Enabled.ValueBool()
				} else {
					enabled1 = nil
				}
				value := new(string)
				if !tasksItem.TaskBase.Description.Value.IsUnknown() && !tasksItem.TaskBase.Description.Value.IsNull() {
					*value = tasksItem.TaskBase.Description.Value.ValueString()
				} else {
					value = nil
				}
				description1 = &shared.StepDescription{
					Enabled: enabled1,
					Value:   value,
				}
			}
			dueDate2 := new(string)
			if !tasksItem.TaskBase.DueDate.IsUnknown() && !tasksItem.TaskBase.DueDate.IsNull() {
				*dueDate2 = tasksItem.TaskBase.DueDate.ValueString()
			} else {
				dueDate2 = nil
			}
			var dueDateConfig2 *shared.DueDateConfig
			if tasksItem.TaskBase.DueDateConfig != nil {
				var duration2 float64
				duration2 = tasksItem.TaskBase.DueDateConfig.Duration.ValueFloat64()

				phaseId2 := new(string)
				if !tasksItem.TaskBase.DueDateConfig.PhaseID.IsUnknown() && !tasksItem.TaskBase.DueDateConfig.PhaseID.IsNull() {
					*phaseId2 = tasksItem.TaskBase.DueDateConfig.PhaseID.ValueString()
				} else {
					phaseId2 = nil
				}
				taskId2 := new(string)
				if !tasksItem.TaskBase.DueDateConfig.TaskID.IsUnknown() && !tasksItem.TaskBase.DueDateConfig.TaskID.IsNull() {
					*taskId2 = tasksItem.TaskBase.DueDateConfig.TaskID.ValueString()
				} else {
					taskId2 = nil
				}
				typeVar2 := shared.DueDateConfigType(tasksItem.TaskBase.DueDateConfig.Type.ValueString())
				unit2 := shared.TimeUnit(tasksItem.TaskBase.DueDateConfig.Unit.ValueString())
				dueDateConfig2 = &shared.DueDateConfig{
					Duration: duration2,
					PhaseID:  phaseId2,
					TaskID:   taskId2,
					Type:     typeVar2,
					Unit:     unit2,
				}
			}
			var ecp *shared.ECPDetails
			if tasksItem.TaskBase.Ecp != nil {
				description2 := new(string)
				if !tasksItem.TaskBase.Ecp.Description.IsUnknown() && !tasksItem.TaskBase.Ecp.Description.IsNull() {
					*description2 = tasksItem.TaskBase.Ecp.Description.ValueString()
				} else {
					description2 = nil
				}
				enabled2 := new(bool)
				if !tasksItem.TaskBase.Ecp.Enabled.IsUnknown() && !tasksItem.TaskBase.Ecp.Enabled.IsNull() {
					*enabled2 = tasksItem.TaskBase.Ecp.Enabled.ValueBool()
				} else {
					enabled2 = nil
				}
				var journey *shared.StepJourney
				if tasksItem.TaskBase.Ecp.Journey != nil {
					id3 := new(string)
					if !tasksItem.TaskBase.Ecp.Journey.ID.IsUnknown() && !tasksItem.TaskBase.Ecp.Journey.ID.IsNull() {
						*id3 = tasksItem.TaskBase.Ecp.Journey.ID.ValueString()
					} else {
						id3 = nil
					}
					journeyID := new(string)
					if !tasksItem.TaskBase.Ecp.Journey.JourneyID.IsUnknown() && !tasksItem.TaskBase.Ecp.Journey.JourneyID.IsNull() {
						*journeyID = tasksItem.TaskBase.Ecp.Journey.JourneyID.ValueString()
					} else {
						journeyID = nil
					}
					name2 := new(string)
					if !tasksItem.TaskBase.Ecp.Journey.Name.IsUnknown() && !tasksItem.TaskBase.Ecp.Journey.Name.IsNull() {
						*name2 = tasksItem.TaskBase.Ecp.Journey.Name.ValueString()
					} else {
						name2 = nil
					}
					journey = &shared.StepJourney{
						ID:        id3,
						JourneyID: journeyID,
						Name:      name2,
					}
				}
				label := new(string)
				if !tasksItem.TaskBase.Ecp.Label.IsUnknown() && !tasksItem.TaskBase.Ecp.Label.IsNull() {
					*label = tasksItem.TaskBase.Ecp.Label.ValueString()
				} else {
					label = nil
				}
				ecp = &shared.ECPDetails{
					Description: description2,
					Enabled:     enabled2,
					Journey:     journey,
					Label:       label,
				}
			}
			var id4 string
			id4 = tasksItem.TaskBase.ID.ValueString()

			var installer *shared.ECPDetails
			if tasksItem.TaskBase.Installer != nil {
				description3 := new(string)
				if !tasksItem.TaskBase.Installer.Description.IsUnknown() && !tasksItem.TaskBase.Installer.Description.IsNull() {
					*description3 = tasksItem.TaskBase.Installer.Description.ValueString()
				} else {
					description3 = nil
				}
				enabled3 := new(bool)
				if !tasksItem.TaskBase.Installer.Enabled.IsUnknown() && !tasksItem.TaskBase.Installer.Enabled.IsNull() {
					*enabled3 = tasksItem.TaskBase.Installer.Enabled.ValueBool()
				} else {
					enabled3 = nil
				}
				var journey1 *shared.StepJourney
				if tasksItem.TaskBase.Installer.Journey != nil {
					id5 := new(string)
					if !tasksItem.TaskBase.Installer.Journey.ID.IsUnknown() && !tasksItem.TaskBase.Installer.Journey.ID.IsNull() {
						*id5 = tasksItem.TaskBase.Installer.Journey.ID.ValueString()
					} else {
						id5 = nil
					}
					journeyId1 := new(string)
					if !tasksItem.TaskBase.Installer.Journey.JourneyID.IsUnknown() && !tasksItem.TaskBase.Installer.Journey.JourneyID.IsNull() {
						*journeyId1 = tasksItem.TaskBase.Installer.Journey.JourneyID.ValueString()
					} else {
						journeyId1 = nil
					}
					name3 := new(string)
					if !tasksItem.TaskBase.Installer.Journey.Name.IsUnknown() && !tasksItem.TaskBase.Installer.Journey.Name.IsNull() {
						*name3 = tasksItem.TaskBase.Installer.Journey.Name.ValueString()
					} else {
						name3 = nil
					}
					journey1 = &shared.StepJourney{
						ID:        id5,
						JourneyID: journeyId1,
						Name:      name3,
					}
				}
				label1 := new(string)
				if !tasksItem.TaskBase.Installer.Label.IsUnknown() && !tasksItem.TaskBase.Installer.Label.IsNull() {
					*label1 = tasksItem.TaskBase.Installer.Label.ValueString()
				} else {
					label1 = nil
				}
				installer = &shared.ECPDetails{
					Description: description3,
					Enabled:     enabled3,
					Journey:     journey1,
					Label:       label1,
				}
			}
			var journey2 *shared.StepJourney
			if tasksItem.TaskBase.Journey != nil {
				id6 := new(string)
				if !tasksItem.TaskBase.Journey.ID.IsUnknown() && !tasksItem.TaskBase.Journey.ID.IsNull() {
					*id6 = tasksItem.TaskBase.Journey.ID.ValueString()
				} else {
					id6 = nil
				}
				journeyId2 := new(string)
				if !tasksItem.TaskBase.Journey.JourneyID.IsUnknown() && !tasksItem.TaskBase.Journey.JourneyID.IsNull() {
					*journeyId2 = tasksItem.TaskBase.Journey.JourneyID.ValueString()
				} else {
					journeyId2 = nil
				}
				name4 := new(string)
				if !tasksItem.TaskBase.Journey.Name.IsUnknown() && !tasksItem.TaskBase.Journey.Name.IsNull() {
					*name4 = tasksItem.TaskBase.Journey.Name.ValueString()
				} else {
					name4 = nil
				}
				journey2 = &shared.StepJourney{
					ID:        id6,
					JourneyID: journeyId2,
					Name:      name4,
				}
			}
			var name5 string
			name5 = tasksItem.TaskBase.Name.ValueString()

			phaseId3 := new(string)
			if !tasksItem.TaskBase.PhaseID.IsUnknown() && !tasksItem.TaskBase.PhaseID.IsNull() {
				*phaseId3 = tasksItem.TaskBase.PhaseID.ValueString()
			} else {
				phaseId3 = nil
			}
			requirements := make([]shared.EnableRequirement, 0, len(tasksItem.TaskBase.Requirements))
			for _, requirementsItem := range tasksItem.TaskBase.Requirements {
				phaseId4 := new(string)
				if !requirementsItem.PhaseID.IsUnknown() && !requirementsItem.PhaseID.IsNull() {
					*phaseId4 = requirementsItem.PhaseID.ValueString()
				} else {
					phaseId4 = nil
				}
				taskId3 := new(string)
				if !requirementsItem.TaskID.IsUnknown() && !requirementsItem.TaskID.IsNull() {
					*taskId3 = requirementsItem.TaskID.ValueString()
				} else {
					taskId3 = nil
				}
				when := shared.When(requirementsItem.When.ValueString())
				requirements = append(requirements, shared.EnableRequirement{
					PhaseID: phaseId4,
					TaskID:  taskId3,
					When:    when,
				})
			}
			taskType := shared.TaskType(tasksItem.TaskBase.TaskType.ValueString())
			taxonomies1 := make([]string, 0, len(tasksItem.TaskBase.Taxonomies))
			for _, taxonomiesItem1 := range tasksItem.TaskBase.Taxonomies {
				taxonomies1 = append(taxonomies1, taxonomiesItem1.ValueString())
			}
			taskBase := shared.TaskBase{
				AssignedTo:    assignedTo2,
				Description:   description1,
				DueDate:       dueDate2,
				DueDateConfig: dueDateConfig2,
				Ecp:           ecp,
				ID:            id4,
				Installer:     installer,
				Journey:       journey2,
				Name:          name5,
				PhaseID:       phaseId3,
				Requirements:  requirements,
				TaskType:      taskType,
				Taxonomies:    taxonomies1,
			}
			tasks = append(tasks, shared.Task{
				TaskBase: &taskBase,
			})
		}
		if tasksItem.AutomationTask != nil {
			assignedTo3 := make([]string, 0, len(tasksItem.AutomationTask.AssignedTo))
			for _, assignedToItem3 := range tasksItem.AutomationTask.AssignedTo {
				assignedTo3 = append(assignedTo3, assignedToItem3.ValueString())
			}
			var flowID string
			flowID = tasksItem.AutomationTask.AutomationConfig.FlowID.ValueString()

			automationConfig := shared.AutomationConfig{
				FlowID: flowID,
			}
			var description4 *shared.StepDescription
			if tasksItem.AutomationTask.Description != nil {
				enabled4 := new(bool)
				if !tasksItem.AutomationTask.Description.Enabled.IsUnknown() && !tasksItem.AutomationTask.Description.Enabled.IsNull() {
					*enabled4 = tasksItem.AutomationTask.Description.Enabled.ValueBool()
				} else {
					enabled4 = nil
				}
				value1 := new(string)
				if !tasksItem.AutomationTask.Description.Value.IsUnknown() && !tasksItem.AutomationTask.Description.Value.IsNull() {
					*value1 = tasksItem.AutomationTask.Description.Value.ValueString()
				} else {
					value1 = nil
				}
				description4 = &shared.StepDescription{
					Enabled: enabled4,
					Value:   value1,
				}
			}
			dueDate3 := new(string)
			if !tasksItem.AutomationTask.DueDate.IsUnknown() && !tasksItem.AutomationTask.DueDate.IsNull() {
				*dueDate3 = tasksItem.AutomationTask.DueDate.ValueString()
			} else {
				dueDate3 = nil
			}
			var dueDateConfig3 *shared.DueDateConfig
			if tasksItem.AutomationTask.DueDateConfig != nil {
				var duration3 float64
				duration3 = tasksItem.AutomationTask.DueDateConfig.Duration.ValueFloat64()

				phaseId5 := new(string)
				if !tasksItem.AutomationTask.DueDateConfig.PhaseID.IsUnknown() && !tasksItem.AutomationTask.DueDateConfig.PhaseID.IsNull() {
					*phaseId5 = tasksItem.AutomationTask.DueDateConfig.PhaseID.ValueString()
				} else {
					phaseId5 = nil
				}
				taskId4 := new(string)
				if !tasksItem.AutomationTask.DueDateConfig.TaskID.IsUnknown() && !tasksItem.AutomationTask.DueDateConfig.TaskID.IsNull() {
					*taskId4 = tasksItem.AutomationTask.DueDateConfig.TaskID.ValueString()
				} else {
					taskId4 = nil
				}
				typeVar3 := shared.DueDateConfigType(tasksItem.AutomationTask.DueDateConfig.Type.ValueString())
				unit3 := shared.TimeUnit(tasksItem.AutomationTask.DueDateConfig.Unit.ValueString())
				dueDateConfig3 = &shared.DueDateConfig{
					Duration: duration3,
					PhaseID:  phaseId5,
					TaskID:   taskId4,
					Type:     typeVar3,
					Unit:     unit3,
				}
			}
			var ecp1 *shared.ECPDetails
			if tasksItem.AutomationTask.Ecp != nil {
				description5 := new(string)
				if !tasksItem.AutomationTask.Ecp.Description.IsUnknown() && !tasksItem.AutomationTask.Ecp.Description.IsNull() {
					*description5 = tasksItem.AutomationTask.Ecp.Description.ValueString()
				} else {
					description5 = nil
				}
				enabled5 := new(bool)
				if !tasksItem.AutomationTask.Ecp.Enabled.IsUnknown() && !tasksItem.AutomationTask.Ecp.Enabled.IsNull() {
					*enabled5 = tasksItem.AutomationTask.Ecp.Enabled.ValueBool()
				} else {
					enabled5 = nil
				}
				var journey3 *shared.StepJourney
				if tasksItem.AutomationTask.Ecp.Journey != nil {
					id7 := new(string)
					if !tasksItem.AutomationTask.Ecp.Journey.ID.IsUnknown() && !tasksItem.AutomationTask.Ecp.Journey.ID.IsNull() {
						*id7 = tasksItem.AutomationTask.Ecp.Journey.ID.ValueString()
					} else {
						id7 = nil
					}
					journeyId3 := new(string)
					if !tasksItem.AutomationTask.Ecp.Journey.JourneyID.IsUnknown() && !tasksItem.AutomationTask.Ecp.Journey.JourneyID.IsNull() {
						*journeyId3 = tasksItem.AutomationTask.Ecp.Journey.JourneyID.ValueString()
					} else {
						journeyId3 = nil
					}
					name6 := new(string)
					if !tasksItem.AutomationTask.Ecp.Journey.Name.IsUnknown() && !tasksItem.AutomationTask.Ecp.Journey.Name.IsNull() {
						*name6 = tasksItem.AutomationTask.Ecp.Journey.Name.ValueString()
					} else {
						name6 = nil
					}
					journey3 = &shared.StepJourney{
						ID:        id7,
						JourneyID: journeyId3,
						Name:      name6,
					}
				}
				label2 := new(string)
				if !tasksItem.AutomationTask.Ecp.Label.IsUnknown() && !tasksItem.AutomationTask.Ecp.Label.IsNull() {
					*label2 = tasksItem.AutomationTask.Ecp.Label.ValueString()
				} else {
					label2 = nil
				}
				ecp1 = &shared.ECPDetails{
					Description: description5,
					Enabled:     enabled5,
					Journey:     journey3,
					Label:       label2,
				}
			}
			var id8 string
			id8 = tasksItem.AutomationTask.ID.ValueString()

			var installer1 *shared.ECPDetails
			if tasksItem.AutomationTask.Installer != nil {
				description6 := new(string)
				if !tasksItem.AutomationTask.Installer.Description.IsUnknown() && !tasksItem.AutomationTask.Installer.Description.IsNull() {
					*description6 = tasksItem.AutomationTask.Installer.Description.ValueString()
				} else {
					description6 = nil
				}
				enabled6 := new(bool)
				if !tasksItem.AutomationTask.Installer.Enabled.IsUnknown() && !tasksItem.AutomationTask.Installer.Enabled.IsNull() {
					*enabled6 = tasksItem.AutomationTask.Installer.Enabled.ValueBool()
				} else {
					enabled6 = nil
				}
				var journey4 *shared.StepJourney
				if tasksItem.AutomationTask.Installer.Journey != nil {
					id9 := new(string)
					if !tasksItem.AutomationTask.Installer.Journey.ID.IsUnknown() && !tasksItem.AutomationTask.Installer.Journey.ID.IsNull() {
						*id9 = tasksItem.AutomationTask.Installer.Journey.ID.ValueString()
					} else {
						id9 = nil
					}
					journeyId4 := new(string)
					if !tasksItem.AutomationTask.Installer.Journey.JourneyID.IsUnknown() && !tasksItem.AutomationTask.Installer.Journey.JourneyID.IsNull() {
						*journeyId4 = tasksItem.AutomationTask.Installer.Journey.JourneyID.ValueString()
					} else {
						journeyId4 = nil
					}
					name7 := new(string)
					if !tasksItem.AutomationTask.Installer.Journey.Name.IsUnknown() && !tasksItem.AutomationTask.Installer.Journey.Name.IsNull() {
						*name7 = tasksItem.AutomationTask.Installer.Journey.Name.ValueString()
					} else {
						name7 = nil
					}
					journey4 = &shared.StepJourney{
						ID:        id9,
						JourneyID: journeyId4,
						Name:      name7,
					}
				}
				label3 := new(string)
				if !tasksItem.AutomationTask.Installer.Label.IsUnknown() && !tasksItem.AutomationTask.Installer.Label.IsNull() {
					*label3 = tasksItem.AutomationTask.Installer.Label.ValueString()
				} else {
					label3 = nil
				}
				installer1 = &shared.ECPDetails{
					Description: description6,
					Enabled:     enabled6,
					Journey:     journey4,
					Label:       label3,
				}
			}
			var journey5 *shared.StepJourney
			if tasksItem.AutomationTask.Journey != nil {
				id10 := new(string)
				if !tasksItem.AutomationTask.Journey.ID.IsUnknown() && !tasksItem.AutomationTask.Journey.ID.IsNull() {
					*id10 = tasksItem.AutomationTask.Journey.ID.ValueString()
				} else {
					id10 = nil
				}
				journeyId5 := new(string)
				if !tasksItem.AutomationTask.Journey.JourneyID.IsUnknown() && !tasksItem.AutomationTask.Journey.JourneyID.IsNull() {
					*journeyId5 = tasksItem.AutomationTask.Journey.JourneyID.ValueString()
				} else {
					journeyId5 = nil
				}
				name8 := new(string)
				if !tasksItem.AutomationTask.Journey.Name.IsUnknown() && !tasksItem.AutomationTask.Journey.Name.IsNull() {
					*name8 = tasksItem.AutomationTask.Journey.Name.ValueString()
				} else {
					name8 = nil
				}
				journey5 = &shared.StepJourney{
					ID:        id10,
					JourneyID: journeyId5,
					Name:      name8,
				}
			}
			var name9 string
			name9 = tasksItem.AutomationTask.Name.ValueString()

			phaseId6 := new(string)
			if !tasksItem.AutomationTask.PhaseID.IsUnknown() && !tasksItem.AutomationTask.PhaseID.IsNull() {
				*phaseId6 = tasksItem.AutomationTask.PhaseID.ValueString()
			} else {
				phaseId6 = nil
			}
			requirements1 := make([]shared.EnableRequirement, 0, len(tasksItem.AutomationTask.Requirements))
			for _, requirementsItem1 := range tasksItem.AutomationTask.Requirements {
				phaseId7 := new(string)
				if !requirementsItem1.PhaseID.IsUnknown() && !requirementsItem1.PhaseID.IsNull() {
					*phaseId7 = requirementsItem1.PhaseID.ValueString()
				} else {
					phaseId7 = nil
				}
				taskId5 := new(string)
				if !requirementsItem1.TaskID.IsUnknown() && !requirementsItem1.TaskID.IsNull() {
					*taskId5 = requirementsItem1.TaskID.ValueString()
				} else {
					taskId5 = nil
				}
				when1 := shared.When(requirementsItem1.When.ValueString())
				requirements1 = append(requirements1, shared.EnableRequirement{
					PhaseID: phaseId7,
					TaskID:  taskId5,
					When:    when1,
				})
			}
			var schedule *shared.ActionSchedule
			if tasksItem.AutomationTask.Schedule != nil {
				var immediateSchedule *shared.ImmediateSchedule
				if tasksItem.AutomationTask.Schedule.ImmediateSchedule != nil {
					mode := new(shared.ImmediateScheduleMode)
					if !tasksItem.AutomationTask.Schedule.ImmediateSchedule.Mode.IsUnknown() && !tasksItem.AutomationTask.Schedule.ImmediateSchedule.Mode.IsNull() {
						*mode = shared.ImmediateScheduleMode(tasksItem.AutomationTask.Schedule.ImmediateSchedule.Mode.ValueString())
					} else {
						mode = nil
					}
					immediateSchedule = &shared.ImmediateSchedule{
						Mode: mode,
					}
				}
				if immediateSchedule != nil {
					schedule = &shared.ActionSchedule{
						ImmediateSchedule: immediateSchedule,
					}
				}
				var delayedSchedule *shared.DelayedSchedule
				if tasksItem.AutomationTask.Schedule.DelayedSchedule != nil {
					var duration4 float64
					duration4 = tasksItem.AutomationTask.Schedule.DelayedSchedule.Duration.ValueFloat64()

					mode1 := shared.Mode(tasksItem.AutomationTask.Schedule.DelayedSchedule.Mode.ValueString())
					unit4 := shared.TimeUnit(tasksItem.AutomationTask.Schedule.DelayedSchedule.Unit.ValueString())
					delayedSchedule = &shared.DelayedSchedule{
						Duration: duration4,
						Mode:     mode1,
						Unit:     unit4,
					}
				}
				if delayedSchedule != nil {
					schedule = &shared.ActionSchedule{
						DelayedSchedule: delayedSchedule,
					}
				}
				var relativeSchedule *shared.RelativeSchedule
				if tasksItem.AutomationTask.Schedule.RelativeSchedule != nil {
					direction := shared.Direction(tasksItem.AutomationTask.Schedule.RelativeSchedule.Direction.ValueString())
					var duration5 float64
					duration5 = tasksItem.AutomationTask.Schedule.RelativeSchedule.Duration.ValueFloat64()

					mode2 := shared.RelativeScheduleMode(tasksItem.AutomationTask.Schedule.RelativeSchedule.Mode.ValueString())
					attribute := new(string)
					if !tasksItem.AutomationTask.Schedule.RelativeSchedule.Reference.Attribute.IsUnknown() && !tasksItem.AutomationTask.Schedule.RelativeSchedule.Reference.Attribute.IsNull() {
						*attribute = tasksItem.AutomationTask.Schedule.RelativeSchedule.Reference.Attribute.ValueString()
					} else {
						attribute = nil
					}
					var id11 string
					id11 = tasksItem.AutomationTask.Schedule.RelativeSchedule.Reference.ID.ValueString()

					origin := shared.RelativeScheduleOrigin(tasksItem.AutomationTask.Schedule.RelativeSchedule.Reference.Origin.ValueString())
					schema := new(string)
					if !tasksItem.AutomationTask.Schedule.RelativeSchedule.Reference.Schema.IsUnknown() && !tasksItem.AutomationTask.Schedule.RelativeSchedule.Reference.Schema.IsNull() {
						*schema = tasksItem.AutomationTask.Schedule.RelativeSchedule.Reference.Schema.ValueString()
					} else {
						schema = nil
					}
					reference := shared.Reference{
						Attribute: attribute,
						ID:        id11,
						Origin:    origin,
						Schema:    schema,
					}
					unit5 := shared.TimeUnit(tasksItem.AutomationTask.Schedule.RelativeSchedule.Unit.ValueString())
					relativeSchedule = &shared.RelativeSchedule{
						Direction: direction,
						Duration:  duration5,
						Mode:      mode2,
						Reference: reference,
						Unit:      unit5,
					}
				}
				if relativeSchedule != nil {
					schedule = &shared.ActionSchedule{
						RelativeSchedule: relativeSchedule,
					}
				}
			}
			taskType1 := shared.TaskType(tasksItem.AutomationTask.TaskType.ValueString())
			taxonomies2 := make([]string, 0, len(tasksItem.AutomationTask.Taxonomies))
			for _, taxonomiesItem2 := range tasksItem.AutomationTask.Taxonomies {
				taxonomies2 = append(taxonomies2, taxonomiesItem2.ValueString())
			}
			triggerMode := new(shared.TriggerMode)
			if !tasksItem.AutomationTask.TriggerMode.IsUnknown() && !tasksItem.AutomationTask.TriggerMode.IsNull() {
				*triggerMode = shared.TriggerMode(tasksItem.AutomationTask.TriggerMode.ValueString())
			} else {
				triggerMode = nil
			}
			automationTask := shared.AutomationTask{
				AssignedTo:       assignedTo3,
				AutomationConfig: automationConfig,
				Description:      description4,
				DueDate:          dueDate3,
				DueDateConfig:    dueDateConfig3,
				Ecp:              ecp1,
				ID:               id8,
				Installer:        installer1,
				Journey:          journey5,
				Name:             name9,
				PhaseID:          phaseId6,
				Requirements:     requirements1,
				Schedule:         schedule,
				TaskType:         taskType1,
				Taxonomies:       taxonomies2,
				TriggerMode:      triggerMode,
			}
			tasks = append(tasks, shared.Task{
				AutomationTask: &automationTask,
			})
		}
		if tasksItem.DecisionTask != nil {
			assignedTo4 := make([]string, 0, len(tasksItem.DecisionTask.AssignedTo))
			for _, assignedToItem4 := range tasksItem.DecisionTask.AssignedTo {
				assignedTo4 = append(assignedTo4, assignedToItem4.ValueString())
			}
			conditions := make([]shared.Condition, 0, len(tasksItem.DecisionTask.Conditions))
			for _, conditionsItem := range tasksItem.DecisionTask.Conditions {
				var branchName string
				branchName = conditionsItem.BranchName.ValueString()

				var id12 string
				id12 = conditionsItem.ID.ValueString()

				logicalOperator := shared.LogicalOperator(conditionsItem.LogicalOperator.ValueString())
				statements := make([]shared.Statement, 0, len(conditionsItem.Statements))
				for _, statementsItem := range conditionsItem.Statements {
					var id13 string
					id13 = statementsItem.ID.ValueString()

					operator := shared.Operator(statementsItem.Operator.ValueString())
					attribute1 := new(string)
					if !statementsItem.Source.Attribute.IsUnknown() && !statementsItem.Source.Attribute.IsNull() {
						*attribute1 = statementsItem.Source.Attribute.ValueString()
					} else {
						attribute1 = nil
					}
					attributeOperation := new(shared.AttributeOperation)
					if !statementsItem.Source.AttributeOperation.IsUnknown() && !statementsItem.Source.AttributeOperation.IsNull() {
						*attributeOperation = shared.AttributeOperation(statementsItem.Source.AttributeOperation.ValueString())
					} else {
						attributeOperation = nil
					}
					attributeRepeatable := new(bool)
					if !statementsItem.Source.AttributeRepeatable.IsUnknown() && !statementsItem.Source.AttributeRepeatable.IsNull() {
						*attributeRepeatable = statementsItem.Source.AttributeRepeatable.ValueBool()
					} else {
						attributeRepeatable = nil
					}
					attributeType := new(shared.AttributeType)
					if !statementsItem.Source.AttributeType.IsUnknown() && !statementsItem.Source.AttributeType.IsNull() {
						*attributeType = shared.AttributeType(statementsItem.Source.AttributeType.ValueString())
					} else {
						attributeType = nil
					}
					id14 := new(string)
					if !statementsItem.Source.ID.IsUnknown() && !statementsItem.Source.ID.IsNull() {
						*id14 = statementsItem.Source.ID.ValueString()
					} else {
						id14 = nil
					}
					origin1 := new(shared.Origin)
					if !statementsItem.Source.Origin.IsUnknown() && !statementsItem.Source.Origin.IsNull() {
						*origin1 = shared.Origin(statementsItem.Source.Origin.ValueString())
					} else {
						origin1 = nil
					}
					originType := new(shared.OriginType)
					if !statementsItem.Source.OriginType.IsUnknown() && !statementsItem.Source.OriginType.IsNull() {
						*originType = shared.OriginType(statementsItem.Source.OriginType.ValueString())
					} else {
						originType = nil
					}
					schema1 := new(string)
					if !statementsItem.Source.Schema.IsUnknown() && !statementsItem.Source.Schema.IsNull() {
						*schema1 = statementsItem.Source.Schema.ValueString()
					} else {
						schema1 = nil
					}
					source := shared.EvaluationSource{
						Attribute:           attribute1,
						AttributeOperation:  attributeOperation,
						AttributeRepeatable: attributeRepeatable,
						AttributeType:       attributeType,
						ID:                  id14,
						Origin:              origin1,
						OriginType:          originType,
						Schema:              schema1,
					}
					values := make([]string, 0, len(statementsItem.Values))
					for _, valuesItem := range statementsItem.Values {
						values = append(values, valuesItem.ValueString())
					}
					statements = append(statements, shared.Statement{
						ID:       id13,
						Operator: operator,
						Source:   source,
						Values:   values,
					})
				}
				conditions = append(conditions, shared.Condition{
					BranchName:      branchName,
					ID:              id12,
					LogicalOperator: logicalOperator,
					Statements:      statements,
				})
			}
			var description7 *shared.StepDescription
			if tasksItem.DecisionTask.Description != nil {
				enabled7 := new(bool)
				if !tasksItem.DecisionTask.Description.Enabled.IsUnknown() && !tasksItem.DecisionTask.Description.Enabled.IsNull() {
					*enabled7 = tasksItem.DecisionTask.Description.Enabled.ValueBool()
				} else {
					enabled7 = nil
				}
				value2 := new(string)
				if !tasksItem.DecisionTask.Description.Value.IsUnknown() && !tasksItem.DecisionTask.Description.Value.IsNull() {
					*value2 = tasksItem.DecisionTask.Description.Value.ValueString()
				} else {
					value2 = nil
				}
				description7 = &shared.StepDescription{
					Enabled: enabled7,
					Value:   value2,
				}
			}
			dueDate4 := new(string)
			if !tasksItem.DecisionTask.DueDate.IsUnknown() && !tasksItem.DecisionTask.DueDate.IsNull() {
				*dueDate4 = tasksItem.DecisionTask.DueDate.ValueString()
			} else {
				dueDate4 = nil
			}
			var dueDateConfig4 *shared.DueDateConfig
			if tasksItem.DecisionTask.DueDateConfig != nil {
				var duration6 float64
				duration6 = tasksItem.DecisionTask.DueDateConfig.Duration.ValueFloat64()

				phaseId8 := new(string)
				if !tasksItem.DecisionTask.DueDateConfig.PhaseID.IsUnknown() && !tasksItem.DecisionTask.DueDateConfig.PhaseID.IsNull() {
					*phaseId8 = tasksItem.DecisionTask.DueDateConfig.PhaseID.ValueString()
				} else {
					phaseId8 = nil
				}
				taskId6 := new(string)
				if !tasksItem.DecisionTask.DueDateConfig.TaskID.IsUnknown() && !tasksItem.DecisionTask.DueDateConfig.TaskID.IsNull() {
					*taskId6 = tasksItem.DecisionTask.DueDateConfig.TaskID.ValueString()
				} else {
					taskId6 = nil
				}
				typeVar4 := shared.DueDateConfigType(tasksItem.DecisionTask.DueDateConfig.Type.ValueString())
				unit6 := shared.TimeUnit(tasksItem.DecisionTask.DueDateConfig.Unit.ValueString())
				dueDateConfig4 = &shared.DueDateConfig{
					Duration: duration6,
					PhaseID:  phaseId8,
					TaskID:   taskId6,
					Type:     typeVar4,
					Unit:     unit6,
				}
			}
			var ecp2 *shared.ECPDetails
			if tasksItem.DecisionTask.Ecp != nil {
				description8 := new(string)
				if !tasksItem.DecisionTask.Ecp.Description.IsUnknown() && !tasksItem.DecisionTask.Ecp.Description.IsNull() {
					*description8 = tasksItem.DecisionTask.Ecp.Description.ValueString()
				} else {
					description8 = nil
				}
				enabled8 := new(bool)
				if !tasksItem.DecisionTask.Ecp.Enabled.IsUnknown() && !tasksItem.DecisionTask.Ecp.Enabled.IsNull() {
					*enabled8 = tasksItem.DecisionTask.Ecp.Enabled.ValueBool()
				} else {
					enabled8 = nil
				}
				var journey6 *shared.StepJourney
				if tasksItem.DecisionTask.Ecp.Journey != nil {
					id15 := new(string)
					if !tasksItem.DecisionTask.Ecp.Journey.ID.IsUnknown() && !tasksItem.DecisionTask.Ecp.Journey.ID.IsNull() {
						*id15 = tasksItem.DecisionTask.Ecp.Journey.ID.ValueString()
					} else {
						id15 = nil
					}
					journeyId6 := new(string)
					if !tasksItem.DecisionTask.Ecp.Journey.JourneyID.IsUnknown() && !tasksItem.DecisionTask.Ecp.Journey.JourneyID.IsNull() {
						*journeyId6 = tasksItem.DecisionTask.Ecp.Journey.JourneyID.ValueString()
					} else {
						journeyId6 = nil
					}
					name10 := new(string)
					if !tasksItem.DecisionTask.Ecp.Journey.Name.IsUnknown() && !tasksItem.DecisionTask.Ecp.Journey.Name.IsNull() {
						*name10 = tasksItem.DecisionTask.Ecp.Journey.Name.ValueString()
					} else {
						name10 = nil
					}
					journey6 = &shared.StepJourney{
						ID:        id15,
						JourneyID: journeyId6,
						Name:      name10,
					}
				}
				label4 := new(string)
				if !tasksItem.DecisionTask.Ecp.Label.IsUnknown() && !tasksItem.DecisionTask.Ecp.Label.IsNull() {
					*label4 = tasksItem.DecisionTask.Ecp.Label.ValueString()
				} else {
					label4 = nil
				}
				ecp2 = &shared.ECPDetails{
					Description: description8,
					Enabled:     enabled8,
					Journey:     journey6,
					Label:       label4,
				}
			}
			var id16 string
			id16 = tasksItem.DecisionTask.ID.ValueString()

			var installer2 *shared.ECPDetails
			if tasksItem.DecisionTask.Installer != nil {
				description9 := new(string)
				if !tasksItem.DecisionTask.Installer.Description.IsUnknown() && !tasksItem.DecisionTask.Installer.Description.IsNull() {
					*description9 = tasksItem.DecisionTask.Installer.Description.ValueString()
				} else {
					description9 = nil
				}
				enabled9 := new(bool)
				if !tasksItem.DecisionTask.Installer.Enabled.IsUnknown() && !tasksItem.DecisionTask.Installer.Enabled.IsNull() {
					*enabled9 = tasksItem.DecisionTask.Installer.Enabled.ValueBool()
				} else {
					enabled9 = nil
				}
				var journey7 *shared.StepJourney
				if tasksItem.DecisionTask.Installer.Journey != nil {
					id17 := new(string)
					if !tasksItem.DecisionTask.Installer.Journey.ID.IsUnknown() && !tasksItem.DecisionTask.Installer.Journey.ID.IsNull() {
						*id17 = tasksItem.DecisionTask.Installer.Journey.ID.ValueString()
					} else {
						id17 = nil
					}
					journeyId7 := new(string)
					if !tasksItem.DecisionTask.Installer.Journey.JourneyID.IsUnknown() && !tasksItem.DecisionTask.Installer.Journey.JourneyID.IsNull() {
						*journeyId7 = tasksItem.DecisionTask.Installer.Journey.JourneyID.ValueString()
					} else {
						journeyId7 = nil
					}
					name11 := new(string)
					if !tasksItem.DecisionTask.Installer.Journey.Name.IsUnknown() && !tasksItem.DecisionTask.Installer.Journey.Name.IsNull() {
						*name11 = tasksItem.DecisionTask.Installer.Journey.Name.ValueString()
					} else {
						name11 = nil
					}
					journey7 = &shared.StepJourney{
						ID:        id17,
						JourneyID: journeyId7,
						Name:      name11,
					}
				}
				label5 := new(string)
				if !tasksItem.DecisionTask.Installer.Label.IsUnknown() && !tasksItem.DecisionTask.Installer.Label.IsNull() {
					*label5 = tasksItem.DecisionTask.Installer.Label.ValueString()
				} else {
					label5 = nil
				}
				installer2 = &shared.ECPDetails{
					Description: description9,
					Enabled:     enabled9,
					Journey:     journey7,
					Label:       label5,
				}
			}
			var journey8 *shared.StepJourney
			if tasksItem.DecisionTask.Journey != nil {
				id18 := new(string)
				if !tasksItem.DecisionTask.Journey.ID.IsUnknown() && !tasksItem.DecisionTask.Journey.ID.IsNull() {
					*id18 = tasksItem.DecisionTask.Journey.ID.ValueString()
				} else {
					id18 = nil
				}
				journeyId8 := new(string)
				if !tasksItem.DecisionTask.Journey.JourneyID.IsUnknown() && !tasksItem.DecisionTask.Journey.JourneyID.IsNull() {
					*journeyId8 = tasksItem.DecisionTask.Journey.JourneyID.ValueString()
				} else {
					journeyId8 = nil
				}
				name12 := new(string)
				if !tasksItem.DecisionTask.Journey.Name.IsUnknown() && !tasksItem.DecisionTask.Journey.Name.IsNull() {
					*name12 = tasksItem.DecisionTask.Journey.Name.ValueString()
				} else {
					name12 = nil
				}
				journey8 = &shared.StepJourney{
					ID:        id18,
					JourneyID: journeyId8,
					Name:      name12,
				}
			}
			var name13 string
			name13 = tasksItem.DecisionTask.Name.ValueString()

			phaseId9 := new(string)
			if !tasksItem.DecisionTask.PhaseID.IsUnknown() && !tasksItem.DecisionTask.PhaseID.IsNull() {
				*phaseId9 = tasksItem.DecisionTask.PhaseID.ValueString()
			} else {
				phaseId9 = nil
			}
			requirements2 := make([]shared.EnableRequirement, 0, len(tasksItem.DecisionTask.Requirements))
			for _, requirementsItem2 := range tasksItem.DecisionTask.Requirements {
				phaseId10 := new(string)
				if !requirementsItem2.PhaseID.IsUnknown() && !requirementsItem2.PhaseID.IsNull() {
					*phaseId10 = requirementsItem2.PhaseID.ValueString()
				} else {
					phaseId10 = nil
				}
				taskId7 := new(string)
				if !requirementsItem2.TaskID.IsUnknown() && !requirementsItem2.TaskID.IsNull() {
					*taskId7 = requirementsItem2.TaskID.ValueString()
				} else {
					taskId7 = nil
				}
				when2 := shared.When(requirementsItem2.When.ValueString())
				requirements2 = append(requirements2, shared.EnableRequirement{
					PhaseID: phaseId10,
					TaskID:  taskId7,
					When:    when2,
				})
			}
			var schedule1 *shared.Schedule
			if tasksItem.DecisionTask.Schedule != nil {
				var delayedSchedule1 *shared.DelayedSchedule
				if tasksItem.DecisionTask.Schedule.DelayedSchedule != nil {
					var duration7 float64
					duration7 = tasksItem.DecisionTask.Schedule.DelayedSchedule.Duration.ValueFloat64()

					mode3 := shared.Mode(tasksItem.DecisionTask.Schedule.DelayedSchedule.Mode.ValueString())
					unit7 := shared.TimeUnit(tasksItem.DecisionTask.Schedule.DelayedSchedule.Unit.ValueString())
					delayedSchedule1 = &shared.DelayedSchedule{
						Duration: duration7,
						Mode:     mode3,
						Unit:     unit7,
					}
				}
				if delayedSchedule1 != nil {
					schedule1 = &shared.Schedule{
						DelayedSchedule: delayedSchedule1,
					}
				}
				var relativeSchedule1 *shared.RelativeSchedule
				if tasksItem.DecisionTask.Schedule.RelativeSchedule != nil {
					direction1 := shared.Direction(tasksItem.DecisionTask.Schedule.RelativeSchedule.Direction.ValueString())
					var duration8 float64
					duration8 = tasksItem.DecisionTask.Schedule.RelativeSchedule.Duration.ValueFloat64()

					mode4 := shared.RelativeScheduleMode(tasksItem.DecisionTask.Schedule.RelativeSchedule.Mode.ValueString())
					attribute2 := new(string)
					if !tasksItem.DecisionTask.Schedule.RelativeSchedule.Reference.Attribute.IsUnknown() && !tasksItem.DecisionTask.Schedule.RelativeSchedule.Reference.Attribute.IsNull() {
						*attribute2 = tasksItem.DecisionTask.Schedule.RelativeSchedule.Reference.Attribute.ValueString()
					} else {
						attribute2 = nil
					}
					var id19 string
					id19 = tasksItem.DecisionTask.Schedule.RelativeSchedule.Reference.ID.ValueString()

					origin2 := shared.RelativeScheduleOrigin(tasksItem.DecisionTask.Schedule.RelativeSchedule.Reference.Origin.ValueString())
					schema2 := new(string)
					if !tasksItem.DecisionTask.Schedule.RelativeSchedule.Reference.Schema.IsUnknown() && !tasksItem.DecisionTask.Schedule.RelativeSchedule.Reference.Schema.IsNull() {
						*schema2 = tasksItem.DecisionTask.Schedule.RelativeSchedule.Reference.Schema.ValueString()
					} else {
						schema2 = nil
					}
					reference1 := shared.Reference{
						Attribute: attribute2,
						ID:        id19,
						Origin:    origin2,
						Schema:    schema2,
					}
					unit8 := shared.TimeUnit(tasksItem.DecisionTask.Schedule.RelativeSchedule.Unit.ValueString())
					relativeSchedule1 = &shared.RelativeSchedule{
						Direction: direction1,
						Duration:  duration8,
						Mode:      mode4,
						Reference: reference1,
						Unit:      unit8,
					}
				}
				if relativeSchedule1 != nil {
					schedule1 = &shared.Schedule{
						RelativeSchedule: relativeSchedule1,
					}
				}
			}
			taskType2 := shared.TaskType(tasksItem.DecisionTask.TaskType.ValueString())
			taxonomies3 := make([]string, 0, len(tasksItem.DecisionTask.Taxonomies))
			for _, taxonomiesItem3 := range tasksItem.DecisionTask.Taxonomies {
				taxonomies3 = append(taxonomies3, taxonomiesItem3.ValueString())
			}
			decisionTask := shared.DecisionTask{
				AssignedTo:    assignedTo4,
				Conditions:    conditions,
				Description:   description7,
				DueDate:       dueDate4,
				DueDateConfig: dueDateConfig4,
				Ecp:           ecp2,
				ID:            id16,
				Installer:     installer2,
				Journey:       journey8,
				Name:          name13,
				PhaseID:       phaseId9,
				Requirements:  requirements2,
				Schedule:      schedule1,
				TaskType:      taskType2,
				Taxonomies:    taxonomies3,
			}
			tasks = append(tasks, shared.Task{
				DecisionTask: &decisionTask,
			})
		}
	}
	taxonomies4 := make([]string, 0, len(r.Taxonomies))
	for _, taxonomiesItem4 := range r.Taxonomies {
		taxonomies4 = append(taxonomies4, taxonomiesItem4.ValueString())
	}
	var trigger *shared.Trigger
	if r.Trigger != nil {
		var manualTrigger *shared.ManualTrigger
		if r.Trigger.ManualTrigger != nil {
			entitySchema := new(string)
			if !r.Trigger.ManualTrigger.EntitySchema.IsUnknown() && !r.Trigger.ManualTrigger.EntitySchema.IsNull() {
				*entitySchema = r.Trigger.ManualTrigger.EntitySchema.ValueString()
			} else {
				entitySchema = nil
			}
			id20 := new(string)
			if !r.Trigger.ManualTrigger.ID.IsUnknown() && !r.Trigger.ManualTrigger.ID.IsNull() {
				*id20 = r.Trigger.ManualTrigger.ID.ValueString()
			} else {
				id20 = nil
			}
			typeVar5 := shared.ManualTriggerType(r.Trigger.ManualTrigger.Type.ValueString())
			manualTrigger = &shared.ManualTrigger{
				EntitySchema: entitySchema,
				ID:           id20,
				Type:         typeVar5,
			}
		}
		if manualTrigger != nil {
			trigger = &shared.Trigger{
				ManualTrigger: manualTrigger,
			}
		}
		var automationTrigger *shared.AutomationTrigger
		if r.Trigger.AutomationTrigger != nil {
			var automationID string
			automationID = r.Trigger.AutomationTrigger.AutomationID.ValueString()

			id21 := new(string)
			if !r.Trigger.AutomationTrigger.ID.IsUnknown() && !r.Trigger.AutomationTrigger.ID.IsNull() {
				*id21 = r.Trigger.AutomationTrigger.ID.ValueString()
			} else {
				id21 = nil
			}
			typeVar6 := shared.Type(r.Trigger.AutomationTrigger.Type.ValueString())
			automationTrigger = &shared.AutomationTrigger{
				AutomationID: automationID,
				ID:           id21,
				Type:         typeVar6,
			}
		}
		if automationTrigger != nil {
			trigger = &shared.Trigger{
				AutomationTrigger: automationTrigger,
			}
		}
		var journeySubmissionTrigger *shared.JourneySubmissionTrigger
		if r.Trigger.JourneySubmissionTrigger != nil {
			automationId1 := new(string)
			if !r.Trigger.JourneySubmissionTrigger.AutomationID.IsUnknown() && !r.Trigger.JourneySubmissionTrigger.AutomationID.IsNull() {
				*automationId1 = r.Trigger.JourneySubmissionTrigger.AutomationID.ValueString()
			} else {
				automationId1 = nil
			}
			id22 := new(string)
			if !r.Trigger.JourneySubmissionTrigger.ID.IsUnknown() && !r.Trigger.JourneySubmissionTrigger.ID.IsNull() {
				*id22 = r.Trigger.JourneySubmissionTrigger.ID.ValueString()
			} else {
				id22 = nil
			}
			var journeyId9 string
			journeyId9 = r.Trigger.JourneySubmissionTrigger.JourneyID.ValueString()

			typeVar7 := shared.JourneySubmissionTriggerType(r.Trigger.JourneySubmissionTrigger.Type.ValueString())
			journeySubmissionTrigger = &shared.JourneySubmissionTrigger{
				AutomationID: automationId1,
				ID:           id22,
				JourneyID:    journeyId9,
				Type:         typeVar7,
			}
		}
		if journeySubmissionTrigger != nil {
			trigger = &shared.Trigger{
				JourneySubmissionTrigger: journeySubmissionTrigger,
			}
		}
	}
	updateEntityAttributes := make([]shared.UpdateEntityAttributes, 0, len(r.UpdateEntityAttributes))
	for _, updateEntityAttributesItem := range r.UpdateEntityAttributes {
		source1 := shared.Source(updateEntityAttributesItem.Source.ValueString())
		var entityAttribute string
		entityAttribute = updateEntityAttributesItem.Target.EntityAttribute.ValueString()

		var entitySchema1 string
		entitySchema1 = updateEntityAttributesItem.Target.EntitySchema.ValueString()

		target := shared.Target{
			EntityAttribute: entityAttribute,
			EntitySchema:    entitySchema1,
		}
		updateEntityAttributes = append(updateEntityAttributes, shared.UpdateEntityAttributes{
			Source: source1,
			Target: target,
		})
	}
	updatedAt := new(string)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueString()
	} else {
		updatedAt = nil
	}
	out := shared.FlowTemplateInput{
		AssignedTo:             assignedTo,
		AvailableInEcp:         availableInEcp,
		ClosingReasons:         closingReasons,
		CreatedAt:              createdAt,
		Description:            description,
		DueDate:                dueDate,
		DueDateConfig:          dueDateConfig,
		Edges:                  edges,
		Enabled:                enabled,
		ID:                     id1,
		IsFlowMigrated:         isFlowMigrated,
		Name:                   name,
		OrgID:                  orgID,
		Phases:                 phases,
		Tasks:                  tasks,
		Taxonomies:             taxonomies4,
		Trigger:                trigger,
		UpdateEntityAttributes: updateEntityAttributes,
		UpdatedAt:              updatedAt,
	}

	return &out, diags
}
