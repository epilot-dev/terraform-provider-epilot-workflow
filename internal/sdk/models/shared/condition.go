// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-workflow/internal/sdk/internal/utils"
)

type LogicalOperator string

const (
	LogicalOperatorAnd LogicalOperator = "AND"
	LogicalOperatorOr  LogicalOperator = "OR"
)

func (e LogicalOperator) ToPointer() *LogicalOperator {
	return &e
}
func (e *LogicalOperator) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AND":
		fallthrough
	case "OR":
		*e = LogicalOperator(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LogicalOperator: %v", v)
	}
}

type Condition struct {
	// The name of the branch
	BranchName      string          `json:"branch_name"`
	ID              string          `json:"id"`
	LogicalOperator LogicalOperator `json:"logical_operator"`
	Statements      []Statement     `json:"statements"`
}

func (c Condition) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Condition) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"branch_name", "id", "logical_operator", "statements"}); err != nil {
		return err
	}
	return nil
}

func (o *Condition) GetBranchName() string {
	if o == nil {
		return ""
	}
	return o.BranchName
}

func (o *Condition) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Condition) GetLogicalOperator() LogicalOperator {
	if o == nil {
		return LogicalOperator("")
	}
	return o.LogicalOperator
}

func (o *Condition) GetStatements() []Statement {
	if o == nil {
		return []Statement{}
	}
	return o.Statements
}
