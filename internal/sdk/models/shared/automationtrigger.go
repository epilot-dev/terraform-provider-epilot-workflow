// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Type string

const (
	TypeAutomation Type = "automation"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automation":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type AutomationTrigger struct {
	// Id of the automation config that triggers this workflow
	AutomationID string  `json:"automation_id"`
	ID           *string `json:"id,omitempty"`
	Type         Type    `json:"type"`
}

func (o *AutomationTrigger) GetAutomationID() string {
	if o == nil {
		return ""
	}
	return o.AutomationID
}

func (o *AutomationTrigger) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AutomationTrigger) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}
