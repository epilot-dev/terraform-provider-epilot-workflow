// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-workflow/internal/sdk/internal/utils"
)

type ActionScheduleType string

const (
	ActionScheduleTypeImmediateSchedule ActionScheduleType = "ImmediateSchedule"
	ActionScheduleTypeDelayedSchedule   ActionScheduleType = "DelayedSchedule"
	ActionScheduleTypeRelativeSchedule  ActionScheduleType = "RelativeSchedule"
)

type ActionSchedule struct {
	ImmediateSchedule *ImmediateSchedule `queryParam:"inline"`
	DelayedSchedule   *DelayedSchedule   `queryParam:"inline"`
	RelativeSchedule  *RelativeSchedule  `queryParam:"inline"`

	Type ActionScheduleType
}

func CreateActionScheduleImmediateSchedule(immediateSchedule ImmediateSchedule) ActionSchedule {
	typ := ActionScheduleTypeImmediateSchedule

	return ActionSchedule{
		ImmediateSchedule: &immediateSchedule,
		Type:              typ,
	}
}

func CreateActionScheduleDelayedSchedule(delayedSchedule DelayedSchedule) ActionSchedule {
	typ := ActionScheduleTypeDelayedSchedule

	return ActionSchedule{
		DelayedSchedule: &delayedSchedule,
		Type:            typ,
	}
}

func CreateActionScheduleRelativeSchedule(relativeSchedule RelativeSchedule) ActionSchedule {
	typ := ActionScheduleTypeRelativeSchedule

	return ActionSchedule{
		RelativeSchedule: &relativeSchedule,
		Type:             typ,
	}
}

func (u *ActionSchedule) UnmarshalJSON(data []byte) error {

	var immediateSchedule ImmediateSchedule = ImmediateSchedule{}
	if err := utils.UnmarshalJSON(data, &immediateSchedule, "", true, true); err == nil {
		u.ImmediateSchedule = &immediateSchedule
		u.Type = ActionScheduleTypeImmediateSchedule
		return nil
	}

	var delayedSchedule DelayedSchedule = DelayedSchedule{}
	if err := utils.UnmarshalJSON(data, &delayedSchedule, "", true, true); err == nil {
		u.DelayedSchedule = &delayedSchedule
		u.Type = ActionScheduleTypeDelayedSchedule
		return nil
	}

	var relativeSchedule RelativeSchedule = RelativeSchedule{}
	if err := utils.UnmarshalJSON(data, &relativeSchedule, "", true, true); err == nil {
		u.RelativeSchedule = &relativeSchedule
		u.Type = ActionScheduleTypeRelativeSchedule
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ActionSchedule", string(data))
}

func (u ActionSchedule) MarshalJSON() ([]byte, error) {
	if u.ImmediateSchedule != nil {
		return utils.MarshalJSON(u.ImmediateSchedule, "", true)
	}

	if u.DelayedSchedule != nil {
		return utils.MarshalJSON(u.DelayedSchedule, "", true)
	}

	if u.RelativeSchedule != nil {
		return utils.MarshalJSON(u.RelativeSchedule, "", true)
	}

	return nil, errors.New("could not marshal union type ActionSchedule: all fields are null")
}
