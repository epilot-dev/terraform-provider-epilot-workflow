// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ManualTriggerType string

const (
	ManualTriggerTypeManual ManualTriggerType = "manual"
)

func (e ManualTriggerType) ToPointer() *ManualTriggerType {
	return &e
}
func (e *ManualTriggerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manual":
		*e = ManualTriggerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ManualTriggerType: %v", v)
	}
}

type ManualTrigger struct {
	EntitySchema *string           `json:"entity_schema,omitempty"`
	ID           *string           `json:"id,omitempty"`
	Type         ManualTriggerType `json:"type"`
}

func (o *ManualTrigger) GetEntitySchema() *string {
	if o == nil {
		return nil
	}
	return o.EntitySchema
}

func (o *ManualTrigger) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ManualTrigger) GetType() ManualTriggerType {
	if o == nil {
		return ManualTriggerType("")
	}
	return o.Type
}
