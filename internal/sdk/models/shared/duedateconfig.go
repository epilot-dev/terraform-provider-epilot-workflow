// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Type string

const (
	TypeWorkflowStarted Type = "WORKFLOW_STARTED"
	TypeTaskFinished    Type = "TASK_FINISHED"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WORKFLOW_STARTED":
		fallthrough
	case "TASK_FINISHED":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type Unit string

const (
	UnitMinutes Unit = "minutes"
	UnitHours   Unit = "hours"
	UnitDays    Unit = "days"
	UnitWeeks   Unit = "weeks"
	UnitMonths  Unit = "months"
)

func (e Unit) ToPointer() *Unit {
	return &e
}
func (e *Unit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "minutes":
		fallthrough
	case "hours":
		fallthrough
	case "days":
		fallthrough
	case "weeks":
		fallthrough
	case "months":
		*e = Unit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Unit: %v", v)
	}
}

// DueDateConfig - Set due date for the task based on a dynamic condition
type DueDateConfig struct {
	Duration float64 `json:"duration"`
	TaskID   *string `json:"task_id,omitempty"`
	Type     Type    `json:"type"`
	Unit     Unit    `json:"unit"`
}

func (o *DueDateConfig) GetDuration() float64 {
	if o == nil {
		return 0.0
	}
	return o.Duration
}

func (o *DueDateConfig) GetTaskID() *string {
	if o == nil {
		return nil
	}
	return o.TaskID
}

func (o *DueDateConfig) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}

func (o *DueDateConfig) GetUnit() Unit {
	if o == nil {
		return Unit("")
	}
	return o.Unit
}
