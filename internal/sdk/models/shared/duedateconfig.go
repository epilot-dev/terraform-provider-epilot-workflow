// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DueDateConfigType string

const (
	DueDateConfigTypeWorkflowStarted DueDateConfigType = "WORKFLOW_STARTED"
	DueDateConfigTypeTaskFinished    DueDateConfigType = "TASK_FINISHED"
	DueDateConfigTypePhaseFinished   DueDateConfigType = "PHASE_FINISHED"
)

func (e DueDateConfigType) ToPointer() *DueDateConfigType {
	return &e
}
func (e *DueDateConfigType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WORKFLOW_STARTED":
		fallthrough
	case "TASK_FINISHED":
		fallthrough
	case "PHASE_FINISHED":
		*e = DueDateConfigType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DueDateConfigType: %v", v)
	}
}

// DueDateConfig - Set due date for the task based on a dynamic condition
type DueDateConfig struct {
	Duration float64           `json:"duration"`
	PhaseID  *string           `json:"phase_id,omitempty"`
	TaskID   *string           `json:"task_id,omitempty"`
	Type     DueDateConfigType `json:"type"`
	Unit     TimeUnit          `json:"unit"`
}

func (o *DueDateConfig) GetDuration() float64 {
	if o == nil {
		return 0.0
	}
	return o.Duration
}

func (o *DueDateConfig) GetPhaseID() *string {
	if o == nil {
		return nil
	}
	return o.PhaseID
}

func (o *DueDateConfig) GetTaskID() *string {
	if o == nil {
		return nil
	}
	return o.TaskID
}

func (o *DueDateConfig) GetType() DueDateConfigType {
	if o == nil {
		return DueDateConfigType("")
	}
	return o.Type
}

func (o *DueDateConfig) GetUnit() TimeUnit {
	if o == nil {
		return TimeUnit("")
	}
	return o.Unit
}
