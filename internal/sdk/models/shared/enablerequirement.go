// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type When string

const (
	WhenTaskFinished  When = "TASK_FINISHED"
	WhenPhaseFinished When = "PHASE_FINISHED"
)

func (e When) ToPointer() *When {
	return &e
}
func (e *When) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TASK_FINISHED":
		fallthrough
	case "PHASE_FINISHED":
		*e = When(v)
		return nil
	default:
		return fmt.Errorf("invalid value for When: %v", v)
	}
}

// EnableRequirement - describe the requirement for a task to be enabled
type EnableRequirement struct {
	PhaseID *string `json:"phase_id,omitempty"`
	TaskID  *string `json:"task_id,omitempty"`
	When    When    `json:"when"`
}

func (o *EnableRequirement) GetPhaseID() *string {
	if o == nil {
		return nil
	}
	return o.PhaseID
}

func (o *EnableRequirement) GetTaskID() *string {
	if o == nil {
		return nil
	}
	return o.TaskID
}

func (o *EnableRequirement) GetWhen() When {
	if o == nil {
		return When("")
	}
	return o.When
}
