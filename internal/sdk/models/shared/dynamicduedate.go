// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ActionTypeCondition string

const (
	ActionTypeConditionWorkflowStarted ActionTypeCondition = "WORKFLOW_STARTED"
	ActionTypeConditionStepClosed      ActionTypeCondition = "STEP_CLOSED"
)

func (e ActionTypeCondition) ToPointer() *ActionTypeCondition {
	return &e
}
func (e *ActionTypeCondition) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WORKFLOW_STARTED":
		fallthrough
	case "STEP_CLOSED":
		*e = ActionTypeCondition(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionTypeCondition: %v", v)
	}
}

type TimePeriod string

const (
	TimePeriodMinutes TimePeriod = "minutes"
	TimePeriodHours   TimePeriod = "hours"
	TimePeriodDays    TimePeriod = "days"
	TimePeriodWeeks   TimePeriod = "weeks"
	TimePeriodMonths  TimePeriod = "months"
)

func (e TimePeriod) ToPointer() *TimePeriod {
	return &e
}
func (e *TimePeriod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "minutes":
		fallthrough
	case "hours":
		fallthrough
	case "days":
		fallthrough
	case "weeks":
		fallthrough
	case "months":
		*e = TimePeriod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TimePeriod: %v", v)
	}
}

// DynamicDueDate - set a Duedate for a step then a specific
type DynamicDueDate struct {
	ActionTypeCondition ActionTypeCondition `json:"actionTypeCondition"`
	NumberOfUnits       float64             `json:"numberOfUnits"`
	StepID              *string             `json:"stepId,omitempty"`
	TimePeriod          TimePeriod          `json:"timePeriod"`
}

func (o *DynamicDueDate) GetActionTypeCondition() ActionTypeCondition {
	if o == nil {
		return ActionTypeCondition("")
	}
	return o.ActionTypeCondition
}

func (o *DynamicDueDate) GetNumberOfUnits() float64 {
	if o == nil {
		return 0.0
	}
	return o.NumberOfUnits
}

func (o *DynamicDueDate) GetStepID() *string {
	if o == nil {
		return nil
	}
	return o.StepID
}

func (o *DynamicDueDate) GetTimePeriod() TimePeriod {
	if o == nil {
		return TimePeriod("")
	}
	return o.TimePeriod
}
