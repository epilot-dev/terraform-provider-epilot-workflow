// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Mode string

const (
	ModeDelayed Mode = "delayed"
)

func (e Mode) ToPointer() *Mode {
	return &e
}
func (e *Mode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "delayed":
		*e = Mode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mode: %v", v)
	}
}

type DelayedSchedule struct {
	Duration float64  `json:"duration"`
	Mode     Mode     `json:"mode"`
	Unit     TimeUnit `json:"unit"`
}

func (o *DelayedSchedule) GetDuration() float64 {
	if o == nil {
		return 0.0
	}
	return o.Duration
}

func (o *DelayedSchedule) GetMode() Mode {
	if o == nil {
		return Mode("")
	}
	return o.Mode
}

func (o *DelayedSchedule) GetUnit() TimeUnit {
	if o == nil {
		return TimeUnit("")
	}
	return o.Unit
}
