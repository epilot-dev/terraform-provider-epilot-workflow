// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TaxCreateRegion string

const (
	TaxCreateRegionDe TaxCreateRegion = "DE"
	TaxCreateRegionAt TaxCreateRegion = "AT"
	TaxCreateRegionCh TaxCreateRegion = "CH"
)

func (e TaxCreateRegion) ToPointer() *TaxCreateRegion {
	return &e
}
func (e *TaxCreateRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DE":
		fallthrough
	case "AT":
		fallthrough
	case "CH":
		*e = TaxCreateRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TaxCreateRegion: %v", v)
	}
}

type TaxCreateType string

const (
	TaxCreateTypeVat    TaxCreateType = "VAT"
	TaxCreateTypeCustom TaxCreateType = "Custom"
)

func (e TaxCreateType) ToPointer() *TaxCreateType {
	return &e
}
func (e *TaxCreateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VAT":
		fallthrough
	case "Custom":
		*e = TaxCreateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TaxCreateType: %v", v)
	}
}

type TaxCreate struct {
	Active      bool            `json:"active"`
	Description *string         `json:"description,omitempty"`
	Rate        string          `json:"rate"`
	Region      TaxCreateRegion `json:"region"`
	Type        TaxCreateType   `json:"type"`
}

func (o *TaxCreate) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *TaxCreate) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *TaxCreate) GetRate() string {
	if o == nil {
		return ""
	}
	return o.Rate
}

func (o *TaxCreate) GetRegion() TaxCreateRegion {
	if o == nil {
		return TaxCreateRegion("")
	}
	return o.Region
}

func (o *TaxCreate) GetType() TaxCreateType {
	if o == nil {
		return TaxCreateType("")
	}
	return o.Type
}
