// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
)

// ProductType - The type of Product:
//
// | type | description |
// |----| ----|
// | `product` | Represents a physical good |
// | `service` | Represents a service or virtual product |
type ProductType string

const (
	ProductTypeProduct ProductType = "product"
	ProductTypeService ProductType = "service"
)

func (e ProductType) ToPointer() *ProductType {
	return &e
}
func (e *ProductType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "product":
		fallthrough
	case "service":
		*e = ProductType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductType: %v", v)
	}
}

type Product struct {
	ID     string `json:"_id"`
	Active bool   `json:"active"`
	// The product code
	Code *string `json:"code,omitempty"`
	// A description of the product. Multi-line supported.
	Description *string `json:"description,omitempty"`
	Feature     []any   `json:"feature,omitempty"`
	// Not visible to customers, only in internal tables
	InternalName *string `json:"internal_name,omitempty"`
	// The description for the product
	Name             string        `json:"name"`
	PriceOptions     *BaseRelation `json:"price_options,omitempty"`
	ProductDownloads any           `json:"product_downloads,omitempty"`
	ProductImages    any           `json:"product_images,omitempty"`
	// The type of Product:
	//
	// | type | description |
	// |----| ----|
	// | `product` | Represents a physical good |
	// | `service` | Represents a service or virtual product |
	//
	Type *ProductType `default:"product" json:"type"`
}

func (p Product) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Product) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Product) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Product) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *Product) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *Product) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Product) GetFeature() []any {
	if o == nil {
		return nil
	}
	return o.Feature
}

func (o *Product) GetInternalName() *string {
	if o == nil {
		return nil
	}
	return o.InternalName
}

func (o *Product) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Product) GetPriceOptions() *BaseRelation {
	if o == nil {
		return nil
	}
	return o.PriceOptions
}

func (o *Product) GetProductDownloads() any {
	if o == nil {
		return nil
	}
	return o.ProductDownloads
}

func (o *Product) GetProductImages() any {
	if o == nil {
		return nil
	}
	return o.ProductImages
}

func (o *Product) GetType() *ProductType {
	if o == nil {
		return nil
	}
	return o.Type
}
