// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AttributeOperation string

const (
	AttributeOperationAll     AttributeOperation = "all"
	AttributeOperationUpdated AttributeOperation = "updated"
	AttributeOperationAdded   AttributeOperation = "added"
	AttributeOperationDeleted AttributeOperation = "deleted"
)

func (e AttributeOperation) ToPointer() *AttributeOperation {
	return &e
}
func (e *AttributeOperation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "updated":
		fallthrough
	case "added":
		fallthrough
	case "deleted":
		*e = AttributeOperation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AttributeOperation: %v", v)
	}
}

type AttributeType string

const (
	AttributeTypeString       AttributeType = "string"
	AttributeTypeText         AttributeType = "text"
	AttributeTypeNumber       AttributeType = "number"
	AttributeTypeBoolean      AttributeType = "boolean"
	AttributeTypeDate         AttributeType = "date"
	AttributeTypeDatetime     AttributeType = "datetime"
	AttributeTypeTags         AttributeType = "tags"
	AttributeTypeCountry      AttributeType = "country"
	AttributeTypeEmail        AttributeType = "email"
	AttributeTypePhone        AttributeType = "phone"
	AttributeTypeProduct      AttributeType = "product"
	AttributeTypePrice        AttributeType = "price"
	AttributeTypeStatus       AttributeType = "status"
	AttributeTypeRelation     AttributeType = "relation"
	AttributeTypeMultiselect  AttributeType = "multiselect"
	AttributeTypeSelect       AttributeType = "select"
	AttributeTypeRadio        AttributeType = "radio"
	AttributeTypeRelationUser AttributeType = "relation_user"
	AttributeTypePurpose      AttributeType = "purpose"
	AttributeTypeLabel        AttributeType = "label"
)

func (e AttributeType) ToPointer() *AttributeType {
	return &e
}
func (e *AttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "string":
		fallthrough
	case "text":
		fallthrough
	case "number":
		fallthrough
	case "boolean":
		fallthrough
	case "date":
		fallthrough
	case "datetime":
		fallthrough
	case "tags":
		fallthrough
	case "country":
		fallthrough
	case "email":
		fallthrough
	case "phone":
		fallthrough
	case "product":
		fallthrough
	case "price":
		fallthrough
	case "status":
		fallthrough
	case "relation":
		fallthrough
	case "multiselect":
		fallthrough
	case "select":
		fallthrough
	case "radio":
		fallthrough
	case "relation_user":
		fallthrough
	case "purpose":
		fallthrough
	case "label":
		*e = AttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AttributeType: %v", v)
	}
}

type Origin string

const (
	OriginTrigger Origin = "trigger"
	OriginAction  Origin = "action"
)

func (e Origin) ToPointer() *Origin {
	return &e
}
func (e *Origin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "trigger":
		fallthrough
	case "action":
		*e = Origin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Origin: %v", v)
	}
}

type OriginType string

const (
	OriginTypeEntity       OriginType = "entity"
	OriginTypeWorkflow     OriginType = "workflow"
	OriginTypeJourneyBlock OriginType = "journey_block"
)

func (e OriginType) ToPointer() *OriginType {
	return &e
}
func (e *OriginType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "entity":
		fallthrough
	case "workflow":
		fallthrough
	case "journey_block":
		*e = OriginType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OriginType: %v", v)
	}
}

type EvaluationSource struct {
	Attribute           *string             `json:"attribute,omitempty"`
	AttributeOperation  *AttributeOperation `json:"attribute_operation,omitempty"`
	AttributeRepeatable *bool               `json:"attribute_repeatable,omitempty"`
	AttributeType       *AttributeType      `json:"attribute_type,omitempty"`
	// The id of the action or trigger
	ID         *string     `json:"id,omitempty"`
	Origin     *Origin     `json:"origin,omitempty"`
	OriginType *OriginType `json:"origin_type,omitempty"`
	Schema     *string     `json:"schema,omitempty"`
}

func (o *EvaluationSource) GetAttribute() *string {
	if o == nil {
		return nil
	}
	return o.Attribute
}

func (o *EvaluationSource) GetAttributeOperation() *AttributeOperation {
	if o == nil {
		return nil
	}
	return o.AttributeOperation
}

func (o *EvaluationSource) GetAttributeRepeatable() *bool {
	if o == nil {
		return nil
	}
	return o.AttributeRepeatable
}

func (o *EvaluationSource) GetAttributeType() *AttributeType {
	if o == nil {
		return nil
	}
	return o.AttributeType
}

func (o *EvaluationSource) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EvaluationSource) GetOrigin() *Origin {
	if o == nil {
		return nil
	}
	return o.Origin
}

func (o *EvaluationSource) GetOriginType() *OriginType {
	if o == nil {
		return nil
	}
	return o.OriginType
}

func (o *EvaluationSource) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}
