// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Direction string

const (
	DirectionBefore Direction = "before"
	DirectionAfter  Direction = "after"
)

func (e Direction) ToPointer() *Direction {
	return &e
}
func (e *Direction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "before":
		fallthrough
	case "after":
		*e = Direction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Direction: %v", v)
	}
}

type RelativeScheduleMode string

const (
	RelativeScheduleModeRelative RelativeScheduleMode = "relative"
)

func (e RelativeScheduleMode) ToPointer() *RelativeScheduleMode {
	return &e
}
func (e *RelativeScheduleMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "relative":
		*e = RelativeScheduleMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelativeScheduleMode: %v", v)
	}
}

type RelativeScheduleOrigin string

const (
	RelativeScheduleOriginFlowStarted            RelativeScheduleOrigin = "flow_started"
	RelativeScheduleOriginTaskCompleted          RelativeScheduleOrigin = "task_completed"
	RelativeScheduleOriginTriggerEntityAttribute RelativeScheduleOrigin = "trigger_entity_attribute"
)

func (e RelativeScheduleOrigin) ToPointer() *RelativeScheduleOrigin {
	return &e
}
func (e *RelativeScheduleOrigin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flow_started":
		fallthrough
	case "task_completed":
		fallthrough
	case "trigger_entity_attribute":
		*e = RelativeScheduleOrigin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelativeScheduleOrigin: %v", v)
	}
}

type Reference struct {
	// An entity attribute that identifies a date / datetime
	Attribute *string `json:"attribute,omitempty"`
	// The id of the entity / workflow / task, based on the origin of the schedule
	ID     string                 `json:"id"`
	Origin RelativeScheduleOrigin `json:"origin"`
	// The schema of the entity
	Schema *string `json:"schema,omitempty"`
}

func (o *Reference) GetAttribute() *string {
	if o == nil {
		return nil
	}
	return o.Attribute
}

func (o *Reference) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Reference) GetOrigin() RelativeScheduleOrigin {
	if o == nil {
		return RelativeScheduleOrigin("")
	}
	return o.Origin
}

func (o *Reference) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

type RelativeSchedule struct {
	Direction Direction            `json:"direction"`
	Duration  float64              `json:"duration"`
	Mode      RelativeScheduleMode `json:"mode"`
	Reference Reference            `json:"reference"`
	Unit      TimeUnit             `json:"unit"`
}

func (o *RelativeSchedule) GetDirection() Direction {
	if o == nil {
		return Direction("")
	}
	return o.Direction
}

func (o *RelativeSchedule) GetDuration() float64 {
	if o == nil {
		return 0.0
	}
	return o.Duration
}

func (o *RelativeSchedule) GetMode() RelativeScheduleMode {
	if o == nil {
		return RelativeScheduleMode("")
	}
	return o.Mode
}

func (o *RelativeSchedule) GetReference() Reference {
	if o == nil {
		return Reference{}
	}
	return o.Reference
}

func (o *RelativeSchedule) GetUnit() TimeUnit {
	if o == nil {
		return TimeUnit("")
	}
	return o.Unit
}
