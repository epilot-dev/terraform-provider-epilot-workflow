// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-workflow/internal/sdk/internal/utils"
)

type Condition string

const (
	ConditionClosed Condition = "CLOSED"
)

func (e Condition) ToPointer() *Condition {
	return &e
}
func (e *Condition) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CLOSED":
		*e = Condition(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Condition: %v", v)
	}
}

// StepRequirement - describe the requirement for step enablement
type StepRequirement struct {
	Condition    Condition `json:"condition"`
	DefinitionID string    `json:"definitionId"`
	Type         ItemType  `json:"type"`
}

func (s StepRequirement) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *StepRequirement) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"condition", "definitionId", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *StepRequirement) GetCondition() Condition {
	if o == nil {
		return Condition("")
	}
	return o.Condition
}

func (o *StepRequirement) GetDefinitionID() string {
	if o == nil {
		return ""
	}
	return o.DefinitionID
}

func (o *StepRequirement) GetType() ItemType {
	if o == nil {
		return ItemType("")
	}
	return o.Type
}
